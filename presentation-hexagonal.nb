(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 14.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    678041,      15558]
NotebookOptionsPosition[    667699,      15381]
NotebookOutlinePosition[    668147,      15399]
CellTagsIndexPosition[    668104,      15396]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
The  Fabric  Showdown : A  Comparative  Analysis  of  Clos  and  Mesh  \
Topologies  for  High - Performance  Interconnects\
\>", "Title",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9},
 FormatType->"TextForm",
 FontSize->24,
 Background->None,ExpressionUUID->"3a502bc2-f007-44d2-9ae7-cf5a568ecc31"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"generateHexagonalLattice", "[", "radius_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "basis", ",", "coords", ",", "latticePoints", ",", "neighborOffsets", 
       ",", "adjacency", ",", "edges"}], "}"}], ",", 
     RowBox[{
      RowBox[{"basis", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", 
            SqrtBox["3"]}], ",", 
           RowBox[{"-", "1"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", 
            SqrtBox["3"]}], ",", "1"}], "}"}]}], "}"}]}], ";", 
      RowBox[{"coords", "=", 
       RowBox[{"Select", "[", 
        RowBox[{
         RowBox[{"Tuples", "[", 
          RowBox[{
           RowBox[{"Range", "[", 
            RowBox[{
             RowBox[{"-", "radius"}], ",", "radius"}], "]"}], ",", "2"}], 
          "]"}], ",", 
         RowBox[{
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"i", "=", 
               RowBox[{
               "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}],
               ",", 
              RowBox[{"j", "=", 
               RowBox[{
               "#1", "\[LeftDoubleBracket]", "2", 
                "\[RightDoubleBracket]"}]}]}], "}"}], ",", 
            RowBox[{
             RowBox[{"Abs", "[", 
              RowBox[{"i", "+", "j"}], "]"}], "\[LessEqual]", "radius"}]}], 
           "]"}], "&"}]}], "]"}]}], ";", 
      RowBox[{"latticePoints", "=", 
       RowBox[{"coords", ".", "basis"}]}], ";", 
      RowBox[{"neighborOffsets", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"-", "1"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", 
           RowBox[{"-", "1"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}]}], ";", 
      RowBox[{"adjacency", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"c", "=", "coord"}], "}"}], ",", 
           RowBox[{"c", "\[Rule]", 
            RowBox[{"Select", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"c", "+", "#1"}], "&"}], ")"}], "/@", 
               "neighborOffsets"}], ",", 
              RowBox[{
               RowBox[{"MemberQ", "[", 
                RowBox[{"coords", ",", "#1"}], "]"}], "&"}]}], "]"}]}]}], 
          "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"coord", ",", "coords"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"edges", "=", 
       RowBox[{"UndirectedEdge", "@@@", 
        RowBox[{"Flatten", "[", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"coord", "\[Rule]", "#1"}], "&"}], ")"}], "/@", 
            RowBox[{"(", 
             RowBox[{"coord", "/.", "\[VeryThinSpace]", "adjacency"}], 
             ")"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"coord", ",", "coords"}], "}"}]}], "]"}], "]"}]}]}], ";", 
      
      RowBox[{"Association", "[", 
       RowBox[{
        RowBox[{"\"\<Graph\>\"", "\[Rule]", 
         RowBox[{"Graph", "[", 
          RowBox[{"coords", ",", 
           RowBox[{"DeleteDuplicates", "[", 
            RowBox[{"Sort", "/@", "edges"}], "]"}], ",", 
           RowBox[{"VertexCoordinates", "\[Rule]", 
            RowBox[{"Thread", "[", 
             RowBox[{"coords", "\[Rule]", "latticePoints"}], "]"}]}]}], 
          "]"}]}], ",", 
        RowBox[{"\"\<Coordinates\>\"", "\[Rule]", "coords"}], ",", 
        RowBox[{"\"\<Layout\>\"", "\[Rule]", "latticePoints"}]}], "]"}]}]}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"buildSpanningTree", "[", 
    RowBox[{"graph_", ",", "root_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"reapResult", ",", "edges"}], "}"}], ",", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"VertexQ", "[", 
          RowBox[{"graph", ",", "root"}], "]"}]}], ",", 
        RowBox[{"Return", "[", 
         RowBox[{"{", "}"}], "]"}]}], "]"}], ";", 
      RowBox[{"reapResult", "=", 
       RowBox[{"Reap", "[", 
        RowBox[{"BreadthFirstScan", "[", 
         RowBox[{"graph", ",", "root", ",", 
          RowBox[{"\"\<FrontierEdge\>\"", "\[Rule]", "Sow"}]}], "]"}], 
        "]"}]}], ";", 
      RowBox[{"edges", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "reapResult", "]"}], ">", "1"}], ",", 
         RowBox[{"reapResult", "\[LeftDoubleBracket]", 
          RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], ",", 
         RowBox[{"{", "}"}]}], "]"}]}], ";", 
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"VertexList", "[", "graph", "]"}], ",", "edges", ",", 
        RowBox[{"VertexCoordinates", "\[Rule]", 
         RowBox[{"GraphEmbedding", "[", "graph", "]"}]}]}], "]"}]}]}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"healTree", "[", 
    RowBox[{"tree_", ",", "failedNodes_", ",", "physicalGraph_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "liveTree", ",", "orphans", ",", "healingEdges", ",", "newTree", ",", 
       "connectedComponentRoot"}], "}"}], ",", 
     RowBox[{
      RowBox[{"liveTree", "=", 
       RowBox[{"VertexDelete", "[", 
        RowBox[{"tree", ",", "failedNodes"}], "]"}]}], ";", 
      RowBox[{"connectedComponentRoot", "=", 
       RowBox[{"First", "[", 
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{
           RowBox[{"ConnectedComponents", "[", "liveTree", "]"}], ",", 
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{"#1", ",", 
              RowBox[{
               RowBox[{"VertexList", "[", "tree", "]"}], 
               "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
             "]"}], "&"}]}], "]"}], ",", 
         RowBox[{"{", "}"}]}], "]"}]}], ";", 
      RowBox[{"orphans", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{
         RowBox[{"VertexList", "[", "liveTree", "]"}], ",", 
         "connectedComponentRoot"}], "]"}]}], ";", 
      RowBox[{"healingEdges", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"Reap", "[", 
          RowBox[{
           RowBox[{"Function", "[", 
            RowBox[{"orphan", ",", 
             RowBox[{"Module", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                "physicalNeighbors", ",", "potentialParents", ",", 
                 "newParent"}], "}"}], ",", 
               RowBox[{
                RowBox[{"physicalNeighbors", "=", 
                 RowBox[{"Complement", "[", 
                  RowBox[{
                   RowBox[{"AdjacencyList", "[", 
                    RowBox[{"physicalGraph", ",", "orphan"}], "]"}], ",", 
                   "failedNodes"}], "]"}]}], ";", 
                RowBox[{"potentialParents", "=", 
                 RowBox[{
                 "physicalNeighbors", "\[Intersection]", 
                  "connectedComponentRoot"}]}], ";", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Length", "[", "potentialParents", "]"}], ">", 
                   "0"}], ",", 
                  RowBox[{
                   RowBox[{"newParent", "=", 
                    RowBox[{"First", "[", "potentialParents", "]"}]}], ";", 
                   RowBox[{"Sow", "[", 
                    RowBox[{"newParent", "\[DirectedEdge]", "orphan"}], 
                    "]"}]}], ",", "Nothing"}], "]"}]}]}], "]"}]}], "]"}], "/@",
            "orphans"}], "]"}], "\[LeftDoubleBracket]", "2", 
         "\[RightDoubleBracket]"}], "]"}]}], ";", 
      RowBox[{"newTree", "=", 
       RowBox[{"EdgeAdd", "[", 
        RowBox[{
         RowBox[{"Graph", "[", 
          RowBox[{"connectedComponentRoot", ",", 
           RowBox[{"EdgeList", "[", 
            RowBox[{"liveTree", ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#1", "\[Rule]", "_"}], "&"}], ")"}], "/@", 
              "connectedComponentRoot"}]}], "]"}]}], "]"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"healingEdges", "=!=", 
            RowBox[{"{", "}"}]}], ",", "healingEdges", ",", 
           RowBox[{"{", "}"}]}], "]"}]}], "]"}]}], ";", 
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"VertexList", "[", "liveTree", "]"}], ",", 
        RowBox[{"EdgeList", "[", "newTree", "]"}], ",", 
        RowBox[{"VertexCoordinates", "\[Rule]", 
         RowBox[{"GraphEmbedding", "[", "physicalGraph", "]"}]}]}], "]"}]}]}],
     "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"radius", "=", "4"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"hexData", "=", 
      RowBox[{"generateHexagonalLattice", "[", "radius", "]"}]}], "}"}]}], 
   "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"physicalGraph", "=", 
   RowBox[{"hexData", "[", "\"\<Graph\>\"", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"coords", "=", 
   RowBox[{"hexData", "[", "\"\<Coordinates\>\"", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"layout", "=", 
   RowBox[{"hexData", "[", "\"\<Layout\>\"", "]"}]}], ";"}], "\n", 
 RowBox[{"DynamicModule", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"rootNode", "=", 
      RowBox[{"First", "[", "coords", "]"}]}], ",", 
     RowBox[{"failedNodes", "=", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{"currentTree", "=", 
      RowBox[{"buildSpanningTree", "[", 
       RowBox[{"physicalGraph", ",", 
        RowBox[{"First", "[", "coords", "]"}]}], "]"}]}]}], "}"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"updateVisualization", "[", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "initialTree", "}"}], ",", 
       RowBox[{
        RowBox[{"initialTree", "=", 
         RowBox[{"buildSpanningTree", "[", 
          RowBox[{"physicalGraph", ",", "rootNode"}], "]"}]}], ";", 
        RowBox[{"currentTree", "=", 
         RowBox[{"healTree", "[", 
          RowBox[{"initialTree", ",", "failedNodes", ",", "physicalGraph"}], 
          "]"}]}], ";"}]}], "]"}]}], ";", 
    RowBox[{"Column", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Pane", "[", 
         RowBox[{
          RowBox[{"Grid", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"Style", "[", 
                RowBox[{
                "\"\<D\[AE]d\[AE]lus N2N Lattice: Self-Healing Trees\>\"", 
                 ",", "Bold", ",", "20", ",", 
                 RowBox[{"FontFamily", "\[Rule]", "\"\<Helvetica\>\""}]}], 
                "]"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"Style", "[", 
                RowBox[{
                "\"\<This simulation demonstrates resilience using only local \
information. Each node builds a logical tree (its Local Observer View) on the \
physical graph.\>\"", ",", "12", ",", 
                 RowBox[{"GrayLevel", "[", "0.2", "]"}]}], "]"}], "}"}], ",", 
              
              RowBox[{"{", 
               RowBox[{"Item", "[", 
                RowBox[{
                 RowBox[{"Column", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Left-Click a cell to select a new Tree Root.\>\"", 
                    ",", "12"}], "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Ctrl + Left-Click a cell to simulate its \
failure/recovery.\>\"", ",", "12"}], "]"}]}], "}"}], "]"}], ",", 
                 RowBox[{"Alignment", "\[Rule]", "Left"}]}], "]"}], "}"}]}], 
             "}"}], ",", 
            RowBox[{"Spacings", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"1", ",", "1.5"}], "}"}]}]}], "]"}], ",", 
          RowBox[{"ImageMargins", "\[Rule]", "10"}]}], "]"}], ",", 
        RowBox[{"Dynamic", "[", 
         RowBox[{
          RowBox[{"Show", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Graph", "[", 
               RowBox[{"physicalGraph", ",", 
                RowBox[{"EdgeStyle", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"GrayLevel", "[", "0.8", "]"}], ",", "Thin"}], 
                  "}"}]}], ",", 
                RowBox[{"VertexSize", "\[Rule]", "0"}]}], "]"}], ",", 
              RowBox[{"Graphics", "[", 
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{"With", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"node", "=", 
                    RowBox[{
                    "coords", "\[LeftDoubleBracket]", "i", 
                    "\[RightDoubleBracket]"}]}], ",", 
                    RowBox[{"pos", "=", 
                    RowBox[{
                    "layout", "\[LeftDoubleBracket]", "i", 
                    "\[RightDoubleBracket]"}]}]}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"node", "\[Equal]", "rootNode"}], ",", "Orange", 
                    ",", 
                    RowBox[{"MemberQ", "[", 
                    RowBox[{"failedNodes", ",", "node"}], "]"}], ",", "Black",
                     ",", "True", ",", "LightGray"}], "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"GrayLevel", "[", "0.3", "]"}], ",", "Thin"}], 
                    "}"}], "]"}], ",", 
                    RowBox[{"EventHandler", "[", 
                    RowBox[{
                    RowBox[{"RegularPolygon", "[", 
                    RowBox[{"pos", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}], ",", "6"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"\<MouseClicked\>\"", "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"CurrentValue", "[", "\"\<ControlKey\>\"", "]"}], 
                    ",", 
                    RowBox[{"failedNodes", "=", 
                    RowBox[{"SymmetricDifference", "[", 
                    RowBox[{"failedNodes", ",", 
                    RowBox[{"{", "node", "}"}]}], "]"}]}], ",", 
                    RowBox[{"rootNode", "=", "node"}]}], "]"}], ";", 
                    RowBox[{"updateVisualization", "[", "]"}]}], ")"}]}], 
                    "}"}], ",", 
                    RowBox[{"PassEventsDown", "\[Rule]", "True"}]}], "]"}]}], 
                    "}"}]}], "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"i", ",", 
                   RowBox[{"Length", "[", "coords", "]"}]}], "}"}]}], "]"}], 
               "]"}], ",", 
              RowBox[{"Graph", "[", 
               RowBox[{"currentTree", ",", 
                RowBox[{"EdgeStyle", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Darker", "[", "Red", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "3", "]"}]}], "}"}]}], 
                ",", 
                RowBox[{"EdgeShapeFunction", "\[Rule]", 
                 RowBox[{"GraphElementData", "[", 
                  RowBox[{"{", 
                   RowBox[{"\"\<Arrow\>\"", ",", 
                    RowBox[{"\"\<ArrowSize\>\"", "\[Rule]", "0.02"}], ",", 
                    RowBox[{"\"\<ArrowPositions\>\"", "\[Rule]", "0.6"}]}], 
                   "}"}], "]"}]}], ",", 
                RowBox[{"VertexSize", "\[Rule]", "0"}]}], "]"}]}], "}"}], ",", 
            RowBox[{"ImageSize", "\[Rule]", "800"}], ",", 
            RowBox[{"PlotLabel", "\[Rule]", 
             RowBox[{"Style", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                "StringTemplate", "[", 
                 "\"\<Logical Tree rooted at `` | Failed Nodes: ``\>\"", 
                 "]"}], "[", 
                RowBox[{"rootNode", ",", 
                 RowBox[{"Length", "[", "failedNodes", "]"}]}], "]"}], ",", 
               "14", ",", 
               RowBox[{"FontFamily", "\[Rule]", "\"\<Helvetica\>\""}]}], 
              "]"}]}], ",", 
            RowBox[{"BaseStyle", "\[Rule]", 
             RowBox[{"Antialiasing", "\[Rule]", "True"}]}]}], "]"}], ",", 
          RowBox[{"TrackedSymbols", "\[RuleDelayed]", 
           RowBox[{"{", 
            RowBox[{"rootNode", ",", "failedNodes", ",", "currentTree"}], 
            "}"}]}]}], "]"}]}], "}"}], ",", 
      RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}]}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.962799505513484*^9, 3.9627995221325207`*^9}, {
  3.9628069652145987`*^9, 3.962806965789866*^9}},
 CellLabel->
  "In[2687]:=",ExpressionUUID->"998aaebd-de5d-4d41-af48-dcfd059ba0df"],

Cell[BoxData[
 DynamicModuleBox[{DaedaelusMeshCore`Private`rootNode$$ = {-4, 0}, 
  DaedaelusMeshCore`Private`failedNodes$$ = {}, 
  DaedaelusMeshCore`Private`currentTree$$ = Graph[CompressedData["
1:eJxdkYEJQzEIRI1mkQ7SJTpCB/jdH2psQt+BfEEeJF7Uy+P9eV1uZs+dh9+q
MjigzgPOzax/JPVJfVKf1Cf1a1NZ0Dgf0GHAo1OPalqFcT+gw4BHb20nzbqa
1loM6DDg5E6eaNfVeo/2htJhNG/ljXbVzOrpTeto5b08XW1HzRjo5u2P5L28
lCc/q8HRWA==
   "], {Null, {{1, 7}, {1, 2}, {1, 6}, {7, 14}, {7, 8}, {7, 13}, {2, 3}, {6, 
    12}, {14, 22}, {14, 15}, {14, 21}, {8, 9}, {13, 20}, {3, 4}, {12, 19}, {
    22, 31}, {22, 23}, {22, 30}, {15, 16}, {21, 29}, {9, 10}, {20, 28}, {4, 
    5}, {19, 27}, {31, 40}, {31, 32}, {31, 39}, {23, 24}, {30, 38}, {16, 
    17}, {29, 37}, {10, 11}, {28, 36}, {40, 48}, {40, 41}, {40, 47}, {32, 
    33}, {39, 46}, {24, 25}, {38, 45}, {17, 18}, {37, 44}, {48, 55}, {48, 
    49}, {48, 54}, {41, 42}, {47, 53}, {33, 34}, {46, 52}, {25, 26}, {45, 
    51}, {55, 61}, {55, 56}, {55, 60}, {49, 50}, {54, 59}, {42, 43}, {53, 
    58}, {34, 35}, {52, 57}}}, {
   VertexCoordinates -> {{4 3^Rational[1, 2], 4}, {3 3^Rational[1, 2], 5}, {
      2 3^Rational[1, 2], 6}, {3^Rational[1, 2], 7}, {0, 8}, {
      4 3^Rational[1, 2], 2}, {3 3^Rational[1, 2], 3}, {
      2 3^Rational[1, 2], 4}, {3^Rational[1, 2], 5}, {0, 
      6}, {-3^Rational[1, 2], 7}, {4 3^Rational[1, 2], 0}, {
      3 3^Rational[1, 2], 1}, {2 3^Rational[1, 2], 2}, {
      3^Rational[1, 2], 3}, {0, 
      4}, {-3^Rational[1, 2], 5}, {(-2) 3^Rational[1, 2], 6}, {
      4 3^Rational[1, 2], -2}, {3 3^Rational[1, 2], -1}, {
      2 3^Rational[1, 2], 0}, {3^Rational[1, 2], 1}, {0, 
      2}, {-3^Rational[1, 2], 3}, {(-2) 3^Rational[1, 2], 4}, {(-3) 
       3^Rational[1, 2], 5}, {4 3^Rational[1, 2], -4}, {
      3 3^Rational[1, 2], -3}, {2 3^Rational[1, 2], -2}, {
      3^Rational[1, 2], -1}, {0, 
      0}, {-3^Rational[1, 2], 1}, {(-2) 3^Rational[1, 2], 2}, {(-3) 
       3^Rational[1, 2], 3}, {(-4) 3^Rational[1, 2], 4}, {
      3 3^Rational[1, 2], -5}, {2 3^Rational[1, 2], -4}, {
      3^Rational[1, 2], -3}, {
      0, -2}, {-3^Rational[1, 2], -1}, {(-2) 3^Rational[1, 2], 0}, {(-3) 
       3^Rational[1, 2], 1}, {(-4) 3^Rational[1, 2], 2}, {
      2 3^Rational[1, 2], -6}, {3^Rational[1, 2], -5}, {
      0, -4}, {-3^Rational[1, 2], -3}, {(-2) 3^Rational[1, 2], -2}, {(-3) 
       3^Rational[1, 2], -1}, {(-4) 3^Rational[1, 2], 0}, {
      3^Rational[1, 2], -7}, {
      0, -6}, {-3^Rational[1, 2], -5}, {(-2) 3^Rational[1, 2], -4}, {(-3) 
       3^Rational[1, 2], -3}, {(-4) 3^Rational[1, 2], -2}, {
      0, -8}, {-3^Rational[1, 2], -7}, {(-2) 3^Rational[1, 2], -6}, {(-3) 
       3^Rational[1, 2], -5}, {(-4) 3^Rational[1, 2], -4}}}]}, 
  TagBox[GridBox[{
     {
      PaneBox[
       TagBox[GridBox[{
          {
           
           StyleBox["\<\"D\[AE]d\[AE]lus N2N Lattice: Self-Healing Trees\"\>",
            
            StripOnInput->False,
            FontFamily->"Helvetica",
            FontSize->20,
            FontWeight->Bold]},
          {
           
           StyleBox["\<\"This simulation demonstrates resilience using only \
local information. Each node builds a logical tree (its Local Observer View) \
on the physical graph.\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0.2],
            FrontFaceColor->GrayLevel[0.2],
            BackFaceColor->GrayLevel[0.2],
            GraphicsColor->GrayLevel[0.2],
            FontSize->12,
            FontColor->GrayLevel[0.2]]},
          {
           ItemBox[
            TagBox[GridBox[{
               {
                
                StyleBox["\<\"Left-Click a cell to select a new Tree \
Root.\"\>",
                 StripOnInput->False,
                 FontSize->12]},
               {
                
                StyleBox["\<\"Ctrl + Left-Click a cell to simulate its \
failure/recovery.\"\>",
                 StripOnInput->False,
                 FontSize->12]}
              },
              DefaultBaseStyle->"Column",
              GridBoxAlignment->{"Columns" -> {{Left}}},
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
             "Column"],
            Alignment->Left,
            StripOnInput->False]}
         },
         AutoDelete->False,
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
         GridBoxSpacings->{"Columns" -> {{1}}, "Rows" -> {{1.5}}}],
        "Grid"],
       ImageMargins->10]},
     {
      DynamicBox[ToBoxes[
        Show[{
          Graph[DaedaelusMeshCore`Private`physicalGraph, EdgeStyle -> {
             GrayLevel[0.8], Thin}, VertexSize -> 0], 
          Graphics[
           Table[
            
            With[{DaedaelusMeshCore`Private`node$ = 
              Part[DaedaelusMeshCore`Private`coords, 
                DaedaelusMeshCore`Private`i], DaedaelusMeshCore`Private`pos$ = 
              Part[DaedaelusMeshCore`Private`layout, 
                DaedaelusMeshCore`Private`i]}, {
              Which[
              DaedaelusMeshCore`Private`node$ == 
               DaedaelusMeshCore`Private`rootNode$$, Orange, 
               MemberQ[
               DaedaelusMeshCore`Private`failedNodes$$, 
                DaedaelusMeshCore`Private`node$], Black, True, LightGray], 
              EdgeForm[{
                GrayLevel[0.3], Thin}], 
              EventHandler[
               RegularPolygon[DaedaelusMeshCore`Private`pos$, {1, 0}, 6], {
               "MouseClicked" :> (If[
                   CurrentValue["ControlKey"], 
                   DaedaelusMeshCore`Private`failedNodes$$ = 
                   SymmetricDifference[
                    DaedaelusMeshCore`Private`failedNodes$$, {
                    DaedaelusMeshCore`Private`node$}], 
                   DaedaelusMeshCore`Private`rootNode$$ = 
                   DaedaelusMeshCore`Private`node$]; 
                 DaedaelusMeshCore`Private`updateVisualization[])}, 
               PassEventsDown -> True]}], {DaedaelusMeshCore`Private`i, 
             Length[DaedaelusMeshCore`Private`coords]}]], 
          Graph[DaedaelusMeshCore`Private`currentTree$$, EdgeStyle -> {
             Darker[Red], 
             AbsoluteThickness[3]}, EdgeShapeFunction -> 
           DaedaelusMeshCore`Private`GraphElementData[{
             "Arrow", "ArrowSize" -> 0.02, "ArrowPositions" -> 0.6}], 
           VertexSize -> 0]}, ImageSize -> 800, PlotLabel -> Style[
           StringTemplate["Logical Tree rooted at `` | Failed Nodes: ``"][
           DaedaelusMeshCore`Private`rootNode$$, 
            Length[DaedaelusMeshCore`Private`failedNodes$$]], 14, FontFamily -> 
           "Helvetica"], BaseStyle -> (Antialiasing -> True)], StandardForm],
       ImageSizeCache->{1000., {561., 569.}},
       TrackedSymbols:>{
        DaedaelusMeshCore`Private`rootNode$$, 
         DaedaelusMeshCore`Private`failedNodes$$, 
         DaedaelusMeshCore`Private`currentTree$$}]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{{3.962799507041144*^9, 3.96279953807552*^9}, 
   3.962806966299202*^9, 3.962876205337038*^9},
 CellLabel->
  "Out[2694]=",ExpressionUUID->"3392d2ef-9821-4e8d-882a-51a0468d516c"]
}, Open  ]],

Cell["\<\
An Architectural Dichotomy: Structured Hierarchy vs. Homogeneous Lattice\
\>", "Subtitle",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898307534945*^9}},
 FormatType->"TextForm",
 FontSize->18,
 Background->None,ExpressionUUID->"412a1740-f330-49f4-a2d0-0c6863a5b66a"],

Cell[CellGroupData[{

Cell["\<\
The design of large-scale network fabrics represents a fundamental choice \
between competing architectural philosophies. On one hand, the structured, \
hierarchical approach of the Clos network, modernized as the spine-leaf \
topology, offers engineered predictability and massive, scalable bandwidth. \
On the other, the decentralized, homogeneous lattice of the mesh topology, \
championed by innovators like Daedaelus, promises inherent robustness and a \
new paradigm of network reliability. This report provides a deep comparative \
analysis of these two architectures, leveraging quantitative graph-theoretic \
simulations to dissect their performance, diversity, and resilience. By \
interpreting these numerical results through the lens of their core design \
principles, we can illuminate the profound strategic trade-offs that network \
architects face when selecting a fabric for next-generation computing \
environments.\
\>", "Chapter",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898338257278*^9}},
 FormatType->"TextForm",
 FontSize->14,
 Background->None,ExpressionUUID->"c10f83c2-545d-4e3d-ba4d-e5baf3ba7b1e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"BeginPackage", "[", "\"\<DaedalusMeshGraphics`\>\"", "]"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"GenerateDaedalusLattice", "::", "usage"}], "MessageName"], "=", 
   "\"\<GenerateDaedalusLattice[rows, cols] -> \
<|\\\"Graph\\\",\\\"Coordinates\\\",\\\"Layout\\\"|>. \\n   Creates the \
physical ground\:2011plane of a D\[AE]d\[AE]lus N\.b2N lattice.\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"BuildSpanningTree", "::", "usage"}], "MessageName"], "=", 
   "\"\<BuildSpanningTree[g, root] -> <|\\\"TreeEdges\\\",\\\"FallbackEdges\\\
\"|>. \\n   Constructs a logical routing tree on the physical graph.\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"HealSpanningTree", "::", "usage"}], "MessageName"], "=", 
   "\"\<HealSpanningTree[treeData, failedNodes, failedLinks, g] -> repaired \
tree edge\:2011set.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"DaedalusLatticeVisualizer", "::", "usage"}], "MessageName"], 
   "=", "\"\<DaedalusLatticeVisualizer[rows, cols] -> interactive \
viewer.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"GenerateMeshNetwork", "::", "usage"}], "MessageName"], "=", 
   "\"\<GenerateMeshNetwork[n, degree] -> deterministic k\:2011regular graph.\
\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"SpanningTreeCount", "::", "usage"}], "MessageName"], "=", 
   "\"\<SpanningTreeCount[g] -> number of spanning trees via the \
Matrix\:2011Tree theorem.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"CompareClosVsMesh", "::", "usage"}], "MessageName"], "=", 
   "\"\<CompareClosVsMesh[serversPerRack, numRacks, numSpines, degree, \
failures] \\n   -> comparative visualization of Clos vs. D\[AE]d\[AE]lus \
Mesh.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Begin", "[", "\"\<`Private`\>\"", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"ClearAll", "[", "symDiff", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"symDiff", "[", 
    RowBox[{"a_List", ",", "b_List"}], "]"}], ":=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"Complement", "[", 
      RowBox[{"a", ",", "b"}], "]"}], ",", 
     RowBox[{"Complement", "[", 
      RowBox[{"b", ",", "a"}], "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"ClearAll", "[", "MyAlgebraicConnectivity", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"MyAlgebraicConnectivity", "[", "g_Graph", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"L", ",", "ev"}], "}"}], ",", 
     RowBox[{
      RowBox[{"L", "=", 
       RowBox[{"GraphLaplacian", "[", "g", "]"}]}], ";", 
      RowBox[{"ev", "=", 
       RowBox[{"Sort", "[", 
        RowBox[{"Eigenvalues", "[", 
         RowBox[{"N", "[", "L", "]"}], "]"}], "]"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "ev", "]"}], "\[GreaterEqual]", "2"}], ",", 
        RowBox[{"ev", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
        ",", "0"}], "]"}]}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"ClearAll", "[", "GenerateDaedalusLattice", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GenerateDaedalusLattice", "[", 
    RowBox[{
     RowBox[{"rows_Integer", "?", "Positive"}], ",", 
     RowBox[{"cols_Integer", "?", "Positive"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "coords", ",", "deltas", ",", "insideQ", ",", "edges", ",", "g"}], 
      "}"}], ",", 
     RowBox[{
      RowBox[{"coords", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"x", ",", "y"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"y", ",", "0", ",", 
             RowBox[{"rows", "-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"x", ",", "0", ",", 
             RowBox[{"cols", "-", "1"}]}], "}"}]}], "]"}], ",", "1"}], 
        "]"}]}], ";", 
      RowBox[{"deltas", "=", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{
         RowBox[{"Tuples", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "1"}], "}"}], ",", "2"}], 
          "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}], "]"}]}], ";", 
      RowBox[{
       RowBox[{"insideQ", "[", 
        RowBox[{"{", 
         RowBox[{"x_", ",", "y_"}], "}"}], "]"}], ":=", 
       RowBox[{
        RowBox[{"0", "\[LessEqual]", "x", "<", "cols"}], "&&", 
        RowBox[{"0", "\[LessEqual]", "y", "<", "rows"}]}]}], ";", 
      RowBox[{"edges", "=", 
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"UndirectedEdge", "@@", 
            RowBox[{"Sort", "[", "#1", "]"}]}], "&"}], ")"}], "/@", 
         RowBox[{"Select", "[", 
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"c", ",", 
                    RowBox[{"c", "+", "\[CapitalDelta]"}]}], "}"}], "&"}], 
                 ")"}], "/@", "deltas"}], ",", 
               RowBox[{"{", 
                RowBox[{"c", ",", "coords"}], "}"}]}], "]"}], ",", "1"}], 
            "]"}], ",", 
           RowBox[{"insideQ", "@*", "Last"}]}], "]"}]}], "]"}]}], ";", 
      RowBox[{"g", "=", 
       RowBox[{"Graph", "[", 
        RowBox[{"coords", ",", "edges", ",", 
         RowBox[{"VertexCoordinates", "\[Rule]", "coords"}]}], "]"}]}], ";", 
      RowBox[{"Association", "[", 
       RowBox[{
        RowBox[{"\"\<Graph\>\"", "\[Rule]", "g"}], ",", 
        RowBox[{"\"\<Coordinates\>\"", "\[Rule]", 
         RowBox[{"VertexList", "[", "g", "]"}]}], ",", 
        RowBox[{"\"\<Layout\>\"", "\[Rule]", 
         RowBox[{"AssociationThread", "[", 
          RowBox[{
           RowBox[{"VertexList", "[", "g", "]"}], ",", 
           RowBox[{"GraphEmbedding", "[", "g", "]"}]}], "]"}]}]}], "]"}]}]}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"ClearAll", "[", "BuildSpanningTree", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"BuildSpanningTree", "[", 
    RowBox[{"g_Graph", ",", "root_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"edges", "=", 
       RowBox[{"{", "}"}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"VertexQ", "[", 
          RowBox[{"g", ",", "root"}], "]"}]}], ",", 
        RowBox[{"Return", "[", 
         RowBox[{"Association", "[", 
          RowBox[{
           RowBox[{"\"\<TreeEdges\>\"", "\[Rule]", 
            RowBox[{"{", "}"}]}], ",", 
           RowBox[{"\"\<FallbackEdges\>\"", "\[Rule]", 
            RowBox[{"EdgeList", "[", "g", "]"}]}]}], "]"}], "]"}]}], "]"}], 
      ";", 
      RowBox[{"BreadthFirstScan", "[", 
       RowBox[{"g", ",", "root", ",", 
        RowBox[{"\"\<VertexPredecessor\>\"", "\[Rule]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"#2", "=!=", "Null"}], ",", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"edges", ",", 
               RowBox[{"#1", "\[UndirectedEdge]", "#2"}]}], "]"}]}], "]"}], 
           "&"}], ")"}]}]}], "]"}], ";", 
      RowBox[{"Association", "[", 
       RowBox[{
        RowBox[{"\"\<TreeEdges\>\"", "\[Rule]", "edges"}], ",", 
        RowBox[{"\"\<FallbackEdges\>\"", "\[Rule]", 
         RowBox[{"Complement", "[", 
          RowBox[{
           RowBox[{"EdgeList", "[", "g", "]"}], ",", "edges"}], "]"}]}]}], 
       "]"}]}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"ClearAll", "[", "HealSpanningTree", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"HealSpanningTree", "[", 
    RowBox[{
    "td_Association", ",", "badV_List", ",", "badE_List", ",", "g_Graph"}], 
    "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"liveTree", ",", "gLive", ",", "root"}], "}"}], ",", 
     RowBox[{
      RowBox[{"liveTree", "=", 
       RowBox[{"Select", "[", 
        RowBox[{
         RowBox[{"td", "[", "\"\<TreeEdges\>\"", "]"}], ",", 
         RowBox[{
          RowBox[{
           RowBox[{"FreeQ", "[", 
            RowBox[{"badV", ",", 
             RowBox[{
             "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
            "]"}], "&&", 
           RowBox[{"FreeQ", "[", 
            RowBox[{"badV", ",", 
             RowBox[{
             "#1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
            "]"}], "&&", 
           RowBox[{"FreeQ", "[", 
            RowBox[{"badE", ",", 
             RowBox[{"Sort", "[", 
              RowBox[{"List", "@@", "#1"}], "]"}]}], "]"}]}], "&"}]}], 
        "]"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"liveTree", "===", 
         RowBox[{"{", "}"}]}], ",", 
        RowBox[{"Return", "[", 
         RowBox[{"{", "}"}], "]"}]}], "]"}], ";", 
      RowBox[{"gLive", "=", 
       RowBox[{"EdgeDelete", "[", 
        RowBox[{
         RowBox[{"VertexDelete", "[", 
          RowBox[{"g", ",", "badV"}], "]"}], ",", "badE"}], "]"}]}], ";", 
      RowBox[{"root", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"VertexQ", "[", 
          RowBox[{"gLive", ",", 
           RowBox[{"First", "[", 
            RowBox[{"First", "[", "liveTree", "]"}], "]"}]}], "]"}], ",", 
         RowBox[{"First", "[", 
          RowBox[{"First", "[", "liveTree", "]"}], "]"}], ",", 
         RowBox[{"First", "[", 
          RowBox[{"VertexList", "[", "gLive", "]"}], "]"}]}], "]"}]}], ";", 
      RowBox[{"EdgeList", "[", 
       RowBox[{"FindSpanningTree", "[", 
        RowBox[{"gLive", ",", "root"}], "]"}], "]"}]}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"ClearAll", "[", "lineOf", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"lineOf", "[", 
    RowBox[{"e_UndirectedEdge", ",", "layout_"}], "]"}], ":=", 
   RowBox[{"Line", "[", 
    RowBox[{"layout", "/@", 
     RowBox[{"List", "@@", "e"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"ClearAll", "[", "DaedalusLatticeVisualizer", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"DaedalusLatticeVisualizer", "[", 
    RowBox[{
     RowBox[{"rows_Integer", "?", "Positive"}], ",", 
     RowBox[{"cols_Integer", "?", "Positive"}]}], "]"}], ":=", 
   RowBox[{"DynamicModule", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"lat", ",", "layout", ",", "root", ",", 
       RowBox[{"badN", "=", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"badL", "=", 
        RowBox[{"{", "}"}]}], ",", "td", ",", "healed", ",", "edgeMid", ",", 
       "refresh"}], "}"}], ",", 
     RowBox[{
      RowBox[{"lat", "=", 
       RowBox[{"GenerateDaedalusLattice", "[", 
        RowBox[{"rows", ",", "cols"}], "]"}]}], ";", 
      RowBox[{"layout", "=", 
       RowBox[{"lat", "[", "\"\<Layout\>\"", "]"}]}], ";", 
      RowBox[{"root", "=", 
       RowBox[{"First", "[", 
        RowBox[{"lat", "[", "\"\<Coordinates\>\"", "]"}], "]"}]}], ";", 
      RowBox[{
       RowBox[{"refresh", "[", "]"}], ":=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"td", "=", 
          RowBox[{"BuildSpanningTree", "[", 
           RowBox[{
            RowBox[{"lat", "[", "\"\<Graph\>\"", "]"}], ",", "root"}], 
           "]"}]}], ";", 
         RowBox[{"healed", "=", 
          RowBox[{"HealSpanningTree", "[", 
           RowBox[{"td", ",", "badN", ",", "badL", ",", 
            RowBox[{"lat", "[", "\"\<Graph\>\"", "]"}]}], "]"}]}], ";", 
         RowBox[{"edgeMid", "=", 
          RowBox[{"AssociationThread", "[", 
           RowBox[{
            RowBox[{"EdgeList", "[", 
             RowBox[{"lat", "[", "\"\<Graph\>\"", "]"}], "]"}], ",", 
            RowBox[{"Mean", "/@", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"layout", "/@", 
                 RowBox[{"List", "@@", "#1"}]}], "&"}], ")"}], "/@", 
              RowBox[{"EdgeList", "[", 
               RowBox[{"lat", "[", "\"\<Graph\>\"", "]"}], "]"}]}]}]}], 
           "]"}]}]}], ")"}]}], ";", 
      RowBox[{"refresh", "[", "]"}], ";", 
      RowBox[{"Graphics", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"GrayLevel", "[", ".85", "]"}], ",", "Thin", ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"lineOf", "[", 
                RowBox[{"#1", ",", "layout"}], "]"}], "&"}], ")"}], "/@", 
             RowBox[{"EdgeList", "[", 
              RowBox[{"lat", "[", "\"\<Graph\>\"", "]"}], "]"}]}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Darker", "[", "Blue", "]"}], ",", 
            RowBox[{"AbsoluteThickness", "[", "2.5", "]"}], ",", 
            RowBox[{"Dynamic", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"lineOf", "[", 
                 RowBox[{"#1", ",", "layout"}], "]"}], "&"}], ")"}], "/@", 
              "healed"}], "]"}]}], "}"}], ",", 
          RowBox[{"Dynamic", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"With", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"v", "=", 
                  RowBox[{
                   RowBox[{"lat", "[", "\"\<Coordinates\>\"", "]"}], 
                   "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}]}], 
                 ",", 
                 RowBox[{"p", "=", 
                  RowBox[{"layout", "[", "v", "]"}]}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"EdgeForm", "[", 
                  RowBox[{"GrayLevel", "[", ".3", "]"}], "]"}], ",", 
                 RowBox[{"FaceForm", "[", 
                  RowBox[{"Which", "[", 
                   RowBox[{
                    RowBox[{"MemberQ", "[", 
                    RowBox[{"badN", ",", "v"}], "]"}], ",", 
                    RowBox[{"GrayLevel", "[", ".25", "]"}], ",", 
                    RowBox[{"v", "===", "root"}], ",", "Orange", ",", "True", 
                    ",", "LightGray"}], "]"}], "]"}], ",", 
                 RowBox[{"EventHandler", "[", 
                  RowBox[{
                   RowBox[{"Disk", "[", 
                    RowBox[{"p", ",", ".18"}], "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\<MouseClicked\>\"", "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"CurrentValue", "[", "\"\<ControlKey\>\"", "]"}], 
                    ",", 
                    RowBox[{"badN", "=", 
                    RowBox[{"symDiff", "[", 
                    RowBox[{"badN", ",", 
                    RowBox[{"{", "v", "}"}]}], "]"}]}], ",", 
                    RowBox[{"root", "=", "v"}]}], "]"}], ";", 
                    RowBox[{"refresh", "[", "]"}]}], ")"}]}], ",", 
                    RowBox[{"\"\<MouseDown\>\"", "\[RuleDelayed]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"CurrentValue", "[", "\"\<ShiftKey\>\"", "]"}], 
                    ",", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"mp", "=", 
                    RowBox[{"MousePosition", "[", "\"\<Graphics\>\"", "]"}]}],
                     ",", "e"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"e", "=", 
                    RowBox[{"First", "[", 
                    RowBox[{"Nearest", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Values", "[", "edgeMid", "]"}], "\[Rule]", 
                    RowBox[{"Keys", "[", "edgeMid", "]"}]}], ",", "mp"}], 
                    "]"}], "]"}]}], ";", 
                    RowBox[{"badL", "=", 
                    RowBox[{"symDiff", "[", 
                    RowBox[{"badL", ",", 
                    RowBox[{"{", 
                    RowBox[{"Sort", "[", 
                    RowBox[{"List", "@@", "e"}], "]"}], "}"}]}], "]"}]}], ";", 
                    RowBox[{"refresh", "[", "]"}]}]}], "]"}]}], "]"}]}]}], 
                    "}"}]}], "]"}]}], "}"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", 
               RowBox[{"Length", "[", 
                RowBox[{"lat", "[", "\"\<Coordinates\>\"", "]"}], "]"}]}], 
              "}"}]}], "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"Red", ",", "Dashed", ",", 
            RowBox[{"AbsoluteThickness", "[", "2", "]"}], ",", 
            RowBox[{"Dynamic", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"lineOf", "[", 
                 RowBox[{
                  RowBox[{"UndirectedEdge", "@@", "#1"}], ",", "layout"}], 
                 "]"}], "&"}], ")"}], "/@", "badL"}], "]"}]}], "}"}]}], "}"}],
         ",", 
        RowBox[{"ImageSize", "\[Rule]", "700"}], ",", 
        RowBox[{"PlotLabel", "\[Rule]", 
         RowBox[{"Style", "[", 
          RowBox[{
          "\"\<D\[AE]d\[AE]lus N\.b2N Lattice \[LongDash] Self\:2011Healing \
Demo\\n      Left\:2011click: root  |  Ctrl\:2011click: toggle node  |  Shift\
\:2011click: toggle link\>\"", ",", "14", ",", "Bold"}], "]"}]}]}], "]"}]}]}],
     "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"ClearAll", "[", "GenerateMeshNetwork", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GenerateMeshNetwork", "[", 
     RowBox[{
      RowBox[{"n_Integer", "?", "Positive"}], ",", 
      RowBox[{"d_Integer", "?", "Positive"}]}], "]"}], "/;", 
    RowBox[{
     RowBox[{"2", "\[LessEqual]", "d", "<", "n"}], "&&", 
     RowBox[{"EvenQ", "[", "d", "]"}]}]}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"edges", "=", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"h", "=", 
        FractionBox["d", "2"]}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"Do", "[", 
         RowBox[{
          RowBox[{"AppendTo", "[", 
           RowBox[{"edges", ",", 
            RowBox[{"i", "\[UndirectedEdge]", 
             RowBox[{
              RowBox[{"Mod", "[", 
               RowBox[{
                RowBox[{"i", "+", "k", "-", "1"}], ",", "n"}], "]"}], "+", 
              "1"}]}]}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"k", ",", "h"}], "}"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "n"}], "}"}]}], "]"}], ";", 
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"Range", "[", "n", "]"}], ",", "edges", ",", 
        RowBox[{"VertexSize", "\[Rule]", "Small"}]}], "]"}]}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"ClearAll", "[", "SpanningTreeCount", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"SpanningTreeCount", "[", "g_Graph", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"L", "=", 
       RowBox[{"KirchhoffMatrix", "[", "g", "]"}]}], "}"}], ",", 
     RowBox[{"Abs", "[", 
      RowBox[{"Det", "[", 
       RowBox[{"Drop", "[", 
        RowBox[{"L", ",", 
         RowBox[{"{", "1", "}"}], ",", 
         RowBox[{"{", "1", "}"}]}], "]"}], "]"}], "]"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"ClearAll", "[", "CompareClosVsMesh", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"CompareClosVsMesh", "[", 
    RowBox[{
     RowBox[{"serversPerRack_", ":", "8"}], ",", 
     RowBox[{"numRacks_", ":", "8"}], ",", 
     RowBox[{"numSpines_", ":", "4"}], ",", 
     RowBox[{"degree_", ":", "8"}], ",", 
     RowBox[{"failures_", ":", "20"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "servers", ",", "tors", ",", "spines", ",", "closEdges", ",", "clos", 
       ",", "totalNodes", ",", "mesh", ",", "latencyClos", ",", "latencyMesh",
        ",", "spanningTreesClos", ",", "spanningTreesMesh", ",", 
       "closConnData", ",", "meshConnData", ",", "closCompData", ",", 
       "meshCompData", ",", "closPlot", ",", "meshPlot", ",", "latencyPlot", 
       ",", "treeCountPlot", ",", "algebraicConnectivityPlot", ",", 
       "largestComponentPlot"}], "}"}], ",", 
     RowBox[{
      RowBox[{"servers", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"\"\<S\>\"", "<>", 
           RowBox[{"ToString", "[", "r", "]"}], "<>", "\"\<-\>\"", "<>", 
           RowBox[{"ToString", "[", "s", "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"r", ",", "numRacks"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"s", ",", "serversPerRack"}], "}"}]}], "]"}], "]"}]}], ";", 
      RowBox[{"tors", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"\"\<T\>\"", "<>", 
           RowBox[{"ToString", "[", "#1", "]"}]}], "&"}], ")"}], "/@", 
        RowBox[{"Range", "[", "numRacks", "]"}]}]}], ";", 
      RowBox[{"spines", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"\"\<P\>\"", "<>", 
           RowBox[{"ToString", "[", "#1", "]"}]}], "&"}], ")"}], "/@", 
        RowBox[{"Range", "[", "numSpines", "]"}]}]}], ";", 
      RowBox[{"closEdges", "=", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
             "tors", "\[LeftDoubleBracket]", "r", "\[RightDoubleBracket]"}], 
             "\[UndirectedEdge]", 
             RowBox[{"servers", "\[LeftDoubleBracket]", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"r", "-", "1"}], ")"}], " ", "serversPerRack"}], "+",
                "s"}], "\[RightDoubleBracket]"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"r", ",", "numRacks"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"s", ",", "serversPerRack"}], "}"}]}], "]"}], "]"}], ",", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
             "tors", "\[LeftDoubleBracket]", "r", "\[RightDoubleBracket]"}], 
             "\[UndirectedEdge]", 
             RowBox[{
             "spines", "\[LeftDoubleBracket]", "p", 
              "\[RightDoubleBracket]"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"r", ",", "numRacks"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"p", ",", "numSpines"}], "}"}]}], "]"}], "]"}]}], 
        "]"}]}], ";", 
      RowBox[{"clos", "=", 
       RowBox[{"Graph", "[", 
        RowBox[{
         RowBox[{"Join", "[", 
          RowBox[{"servers", ",", "tors", ",", "spines"}], "]"}], ",", 
         "closEdges", ",", 
         RowBox[{"GraphLayout", "\[Rule]", "\"\<LayeredEmbedding\>\""}], ",", 
         
         RowBox[{"VertexSize", "\[Rule]", "Small"}]}], "]"}]}], ";", 
      RowBox[{"totalNodes", "=", 
       RowBox[{"serversPerRack", " ", "numRacks"}]}], ";", 
      RowBox[{"mesh", "=", 
       RowBox[{"GenerateMeshNetwork", "[", 
        RowBox[{"totalNodes", ",", "degree"}], "]"}]}], ";", 
      RowBox[{"latencyClos", "=", 
       RowBox[{"GraphDistance", "[", 
        RowBox[{"clos", ",", 
         RowBox[{"First", "[", "servers", "]"}], ",", 
         RowBox[{"Last", "[", "servers", "]"}]}], "]"}]}], ";", 
      RowBox[{"latencyMesh", "=", 
       RowBox[{"GraphDistance", "[", 
        RowBox[{"mesh", ",", "1", ",", "totalNodes"}], "]"}]}], ";", 
      RowBox[{"spanningTreesClos", "=", 
       RowBox[{"SpanningTreeCount", "[", "clos", "]"}]}], ";", 
      RowBox[{"spanningTreesMesh", "=", 
       RowBox[{"SpanningTreeCount", "[", "mesh", "]"}]}], ";", 
      RowBox[{"closConnData", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"MyAlgebraicConnectivity", "[", 
          RowBox[{"EdgeDelete", "[", 
           RowBox[{"clos", ",", 
            RowBox[{"RandomSample", "[", 
             RowBox[{
              RowBox[{"EdgeList", "[", "clos", "]"}], ",", 
              RowBox[{"Min", "[", 
               RowBox[{"k", ",", 
                RowBox[{"EdgeCount", "[", "clos", "]"}]}], "]"}]}], "]"}]}], 
           "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", "0", ",", "failures"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"meshConnData", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"MyAlgebraicConnectivity", "[", 
          RowBox[{"EdgeDelete", "[", 
           RowBox[{"mesh", ",", 
            RowBox[{"RandomSample", "[", 
             RowBox[{
              RowBox[{"EdgeList", "[", "mesh", "]"}], ",", 
              RowBox[{"Min", "[", 
               RowBox[{"k", ",", 
                RowBox[{"EdgeCount", "[", "mesh", "]"}]}], "]"}]}], "]"}]}], 
           "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", "0", ",", "failures"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"closCompData", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Max", "[", 
          RowBox[{"Length", "/@", 
           RowBox[{"ConnectedComponents", "[", 
            RowBox[{"EdgeDelete", "[", 
             RowBox[{"clos", ",", 
              RowBox[{"RandomSample", "[", 
               RowBox[{
                RowBox[{"EdgeList", "[", "clos", "]"}], ",", 
                RowBox[{"Min", "[", 
                 RowBox[{"k", ",", 
                  RowBox[{"EdgeCount", "[", "clos", "]"}]}], "]"}]}], "]"}]}],
              "]"}], "]"}]}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", "0", ",", "failures"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"meshCompData", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Max", "[", 
          RowBox[{"Length", "/@", 
           RowBox[{"ConnectedComponents", "[", 
            RowBox[{"EdgeDelete", "[", 
             RowBox[{"mesh", ",", 
              RowBox[{"RandomSample", "[", 
               RowBox[{
                RowBox[{"EdgeList", "[", "mesh", "]"}], ",", 
                RowBox[{"Min", "[", 
                 RowBox[{"k", ",", 
                  RowBox[{"EdgeCount", "[", "mesh", "]"}]}], "]"}]}], "]"}]}],
              "]"}], "]"}]}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", "0", ",", "failures"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"closPlot", "=", 
       RowBox[{"Show", "[", 
        RowBox[{"clos", ",", 
         RowBox[{"ImageSize", "\[Rule]", "300"}], ",", 
         RowBox[{"PlotLabel", "\[Rule]", 
          RowBox[{"Style", "[", 
           RowBox[{"\"\<Clos Fabric\>\"", ",", "12", ",", "Bold"}], "]"}]}]}],
         "]"}]}], ";", 
      RowBox[{"meshPlot", "=", 
       RowBox[{"Show", "[", 
        RowBox[{"mesh", ",", 
         RowBox[{"ImageSize", "\[Rule]", "300"}], ",", 
         RowBox[{"PlotLabel", "\[Rule]", 
          RowBox[{"Style", "[", 
           RowBox[{
           "\"\<D\[AE]d\[AE]lus N\.b2N Mesh\>\"", ",", "12", ",", "Bold"}], 
           "]"}]}]}], "]"}]}], ";", 
      RowBox[{"latencyPlot", "=", 
       RowBox[{"BarChart", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"latencyClos", ",", "latencyMesh"}], "}"}], ",", 
         RowBox[{"ChartLabels", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<Clos\>\"", ",", "\"\<Mesh\>\""}], "}"}]}], ",", 
         RowBox[{
         "PlotLabel", "\[Rule]", 
          "\"\<Shortest\:2011Path Latency (hops)\>\""}], ",", 
         RowBox[{"LabelingFunction", "\[Rule]", "Above"}]}], "]"}]}], ";", 
      RowBox[{"treeCountPlot", "=", 
       RowBox[{"BarChart", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"N", "[", "Log10", "]"}], "/@", 
          RowBox[{"{", 
           RowBox[{"spanningTreesClos", ",", "spanningTreesMesh"}], "}"}]}], 
         ",", 
         RowBox[{"ChartLabels", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<Clos\>\"", ",", "\"\<Mesh\>\""}], "}"}]}], ",", 
         RowBox[{
         "PlotLabel", "\[Rule]", 
          "\"\<Resilience: log\:2081\:2080(# Spanning Trees)\>\""}], ",", 
         RowBox[{"LabelingFunction", "\[Rule]", "Above"}]}], "]"}]}], ";", 
      RowBox[{"algebraicConnectivityPlot", "=", 
       RowBox[{"ListLinePlot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"closConnData", ",", "meshConnData"}], "}"}], ",", 
         RowBox[{"PlotLegends", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<Clos\>\"", ",", "\"\<Mesh\>\""}], "}"}]}], ",", 
         RowBox[{"AxesLabel", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
           "\"\<Links Removed\>\"", ",", 
            "\"\<\\!\\(\\*SubscriptBox[\\(\[Lambda]\\), \\(2\\)]\\)\>\""}], 
           "}"}]}], ",", 
         RowBox[{
         "PlotLabel", "\[Rule]", 
          "\"\<Algebraic Connectivity under Failures\>\""}], ",", 
         RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "300"}]}], "]"}]}], ";", 
      RowBox[{"largestComponentPlot", "=", 
       RowBox[{"ListLinePlot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"closCompData", ",", "meshCompData"}], "}"}], ",", 
         RowBox[{"PlotLegends", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<Clos\>\"", ",", "\"\<Mesh\>\""}], "}"}]}], ",", 
         RowBox[{"AxesLabel", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
           "\"\<Links Removed\>\"", ",", 
            "\"\<Nodes in Largest Component\>\""}], "}"}]}], ",", 
         RowBox[{
         "PlotLabel", "\[Rule]", "\"\<Network Integrity under Failures\>\""}],
          ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"All", ",", 
            RowBox[{"{", 
             RowBox[{"0", ",", "totalNodes"}], "}"}]}], "}"}]}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "300"}]}], "]"}]}], ";", 
      RowBox[{"Grid", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Style", "[", 
             RowBox[{
             "\"\<Clos vs D\[AE]d\[AE]lus Mesh \[LongDash] Topology \
Study\>\"", ",", "16", ",", "Bold"}], "]"}], ",", "\[SpanFromLeft]"}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"closPlot", ",", "meshPlot"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"latencyPlot", ",", "treeCountPlot"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"algebraicConnectivityPlot", ",", "largestComponentPlot"}],
            "}"}]}], "}"}], ",", 
        RowBox[{"Frame", "\[Rule]", "All"}], ",", 
        RowBox[{"Spacings", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"2", ",", "2"}], "}"}]}], ",", 
        RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}]}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"End", "[", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"EndPackage", "[", "]"}], ";"}], "\n", 
 RowBox[{"CompareClosVsMesh", "[", "]"}]}], "Code",
 CellChangeTimes->{{3.962799378874076*^9, 3.962799387304851*^9}, 
   3.962876242864995*^9},
 CellLabel->
  "In[2760]:=",ExpressionUUID->"c60fc1dd-1b81-46c5-b5bf-2677ab206c68"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     StyleBox["\<\"Clos vs D\[AE]d\[AE]lus Mesh \[LongDash] Topology \
Study\"\>",
      StripOnInput->False,
      FontSize->16,
      FontWeight->Bold], "DaedalusMeshGraphics`Private`\[SpanFromLeft]"},
    {
     GraphicsBox[GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGDwAWIQjQ6M9i9oE5ywzh6Vvw/OT+v/ocL75hia/Dk4v6Fc
5QuX1GU09dfgfJ/lZ0L5992C84ub+3h4mJ+iqX8G50fOTrLlu/oCTf8rON9+
s1mewPI3aO55B+dPTm3177T5AOf3ZO+6zWn4Ec5vK3yf3qX6Cc39n+H8ytrI
hm6+L2ju/Qrn53QentHz/Sua+7/B+fFTdTf2PviO5p8fcH7wwukn+07+RPPf
LzjfbS3jo/5Nv9H8+wfOt9yZ/WvC7L9o/v8H5+scvSo0qeU/WngwOMD4E17M
n3pyG4IPCR9GOL/z3RVFr9UIPiS8mOD85i+c607NR/Ah4ccM59f8srPynoLg
Q8KTBc4vYyg5droDwYeELyucn8+2MsinFsGHhDeCn8lz796ZQjY4HxL+CH6y
kHC2bxo7nA+JDwQ/RsLj+9koDjgfEj8IfphcbbOfPyecD4kvBN9fZRP/eWcu
OB8Sfwi+p9bz2f4W3HA+JD4RfGcDGY0LOjxwPiR+EXwbs8AtAYq8cD4kvhF8
M5s2h4uifHA+JP4RfH2n3WcCufjhfEh6QPBh+RWW7yHuew3nQ8L/K5wPcc9f
OJ9l85+uVUlMDjD+61MXdq8xYYPzLz5a8mYdGxecv/1XhezGG7xw/pUj/2x/
yjI4wMoZCH0PLb8+RMufj+F8AHR2KT4=
       "], {
        {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[0.], 
         ArrowBox[{{1, 65}, {2, 65}, {3, 65}, {4, 65}, {5, 65}, {6, 65}, {7, 
          65}, {8, 65}, {9, 66}, {10, 66}, {11, 66}, {12, 66}, {13, 66}, {14, 
          66}, {15, 66}, {16, 66}, {17, 67}, {18, 67}, {19, 67}, {20, 67}, {
          21, 67}, {22, 67}, {23, 67}, {24, 67}, {25, 68}, {26, 68}, {27, 
          68}, {28, 68}, {29, 68}, {30, 68}, {31, 68}, {32, 68}, {33, 69}, {
          34, 69}, {35, 69}, {36, 69}, {37, 69}, {38, 69}, {39, 69}, {40, 
          69}, {41, 70}, {42, 70}, {43, 70}, {44, 70}, {45, 70}, {46, 70}, {
          47, 70}, {48, 70}, {49, 71}, {50, 71}, {51, 71}, {52, 71}, {53, 
          71}, {54, 71}, {55, 71}, {56, 71}, {57, 72}, {58, 72}, {59, 72}, {
          60, 72}, {61, 72}, {62, 72}, {63, 72}, {64, 72}, {65, 73}, {65, 
          74}, {65, 75}, {65, 76}, {66, 73}, {66, 74}, {66, 75}, {66, 76}, {
          67, 73}, {67, 74}, {67, 75}, {67, 76}, {68, 73}, {68, 74}, {68, 
          75}, {68, 76}, {69, 73}, {69, 74}, {69, 75}, {69, 76}, {70, 73}, {
          70, 74}, {70, 75}, {70, 76}, {71, 73}, {71, 74}, {71, 75}, {71, 
          76}, {72, 73}, {72, 74}, {72, 75}, {72, 76}}, 
          0.002984645256236629]}, 
        {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
         DiskBox[1, 0.002984645256236629], DiskBox[2, 0.002984645256236629], 
         DiskBox[3, 0.002984645256236629], DiskBox[4, 0.002984645256236629], 
         DiskBox[5, 0.002984645256236629], DiskBox[6, 0.002984645256236629], 
         DiskBox[7, 0.002984645256236629], DiskBox[8, 0.002984645256236629], 
         DiskBox[9, 0.002984645256236629], DiskBox[10, 0.002984645256236629], 
         DiskBox[11, 0.002984645256236629], DiskBox[12, 0.002984645256236629],
          DiskBox[13, 0.002984645256236629], 
         DiskBox[14, 0.002984645256236629], DiskBox[15, 0.002984645256236629],
          DiskBox[16, 0.002984645256236629], 
         DiskBox[17, 0.002984645256236629], DiskBox[18, 0.002984645256236629],
          DiskBox[19, 0.002984645256236629], 
         DiskBox[20, 0.002984645256236629], DiskBox[21, 0.002984645256236629],
          DiskBox[22, 0.002984645256236629], 
         DiskBox[23, 0.002984645256236629], DiskBox[24, 0.002984645256236629],
          DiskBox[25, 0.002984645256236629], 
         DiskBox[26, 0.002984645256236629], DiskBox[27, 0.002984645256236629],
          DiskBox[28, 0.002984645256236629], 
         DiskBox[29, 0.002984645256236629], DiskBox[30, 0.002984645256236629],
          DiskBox[31, 0.002984645256236629], 
         DiskBox[32, 0.002984645256236629], DiskBox[33, 0.002984645256236629],
          DiskBox[34, 0.002984645256236629], 
         DiskBox[35, 0.002984645256236629], DiskBox[36, 0.002984645256236629],
          DiskBox[37, 0.002984645256236629], 
         DiskBox[38, 0.002984645256236629], DiskBox[39, 0.002984645256236629],
          DiskBox[40, 0.002984645256236629], 
         DiskBox[41, 0.002984645256236629], DiskBox[42, 0.002984645256236629],
          DiskBox[43, 0.002984645256236629], 
         DiskBox[44, 0.002984645256236629], DiskBox[45, 0.002984645256236629],
          DiskBox[46, 0.002984645256236629], 
         DiskBox[47, 0.002984645256236629], DiskBox[48, 0.002984645256236629],
          DiskBox[49, 0.002984645256236629], 
         DiskBox[50, 0.002984645256236629], DiskBox[51, 0.002984645256236629],
          DiskBox[52, 0.002984645256236629], 
         DiskBox[53, 0.002984645256236629], DiskBox[54, 0.002984645256236629],
          DiskBox[55, 0.002984645256236629], 
         DiskBox[56, 0.002984645256236629], DiskBox[57, 0.002984645256236629],
          DiskBox[58, 0.002984645256236629], 
         DiskBox[59, 0.002984645256236629], DiskBox[60, 0.002984645256236629],
          DiskBox[61, 0.002984645256236629], 
         DiskBox[62, 0.002984645256236629], DiskBox[63, 0.002984645256236629],
          DiskBox[64, 0.002984645256236629], 
         DiskBox[65, 0.002984645256236629], DiskBox[66, 0.002984645256236629],
          DiskBox[67, 0.002984645256236629], 
         DiskBox[68, 0.002984645256236629], DiskBox[69, 0.002984645256236629],
          DiskBox[70, 0.002984645256236629], 
         DiskBox[71, 0.002984645256236629], DiskBox[72, 0.002984645256236629],
          DiskBox[73, 0.002984645256236629], 
         DiskBox[74, 0.002984645256236629], DiskBox[75, 0.002984645256236629],
          DiskBox[76, 0.002984645256236629]}}],
      FormatType->TraditionalForm,
      FrameTicks->None,
      ImageSize->300,
      PlotLabel->FormBox[
        StyleBox["\"Clos Fabric\"", 12, Bold, StripOnInput -> False], 
        TraditionalForm]], 
     GraphicsBox[GraphicsComplexBox[CompressedData["
1:eJxFkH1Q03Ucxzc2wMF4Zht7+CmKME+QeNZ08P0wDZlIeCRGuAuEpSLxGBKI
wCrUlQTjCI6HmDh5OoJA0QZHDeRyPAwJaTATgpHKw8wFbAeIwoX90/vufe97
/fl+7YxNDv/ECIfDwVbf7kd/2LXKrmHgG3CW9iDeFpbD5vvqfsegbNmVErVq
DZG7rEIWtBiIdmReoJCswCypS/XsBQa/XnhZ47SHDE3fmDklKzGIEk0EMP1I
UON0qLguD4NXS/zhD/gm4Mkhtn9GxoBoGRlmISaAtn9guiSbBZe1f+K/0uKA
kzh/VKJmwmGs95cWyRtUMCBz120ywPFJiedU/yrCOX75hcCcAZLaUmJ1oB71
F9clX9p0AFFfOT8vQIdGx64e8ZikgdvC6dSJ+7NoMTxq/ZaECpzChPWRdzUo
zadVLTpBAeHMdd/HzWNovP7Ua5HeDjxsyRxqxQCSPRtBA1/bQsxvny4NiWXo
8rHi7u9oNiDkl8uPm5eh1BRmUPV7Vlu6Cha5PDqKcDm+mCkgv9X3X/gZ6Rp5
CgkguHLd2ucmCnbn1RtKTSAmNRHxl7qQcMU8WqwggDg0wsl41xCK5akDBdvx
cP70nQ+zmWo0FS6sHCVuIDd5zHhEuwal7xP1JLDXUG1wd1Ph2TnEaYn2ulKq
Ryd9opr7FnVojd9xo31Ch4AxmKZo0CPHSxVX7IPnkP20XDPpvIZ2o3N1+AYN
et5Y96KAtYH646KkcyfHkaRR0ZbjjAdcZwiB1zyIdMZ3n7tMEMBxwr/+HL4T
SXceog83mQBuenbzr8AKdP+wYIheRAKcmGwaQOeivMwGH9rF/3/bePcSWKe2
vDSrZgScGqSNyPl82ckGerxd9qac6UK39mbFl4ptwcP/nrdrrxIdNNlYOLZq
Bz2KqdfWJDU6arHjZgKPAgbTDmKJVIO2HbFJWiijQozAg50WN4euS8lP3IZo
oOrMLXNe1aGaJK5+RecAhh/cUqvv6tF2Z8G3pSt0cDfs1uZy1lDgfl5z+iwD
SF16jtJzA7U9zq9ly5jQ2ys0zvPDQ3dQrqMwjgX+Zk8r6/8hAHHNP3DPEguC
m6rY5b0mEKKsl7yJxqAywfWVsoEE5ZN+zvsbMaBWe2VEFJHhonxZqJBj8PKB
ynI+zQp+LhosfH+Lq9xGuKteNvA0KHu5qwqDnvQDVXk1tsC1nJG6hmEQe2B7
p97UHqhmt8+nT7HAi5NxzYFPAaMWsoVvKAvy7e/MM5qo0PETIzOnkQlNBrbD
9zM0eJgV0yMcZcDg4hlxpAkdNLd5N9QzdPh7nlQusWJAgFSXajTmAIp3Wmnh
Rkw4EapiP7xHg/wfZQGqcSYYtpXYh2VRgfCobYl0lQXaYY9I9j4KfKyEg4lU
DMziQ7nokR38CxaHu3w=
       "], {
        {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[0.], 
         ArrowBox[CompressedData["
1:eJwVxcWB1AAAAMCLu7t7duPuWgMl0AD9/4D5TPD7z6/f4M8/wM/P/wEQgAAY
QIALuIEHeEEIhEEERMEbfMAXgiEEQiEMeqAXRmAUxmAcfhEUwRAcIVAMxVEC
JTEcIzASo3ACJ3EKpwmSoAiaYEiKpEmGZCmaYiiW4miGZmmO5hmW4RieEViO
5VmBFTmeEziRk3iBF3mJlwVRkARZUERJlEVFVCVZUiRV0mRFVmVN1hVV0RRd
MVRN1VVDNTVdMzRTs3RDN3VLtw3TsAzbcEzLtE3HdC3bcizX8mzHdm3P9h3X
8RzfCVzP9d3ADT3fC7zQi/zAD/3Ij4MwiII4SMIojMMkTKM4SqI0+sRJnMaf
+JukySf5Jln6Sb9pluaf7yf75J/im33zb/EtszwrsjKr8iIv8yqvi7Koirpo
yqqsy6Zsq7pqqrbq6qZu667um7bpmr4Z2q7t26Edu74burGb+qEf+6mfh3GY
hnlYxmmcx2Vcp3lapnXa5mVe523el3XZln051m3d12M9t307tnO79mM/92u/
j/O4jvt4zuu8z+d8r/t6rvd+7vd5/wJ8o0Ks
          "], 0.01799061405185728]}, 
        {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
         DiskBox[1, 0.01799061405185728], DiskBox[2, 0.01799061405185728], 
         DiskBox[3, 0.01799061405185728], DiskBox[4, 0.01799061405185728], 
         DiskBox[5, 0.01799061405185728], DiskBox[6, 0.01799061405185728], 
         DiskBox[7, 0.01799061405185728], DiskBox[8, 0.01799061405185728], 
         DiskBox[9, 0.01799061405185728], DiskBox[10, 0.01799061405185728], 
         DiskBox[11, 0.01799061405185728], DiskBox[12, 0.01799061405185728], 
         DiskBox[13, 0.01799061405185728], DiskBox[14, 0.01799061405185728], 
         DiskBox[15, 0.01799061405185728], DiskBox[16, 0.01799061405185728], 
         DiskBox[17, 0.01799061405185728], DiskBox[18, 0.01799061405185728], 
         DiskBox[19, 0.01799061405185728], DiskBox[20, 0.01799061405185728], 
         DiskBox[21, 0.01799061405185728], DiskBox[22, 0.01799061405185728], 
         DiskBox[23, 0.01799061405185728], DiskBox[24, 0.01799061405185728], 
         DiskBox[25, 0.01799061405185728], DiskBox[26, 0.01799061405185728], 
         DiskBox[27, 0.01799061405185728], DiskBox[28, 0.01799061405185728], 
         DiskBox[29, 0.01799061405185728], DiskBox[30, 0.01799061405185728], 
         DiskBox[31, 0.01799061405185728], DiskBox[32, 0.01799061405185728], 
         DiskBox[33, 0.01799061405185728], DiskBox[34, 0.01799061405185728], 
         DiskBox[35, 0.01799061405185728], DiskBox[36, 0.01799061405185728], 
         DiskBox[37, 0.01799061405185728], DiskBox[38, 0.01799061405185728], 
         DiskBox[39, 0.01799061405185728], DiskBox[40, 0.01799061405185728], 
         DiskBox[41, 0.01799061405185728], DiskBox[42, 0.01799061405185728], 
         DiskBox[43, 0.01799061405185728], DiskBox[44, 0.01799061405185728], 
         DiskBox[45, 0.01799061405185728], DiskBox[46, 0.01799061405185728], 
         DiskBox[47, 0.01799061405185728], DiskBox[48, 0.01799061405185728], 
         DiskBox[49, 0.01799061405185728], DiskBox[50, 0.01799061405185728], 
         DiskBox[51, 0.01799061405185728], DiskBox[52, 0.01799061405185728], 
         DiskBox[53, 0.01799061405185728], DiskBox[54, 0.01799061405185728], 
         DiskBox[55, 0.01799061405185728], DiskBox[56, 0.01799061405185728], 
         DiskBox[57, 0.01799061405185728], DiskBox[58, 0.01799061405185728], 
         DiskBox[59, 0.01799061405185728], DiskBox[60, 0.01799061405185728], 
         DiskBox[61, 0.01799061405185728], DiskBox[62, 0.01799061405185728], 
         DiskBox[63, 0.01799061405185728], DiskBox[64, 0.01799061405185728]}}],
      FormatType->TraditionalForm,
      FrameTicks->None,
      ImageSize->300,
      PlotLabel->FormBox[
        StyleBox[
        "\"D\[AE]d\[AE]lus N\.b2N Mesh\"", 12, Bold, StripOnInput -> False], 
        TraditionalForm]]},
    {
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-0.8428550619082302, 0.}, {3.8048069919883467`, 
         0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6859999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6859999999999999], Thickness[Small]}], 
          RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867, 4.},
           RoundingRadius->0]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6859999999999999], Thickness[Small]}], 
          RectangleBox[{1.5487982520029133, 0.}, {2.4512017479970867, 1.},
           RoundingRadius->0]}}, {}, {}}, {}, {
        InsetBox["4", Offset[{0, 4}, {1., 4.}], ImageScaled[{0.5, 0}]], 
        InsetBox["1", Offset[{0, 4}, {2., 1.}], 
         ImageScaled[{0.5, 0}]]}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{-0.8428550619082302, 0.}, {3.870688128186453, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{2.4512017479970867`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {2.4512017479970867`, 
                0.}]}], {{}, {}, {
               LineBox[{{1.4512017479970867`, 0.}, 
                 Offset[{-7.347880794884119*^-16, -4.}, {1.4512017479970867`, 
                  0.}]}], 
               LineBox[{{1.5487982520029133`, 0.}, 
                 Offset[{-7.347880794884119*^-16, -4.}, {1.5487982520029133`, 
                  0.}]}]}, {}}}, 
            StyleBox[
             {Thickness[Tiny], 
              InsetBox["\<\"Clos\"\>", Offset[{0, -2}, {1., 0.}], NCache[
               ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]], 
               Automatic, {1, 0}], 
              InsetBox["\<\"Mesh\"\>", Offset[{0, -2}, {2., 0.}], NCache[
               ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]], 
               Automatic, {1, 0}]}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{-0.8428550619082302, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotLabel->FormBox[
       "\"Shortest\:2011Path Latency (hops)\"", TraditionalForm],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-0.8428550619082302, 0.}, {3.8048069919883467`, 
         0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6859999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6859999999999999], Thickness[Small]}], 
          RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867, 6.923689900271566},
           
           RoundingRadius->0]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6859999999999999], Thickness[Small]}], 
          RectangleBox[{1.5487982520029133, 0.}, {2.4512017479970867, 51.47845264242852},
           
           RoundingRadius->0]}}, {}, {}}, {}, {InsetBox[
         FractionBox[
          RowBox[{"log", "(", "8388608", ")"}], 
          RowBox[{"log", "(", "10", ")"}]], 
         Offset[{0, 4}, {1., 6.923689900271566}], ImageScaled[{0.5, 0}]], 
        InsetBox[
         FractionBox[
          RowBox[{
          "log", "(", "3009211012053996495271188165124622587336222638080000", 
           ")"}], 
          RowBox[{"log", "(", "10", ")"}]], 
         Offset[{0, 4}, {2., 51.47845264242852}], 
         ImageScaled[{0.5, 0}]]}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{-0.8428550619082302, 0.}, {3.870688128186453, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{2.4512017479970867`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {2.4512017479970867`, 
                0.}]}], {{}, {}, {
               LineBox[{{1.4512017479970867`, 0.}, 
                 Offset[{-7.347880794884119*^-16, -4.}, {1.4512017479970867`, 
                  0.}]}], 
               LineBox[{{1.5487982520029133`, 0.}, 
                 Offset[{-7.347880794884119*^-16, -4.}, {1.5487982520029133`, 
                  0.}]}]}, {}}}, 
            StyleBox[
             {Thickness[Tiny], 
              InsetBox["\<\"Clos\"\>", Offset[{0, -2}, {1., 0.}], NCache[
               ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]], 
               Automatic, {1, 0}], 
              InsetBox["\<\"Mesh\"\>", Offset[{0, -2}, {2., 0.}], NCache[
               ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]], 
               Automatic, {1, 0}]}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{-0.8428550619082302, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      PlotLabel->FormBox[
       "\"Resilience: log\:2081\:2080(# Spanning Trees)\"", TraditionalForm],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}]},
    {
     TemplateBox[{
       GraphicsBox[{{}, 
         InterpretationBox[{
           TagBox[{{{}, {}, 
              TagBox[{
                Hue[0.67, 0.6, 0.6], 
                Directive[
                 PointSize[
                  NCache[
                   Rational[7, 360], 0.019444444444444445`]], 
                 RGBColor[0.368417, 0.506779, 0.709798], 
                 AbsoluteThickness[2]], 
                LineBox[CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQEf7BlQgQMqlwONL4DGF0HjS6DxZdD4Cmh8JTS+
ChpfDY2vgcbXQuProPH10PgGaHxDNL4RGt8YjW+CxjeF8wFwDQq5
                 "]]}, Annotation[#, "Charting`Private`Tag#1"]& ], 
              TagBox[{
                Hue[0.9060679774997897, 0.6, 0.6], 
                Directive[
                 PointSize[
                  NCache[
                   Rational[7, 360], 0.019444444444444445`]], 
                 RGBColor[0.880722, 0.611041, 0.142051], 
                 AbsoluteThickness[2]], 
                LineBox[CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQEf7BlQgQMqlwONL4DGF0HjS6DxZdD4Cmh8JTS+
ChpfDY2vgcbXQuProPH10PgGaHxDNL4RGt8YjW+CxjeF8wFwDQq5
                 "]]}, Annotation[#, "Charting`Private`Tag#2"]& ]}}, {
            "WolframDynamicHighlight", <|
             "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
           StyleBox[
            DynamicBox[
             (Charting`HighlightActionBox["DynamicHighlight", {}, 
              Slot["HighlightElements"], 
              Slot["LayoutOptions"], 
              Slot["Meta"], 
              Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
                 Annotation[{
                   Hue[0.67, 0.6, 0.6], 
                   Directive[
                    PointSize[
                    Rational[7, 360]], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], 
                   Line[CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQEf7BlQgQMqlwONL4DGF0HjS6DxZdD4Cmh8JTS+
ChpfDY2vgcbXQuProPH10PgGaHxDNL4RGt8YjW+CxjeF8wFwDQq5
                    "]]}, "Charting`Private`Tag#1"], 
                 Annotation[{
                   Hue[0.9060679774997897, 0.6, 0.6], 
                   Directive[
                    PointSize[
                    Rational[7, 360]], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], 
                   Line[CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQEf7BlQgQMqlwONL4DGF0HjS6DxZdD4Cmh8JTS+
ChpfDY2vgcbXQuProPH10PgGaHxDNL4RGt8YjW+CxjeF8wFwDQq5
                    "]]}, "Charting`Private`Tag#2"]}}, <|
               "HighlightElements" -> <|
                 "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
                "LayoutOptions" -> <|
                 "PanelPlotLayout" -> <||>, 
                  "PlotRange" -> {{0.5833333333333348, 21.}, {-1, 1}}, 
                  "Frame" -> {{False, False}, {False, False}}, 
                  "AxesOrigin" -> {0.5833333333333348, 0}, 
                  "ImageSize" -> {300, 300/GoldenRatio}, 
                  "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
                  GoldenRatio^(-1), "DefaultStyle" -> {
                    Directive[
                    PointSize[
                    Rational[7, 360]], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], 
                    Directive[
                    PointSize[
                    Rational[7, 360]], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]]}, 
                  "HighlightLabelingFunctions" -> <|
                   "CoordinatesToolOptions" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), 
                    "ScalingFunctions" -> {{Identity, Identity}, {
                    Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
                  False|>, 
                "Meta" -> <|
                 "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
                  "Function" -> ListLinePlot, "GroupHighlight" -> 
                  False|>|>]]& )[<|
              "HighlightElements" -> <|
                "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
               "LayoutOptions" -> <|
                "PanelPlotLayout" -> <||>, 
                 "PlotRange" -> {{0.5833333333333348, 21.}, {-1, 1}}, 
                 "Frame" -> {{False, False}, {False, False}}, 
                 "AxesOrigin" -> {0.5833333333333348, 0}, 
                 "ImageSize" -> {300, 300/GoldenRatio}, 
                 "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
                 GoldenRatio^(-1), "DefaultStyle" -> {
                   Directive[
                    PointSize[
                    Rational[7, 360]], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], 
                   Directive[
                    PointSize[
                    Rational[7, 360]], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]]}, 
                 "HighlightLabelingFunctions" -> <|
                  "CoordinatesToolOptions" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), 
                   "ScalingFunctions" -> {{Identity, Identity}, {
                    Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
                 False|>, 
               "Meta" -> <|
                "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
                 "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>]], 
            Selectable -> False]}, 
          Annotation[{{{}, {}, 
             Annotation[{
               Hue[0.67, 0.6, 0.6], 
               Directive[
                PointSize[
                 Rational[7, 360]], 
                RGBColor[0.368417, 0.506779, 0.709798], 
                AbsoluteThickness[2]], 
               Line[CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQEf7BlQgQMqlwONL4DGF0HjS6DxZdD4Cmh8JTS+
ChpfDY2vgcbXQuProPH10PgGaHxDNL4RGt8YjW+CxjeF8wFwDQq5
                "]]}, "Charting`Private`Tag#1"], 
             Annotation[{
               Hue[0.9060679774997897, 0.6, 0.6], 
               Directive[
                PointSize[
                 Rational[7, 360]], 
                RGBColor[0.880722, 0.611041, 0.142051], 
                AbsoluteThickness[2]], 
               Line[CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQEf7BlQgQMqlwONL4DGF0HjS6DxZdD4Cmh8JTS+
ChpfDY2vgcbXQuProPH10PgGaHxDNL4RGt8YjW+CxjeF8wFwDQq5
                "]]}, "Charting`Private`Tag#2"]}}, <|
           "HighlightElements" -> <|
             "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
            "LayoutOptions" -> <|
             "PanelPlotLayout" -> <||>, 
              "PlotRange" -> {{0.5833333333333348, 21.}, {-1, 1}}, 
              "Frame" -> {{False, False}, {False, False}}, 
              "AxesOrigin" -> {0.5833333333333348, 0}, 
              "ImageSize" -> {300, 300/GoldenRatio}, "Axes" -> {True, True}, 
              "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
              "DefaultStyle" -> {
                Directive[
                 PointSize[
                  Rational[7, 360]], 
                 RGBColor[0.880722, 0.611041, 0.142051], 
                 AbsoluteThickness[2]], 
                Directive[
                 PointSize[
                  Rational[7, 360]], 
                 RGBColor[0.368417, 0.506779, 0.709798], 
                 AbsoluteThickness[2]]}, 
              "HighlightLabelingFunctions" -> <|
               "CoordinatesToolOptions" -> ({
                  Identity[
                   Part[#, 1]], 
                  Identity[
                   Part[#, 2]]}& ), 
                "ScalingFunctions" -> {{Identity, Identity}, {
                  Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
              False|>, 
            "Meta" -> <|
             "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
              "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>, 
           "DynamicHighlight"]], {{}, {}}}, {
        DisplayFunction -> Identity, DisplayFunction -> Identity, 
         DisplayFunction -> Identity, AspectRatio -> 
         NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
         AxesLabel -> {
           FormBox[
            TagBox["\"Links Removed\"", HoldForm], TraditionalForm], 
           FormBox[
            TagBox[
            "\"\\!\\(\\*SubscriptBox[\\(\[Lambda]\\), \\(2\\)]\\)\"", 
             HoldForm], TraditionalForm]}, 
         AxesOrigin -> {0.5833333333333348, 0}, DisplayFunction :> Identity, 
         Frame -> {{False, False}, {False, False}}, 
         FrameLabel -> {{None, None}, {None, None}}, 
         FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
         GridLines -> {None, None}, GridLinesStyle -> Directive[
           GrayLevel[0.5, 0.4]], ImageSize -> 300, 
         Method -> {
          "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
           "DefaultGraphicsInteraction" -> {
            "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
             "Effects" -> {
              "Highlight" -> {"ratio" -> 2}, 
               "HighlightPoint" -> {"ratio" -> 2}, 
               "Droplines" -> {
                "freeformCursorMode" -> True, 
                 "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
           "DefaultMeshStyle" -> AbsolutePointSize[6], 
           "DefaultPlotStyle" -> {
             Directive[
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.880722, 0.611041, 0.142051], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.560181, 0.691569, 0.194885], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.922526, 0.385626, 0.209179], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.528488, 0.470624, 0.701351], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.772079, 0.431554, 0.102387], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.363898, 0.618501, 0.782349], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[1, 0.75, 0], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.647624, 0.37816, 0.614037], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.571589, 0.586483, 0.], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.915, 0.3325, 0.2125], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[
              0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
              AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
           "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> True, 
           "IncludeHighlighting" -> "CurrentSet", "HighlightStyle" -> 
           Automatic, "OptimizePlotMarkers" -> True, 
           "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& ), "CopiedValueFunction" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& )}}, PlotLabel -> 
         FormBox["\"Algebraic Connectivity under Failures\"", 
           TraditionalForm], 
         PlotRange -> {{0.5833333333333348, 21.}, {-1, 1}}, PlotRangeClipping -> 
         True, PlotRangePadding -> {{
            Scaled[0.02], 
            Scaled[0.02]}, {
            Scaled[0.05], 
            Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
       FormBox[
        FormBox[
         TemplateBox[{"\"Clos\"", "\"Mesh\""}, "LineLegend", 
          DisplayFunction -> (FormBox[
            StyleBox[
             StyleBox[
              PaneBox[
               TagBox[
                GridBox[{{
                   TagBox[
                    GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #2}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
                "Grid"], Alignment -> Left, AppearanceElements -> None, 
               ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
               "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
             FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
             False], TraditionalForm]& ), 
          InterpretationFunction :> (RowBox[{"LineLegend", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["7", "360"], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                    RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["7", "360"], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                    RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}]}], 
                 "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{#, ",", #2}], "}"}], ",", 
               RowBox[{"LegendMarkers", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], 
               ",", 
               RowBox[{"Joined", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{"True", ",", "True"}], "}"}]}], ",", 
               RowBox[{"LabelStyle", "\[Rule]", 
                 RowBox[{"{", "}"}]}], ",", 
               RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
          Editable -> True], TraditionalForm], TraditionalForm]},
      "Legended",
      DisplayFunction->(GridBox[{{
          TagBox[
           ItemBox[
            PaneBox[
             TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline},
              BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
           "SkipImageSizeLevel"], 
          ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
        AutoDelete -> False, GridBoxItemSize -> Automatic, 
        BaselinePosition -> {1, 1}]& ),
      Editable->True,
      InterpretationFunction->(RowBox[{"Legended", "[", 
         RowBox[{#, ",", 
           RowBox[{"Placed", "[", 
             RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )], 
     TemplateBox[{
       GraphicsBox[{{}, 
         InterpretationBox[{
           TagBox[{{{}, {}, 
              TagBox[{
                Hue[0.67, 0.6, 0.6], 
                Directive[
                 PointSize[
                  NCache[
                   Rational[7, 360], 0.019444444444444445`]], 
                 RGBColor[0.368417, 0.506779, 0.709798], 
                 AbsoluteThickness[2]], 
                
                LineBox[{{17.5, 64.}, {18., 63.}, {19., 61.}, {20., 63.}, {
                 21., 61.}}]}, Annotation[#, "Charting`Private`Tag#1"]& ], 
              TagBox[{
                Hue[0.9060679774997897, 0.6, 0.6], 
                Directive[
                 PointSize[
                  NCache[
                   Rational[7, 360], 0.019444444444444445`]], 
                 RGBColor[0.880722, 0.611041, 0.142051], 
                 AbsoluteThickness[2]], 
                LineBox[CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQEf7CF0gANUwAGVz4HGF0Dji6DxJdD4Mmh8BTS+
EhpfBY2vhsbXQONrofF10Ph6aHwDNL4hGt8IjW+MxjdB45vC+QDk1haJ
                 "]]}, Annotation[#, "Charting`Private`Tag#2"]& ]}}, {
            "WolframDynamicHighlight", <|
             "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
           StyleBox[
            DynamicBox[
             (Charting`HighlightActionBox["DynamicHighlight", {}, 
              Slot["HighlightElements"], 
              Slot["LayoutOptions"], 
              Slot["Meta"], 
              Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
                 Annotation[{
                   Hue[0.67, 0.6, 0.6], 
                   Directive[
                    PointSize[
                    Rational[7, 360]], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], 
                   
                   Line[{{17.5, 64.}, {18., 63.}, {19., 61.}, {20., 63.}, {
                    21., 61.}}]}, "Charting`Private`Tag#1"], 
                 Annotation[{
                   Hue[0.9060679774997897, 0.6, 0.6], 
                   Directive[
                    PointSize[
                    Rational[7, 360]], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], 
                   Line[CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQEf7CF0gANUwAGVz4HGF0Dji6DxJdD4Mmh8BTS+
EhpfBY2vhsbXQONrofF10Ph6aHwDNL4hGt8IjW+MxjdB45vC+QDk1haJ
                    "]]}, "Charting`Private`Tag#2"]}}, <|
               "HighlightElements" -> <|
                 "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
                "LayoutOptions" -> <|
                 "PanelPlotLayout" -> <||>, 
                  "PlotRange" -> {{0.5833333333333348, 21.}, {0., 64.}}, 
                  "Frame" -> {{False, False}, {False, False}}, 
                  "AxesOrigin" -> {0.5833333333333348, 0}, 
                  "ImageSize" -> {300, 300/GoldenRatio}, 
                  "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
                  GoldenRatio^(-1), "DefaultStyle" -> {
                    Directive[
                    PointSize[
                    Rational[7, 360]], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], 
                    Directive[
                    PointSize[
                    Rational[7, 360]], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]]}, 
                  "HighlightLabelingFunctions" -> <|
                   "CoordinatesToolOptions" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), 
                    "ScalingFunctions" -> {{Identity, Identity}, {
                    Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
                  False|>, 
                "Meta" -> <|
                 "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
                  "Function" -> ListLinePlot, "GroupHighlight" -> 
                  False|>|>]]& )[<|
              "HighlightElements" -> <|
                "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
               "LayoutOptions" -> <|
                "PanelPlotLayout" -> <||>, 
                 "PlotRange" -> {{0.5833333333333348, 21.}, {0., 64.}}, 
                 "Frame" -> {{False, False}, {False, False}}, 
                 "AxesOrigin" -> {0.5833333333333348, 0}, 
                 "ImageSize" -> {300, 300/GoldenRatio}, 
                 "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
                 GoldenRatio^(-1), "DefaultStyle" -> {
                   Directive[
                    PointSize[
                    Rational[7, 360]], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], 
                   Directive[
                    PointSize[
                    Rational[7, 360]], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]]}, 
                 "HighlightLabelingFunctions" -> <|
                  "CoordinatesToolOptions" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), 
                   "ScalingFunctions" -> {{Identity, Identity}, {
                    Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
                 False|>, 
               "Meta" -> <|
                "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
                 "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>]], 
            Selectable -> False]}, 
          Annotation[{{{}, {}, 
             Annotation[{
               Hue[0.67, 0.6, 0.6], 
               Directive[
                PointSize[
                 Rational[7, 360]], 
                RGBColor[0.368417, 0.506779, 0.709798], 
                AbsoluteThickness[2]], 
               
               Line[{{17.5, 64.}, {18., 63.}, {19., 61.}, {20., 63.}, {21., 
                61.}}]}, "Charting`Private`Tag#1"], 
             Annotation[{
               Hue[0.9060679774997897, 0.6, 0.6], 
               Directive[
                PointSize[
                 Rational[7, 360]], 
                RGBColor[0.880722, 0.611041, 0.142051], 
                AbsoluteThickness[2]], 
               Line[CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQEf7CF0gANUwAGVz4HGF0Dji6DxJdD4Mmh8BTS+
EhpfBY2vhsbXQONrofF10Ph6aHwDNL4hGt8IjW+MxjdB45vC+QDk1haJ
                "]]}, "Charting`Private`Tag#2"]}}, <|
           "HighlightElements" -> <|
             "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
            "LayoutOptions" -> <|
             "PanelPlotLayout" -> <||>, 
              "PlotRange" -> {{0.5833333333333348, 21.}, {0., 64.}}, 
              "Frame" -> {{False, False}, {False, False}}, 
              "AxesOrigin" -> {0.5833333333333348, 0}, 
              "ImageSize" -> {300, 300/GoldenRatio}, "Axes" -> {True, True}, 
              "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
              "DefaultStyle" -> {
                Directive[
                 PointSize[
                  Rational[7, 360]], 
                 RGBColor[0.880722, 0.611041, 0.142051], 
                 AbsoluteThickness[2]], 
                Directive[
                 PointSize[
                  Rational[7, 360]], 
                 RGBColor[0.368417, 0.506779, 0.709798], 
                 AbsoluteThickness[2]]}, 
              "HighlightLabelingFunctions" -> <|
               "CoordinatesToolOptions" -> ({
                  Identity[
                   Part[#, 1]], 
                  Identity[
                   Part[#, 2]]}& ), 
                "ScalingFunctions" -> {{Identity, Identity}, {
                  Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
              False|>, 
            "Meta" -> <|
             "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
              "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>, 
           "DynamicHighlight"]], {{}, {}}}, {
        DisplayFunction -> Identity, DisplayFunction -> Identity, 
         DisplayFunction -> Identity, AspectRatio -> 
         NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
         AxesLabel -> {
           FormBox[
            TagBox["\"Links Removed\"", HoldForm], TraditionalForm], 
           FormBox[
            TagBox["\"Nodes in Largest Component\"", HoldForm], 
            TraditionalForm]}, AxesOrigin -> {0.5833333333333348, 0}, 
         DisplayFunction :> Identity, 
         Frame -> {{False, False}, {False, False}}, 
         FrameLabel -> {{None, None}, {None, None}}, 
         FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
         GridLines -> {None, None}, GridLinesStyle -> Directive[
           GrayLevel[0.5, 0.4]], ImageSize -> 300, 
         Method -> {
          "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
           "DefaultGraphicsInteraction" -> {
            "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
             "Effects" -> {
              "Highlight" -> {"ratio" -> 2}, 
               "HighlightPoint" -> {"ratio" -> 2}, 
               "Droplines" -> {
                "freeformCursorMode" -> True, 
                 "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
           "DefaultMeshStyle" -> AbsolutePointSize[6], 
           "DefaultPlotStyle" -> {
             Directive[
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.880722, 0.611041, 0.142051], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.560181, 0.691569, 0.194885], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.922526, 0.385626, 0.209179], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.528488, 0.470624, 0.701351], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.772079, 0.431554, 0.102387], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.363898, 0.618501, 0.782349], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[1, 0.75, 0], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.647624, 0.37816, 0.614037], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.571589, 0.586483, 0.], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.915, 0.3325, 0.2125], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[
              0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
              AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
           "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> True, 
           "IncludeHighlighting" -> "CurrentSet", "HighlightStyle" -> 
           Automatic, "OptimizePlotMarkers" -> True, 
           "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& ), "CopiedValueFunction" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& )}}, PlotLabel -> 
         FormBox["\"Network Integrity under Failures\"", TraditionalForm], 
         PlotRange -> {{0.5833333333333348, 21.}, {0., 64.}}, 
         PlotRangeClipping -> True, PlotRangePadding -> {{
            Scaled[0.02], 
            Scaled[0.02]}, {0, 0}}, Ticks -> {Automatic, Automatic}}], 
       FormBox[
        FormBox[
         TemplateBox[{"\"Clos\"", "\"Mesh\""}, "LineLegend", 
          DisplayFunction -> (FormBox[
            StyleBox[
             StyleBox[
              PaneBox[
               TagBox[
                GridBox[{{
                   TagBox[
                    GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #2}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
                "Grid"], Alignment -> Left, AppearanceElements -> None, 
               ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
               "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
             FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
             False], TraditionalForm]& ), 
          InterpretationFunction :> (RowBox[{"LineLegend", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["7", "360"], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                    RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["7", "360"], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                    RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}]}], 
                 "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{#, ",", #2}], "}"}], ",", 
               RowBox[{"LegendMarkers", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], 
               ",", 
               RowBox[{"Joined", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{"True", ",", "True"}], "}"}]}], ",", 
               RowBox[{"LabelStyle", "\[Rule]", 
                 RowBox[{"{", "}"}]}], ",", 
               RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
          Editable -> True], TraditionalForm], TraditionalForm]},
      "Legended",
      DisplayFunction->(GridBox[{{
          TagBox[
           ItemBox[
            PaneBox[
             TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline},
              BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
           "SkipImageSizeLevel"], 
          ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
        AutoDelete -> False, GridBoxItemSize -> Automatic, 
        BaselinePosition -> {1, 1}]& ),
      Editable->True,
      InterpretationFunction->(RowBox[{"Legended", "[", 
         RowBox[{#, ",", 
           RowBox[{"Placed", "[", 
             RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Center}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{2}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.9628762434549503`*^9, 3.9628762501939363`*^9}},
 CellLabel->
  "Out[2791]=",ExpressionUUID->"bd9241c0-416c-4b72-a787-8ca6e2916c41"]
}, Open  ]]
}, Open  ]],

Cell["\<\
The Clos/Spine-Leaf Paradigm: Engineering Predictability at Scale\
\>", "Subtitle",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898307534945*^9}, {
   3.962898368042245*^9, 3.962898369635974*^9}},
 FormatType->"TextForm",
 FontSize->18,
 Background->None,ExpressionUUID->"88729ef2-564b-4ab9-bb59-b8879b01b435"],

Cell[CellGroupData[{

Cell["\<\
The architectural principles underpinning the vast majority of modern data \
centers trace their lineage back to a 1952 paper by Charles Clos, a \
researcher at Bell Labs. His work was not concerned with data packets, but \
with the challenges of building cost-effective, non-blocking telephone \
exchanges. Clos demonstrated mathematically that by organizing switches into \
a multi-stage hierarchy, it was possible to achieve non-blocking performance \
without the prohibitive cost of a full N x N crossbar switch. This \
foundational concept of a three-stage network\[LongDash]comprising an ingress \
stage, a middle stage, and an egress stage\[LongDash]laid the groundwork for \
today\[CloseCurlyQuote]s dominant data center architecture. \
\[NonBreakingSpace] 

The modern spine-leaf fabric is a direct descendant of this model, created \
through a conceptual \[OpenCurlyDoubleQuote]folding\[CloseCurlyDoubleQuote] \
of the classic three-stage Clos network. In this adaptation, the ingress and \
egress stages are merged into a single logical layer known as the \
\[OpenCurlyDoubleQuote]leaf\[CloseCurlyDoubleQuote] layer. It is at this \
layer that endpoints, such as servers and storage arrays, connect to the \
network. The middle stage of the original Clos design becomes the \
\[OpenCurlyDoubleQuote]spine\[CloseCurlyDoubleQuote] layer, which serves as a \
high-speed, fully-meshed core whose sole purpose is to interconnect all the \
leaf switches. This transformation from a three-stage, unidirectional flow to \
a two-tier, bidirectional fabric was the critical innovation that made the \
Clos design perfectly suited for the demands of data networking. \
\[NonBreakingSpace] 

The resulting spine-leaf architecture is defined by a set of simple but \
powerful rules that collectively deliver its signature performance \
characteristics. First, every leaf switch must connect to every spine switch \
in the fabric. This creates a full mesh at the core, providing massive \
aggregate bandwidth and multiple redundant paths between any two points in \
the network. Second, leaf switches do not connect to other leaf switches, and \
spine switches do not connect to other spine switches. This strict two-tier \
hierarchy ensures that all traffic between different racks must traverse \
exactly three hops within the switch fabric: from the source leaf, up to a \
spine, and down to the destination leaf. This results in a predictable, \
low-latency path where any server can communicate with any other server in a \
fixed number of hops, a critical feature for distributed applications and \
cloud workloads that exhibit \[OpenCurlyDoubleQuote]any-to-any\
\[CloseCurlyDoubleQuote] communication patterns. \[NonBreakingSpace] 

This design facilitates a \[OpenCurlyDoubleQuote]scale-out\
\[CloseCurlyDoubleQuote] model for growth. To increase the total bandwidth \
between racks (east-west traffic), more spine switches can be added. To \
increase the number of server ports, more leaf switches can be deployed. The \
scalability is governed by the physical port counts on the switches \
themselves: the number of available uplink ports on a leaf switch determines \
the maximum number of spine switches the fabric can support, while the port \
density on a spine switch dictates the maximum number of leaf switches. This \
structured approach allows data centers to grow uniformly without \
fundamentally altering the network\[CloseCurlyQuote]s performance profile or \
requiring a complete architectural redesign. \[NonBreakingSpace] 

While this architecture pushes application connectivity to the \
\[OpenCurlyDoubleQuote]edge\[CloseCurlyDoubleQuote] or leaf layer, it is \
crucial to recognize that its operational model is based on a philosophy of \
engineered, centralized redundancy. The spine layer, though physically \
distributed across multiple switches, acts as a single logical transit point \
for all inter-rack communication. For a server in one rack to communicate \
with a server in another, its traffic is obligated to pass through the spine. \
The network\[CloseCurlyQuote]s resilience is not an emergent property but a \
deliberately engineered one, achieved by having multiple spine switches and \
employing routing protocols like Equal-Cost Multi-Path (ECMP). ECMP allows \
traffic to be distributed across all available, equal-cost paths between two \
leaves, providing both load balancing and fault tolerance. If a spine switch \
or a link to it fails, traffic is automatically rerouted over the remaining \
active paths. This design optimizes for predictable, high-speed performance \
by creating a robust, albeit centralized, core. The reliability of the entire \
fabric is therefore contingent on the engineered redundancy of this critical \
spine layer. \[NonBreakingSpace] \
\>", "Chapter",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898338257278*^9}, {
   3.962898381402219*^9, 3.962898399111268*^9}},
 FormatType->"TextForm",
 FontSize->14,
 Background->None,ExpressionUUID->"9397e1ea-a5fc-45de-8965-b87706eda618"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"BeginPackage", "[", "\"\<Daedaelus`\>\"", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"generateOctagonalLattice", "::", "usage"}], "MessageName"], "=", 
   "\"\<generateOctagonalLattice[rows, cols] -> <|\\\"Graph\\\", \
\\\"Coordinates\\\", \\\"Dimensions\\\"|>\\nCreates the physical graph layout \
for the N2N Lattice.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"buildSpanningTree", "::", "usage"}], "MessageName"], "=", 
   "\"\<buildSpanningTree[graph, root] -> spanningTreeGraph\\nBuilds a \
logical management tree on the physical graph, rooted at a specific \
cell.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"healTree", "::", "usage"}], "MessageName"], "=", 
   "\"\<healTree[tree, failedNodes, physicalGraph] -> \
healedTreeGraph\\nRepairs the logical tree around failed nodes using only \
local information.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"octagonViewer", "::", "usage"}], "MessageName"], "=", 
   "\"\<octagonViewer[rows, cols]\\nAn interactive simulation demonstrating \
the self-healing properties of the N2N Lattice.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"closMeshDashboard", "::", "usage"}], "MessageName"], "=", 
   "\"\<closMeshDashboard[]\\nA comparative dashboard showing the superior \
resilience and performance of a Daedaelus mesh over a traditional Clos \
network.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Begin", "[", "\"\<`Private`\>\"", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"ClearAll", "[", "symDiff", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"symDiff", "[", 
    RowBox[{"a_List", ",", "b_List"}], "]"}], ":=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"Complement", "[", 
      RowBox[{"a", ",", "b"}], "]"}], ",", 
     RowBox[{"Complement", "[", 
      RowBox[{"b", ",", "a"}], "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"ClearAll", "[", "generateOctagonalLattice", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"generateOctagonalLattice", "[", 
    RowBox[{
     RowBox[{"rows_Integer", "?", "Positive"}], ",", 
     RowBox[{"cols_Integer", "?", "Positive"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "coords", ",", "deltas", ",", "insideQ", ",", "edges", ",", "g"}], 
      "}"}], ",", 
     RowBox[{
      RowBox[{"coords", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"x", ",", "y"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"y", ",", "0", ",", 
             RowBox[{"rows", "-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"x", ",", "0", ",", 
             RowBox[{"cols", "-", "1"}]}], "}"}]}], "]"}], ",", "1"}], 
        "]"}]}], ";", 
      RowBox[{"deltas", "=", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{
         RowBox[{"Tuples", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "0", ",", "1"}], "}"}], ",", "2"}], 
          "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}], "]"}]}], ";", 
      RowBox[{
       RowBox[{"insideQ", "[", 
        RowBox[{"{", 
         RowBox[{"x_", ",", "y_"}], "}"}], "]"}], ":=", 
       RowBox[{
        RowBox[{"0", "\[LessEqual]", "x", "<", "cols"}], "&&", 
        RowBox[{"0", "\[LessEqual]", "y", "<", "rows"}]}]}], ";", 
      RowBox[{"edges", "=", 
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"UndirectedEdge", "@@", 
            RowBox[{"Sort", "[", "#1", "]"}]}], "&"}], ")"}], "/@", 
         RowBox[{"Select", "[", 
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"p", ",", 
                    RowBox[{"p", "+", "d"}]}], "}"}], "&"}], ")"}], "/@", 
                "deltas"}], ",", 
               RowBox[{"{", 
                RowBox[{"p", ",", "coords"}], "}"}]}], "]"}], ",", "1"}], 
            "]"}], ",", 
           RowBox[{"insideQ", "@*", "Last"}]}], "]"}]}], "]"}]}], ";", 
      RowBox[{"g", "=", 
       RowBox[{"Graph", "[", 
        RowBox[{"coords", ",", "edges", ",", 
         RowBox[{"VertexCoordinates", "\[Rule]", "coords"}]}], "]"}]}], ";", 
      RowBox[{"Association", "[", 
       RowBox[{
        RowBox[{"\"\<Graph\>\"", "\[Rule]", "g"}], ",", 
        RowBox[{"\"\<Coordinates\>\"", "\[Rule]", "coords"}], ",", 
        RowBox[{"\"\<Dimensions\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"rows", ",", "cols"}], "}"}]}]}], "]"}]}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"ClearAll", "[", "buildSpanningTree", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"buildSpanningTree", "[", 
    RowBox[{"g_Graph", ",", "root_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"e", "=", 
       RowBox[{"{", "}"}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"VertexQ", "[", 
          RowBox[{"g", ",", "root"}], "]"}]}], ",", 
        RowBox[{"Return", "[", 
         RowBox[{"Graph", "[", "]"}], "]"}]}], "]"}], ";", 
      RowBox[{"BreadthFirstScan", "[", 
       RowBox[{"g", ",", "root", ",", 
        RowBox[{"\"\<VertexPredecessor\>\"", "\[Rule]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"#2", "=!=", "Null"}], ",", 
             RowBox[{"AppendTo", "[", 
              RowBox[{"e", ",", 
               RowBox[{"#1", "\[UndirectedEdge]", "#2"}]}], "]"}]}], "]"}], 
           "&"}], ")"}]}]}], "]"}], ";", 
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"VertexList", "[", "g", "]"}], ",", "e", ",", 
        RowBox[{"VertexCoordinates", "\[Rule]", 
         RowBox[{"GraphEmbedding", "[", "g", "]"}]}]}], "]"}]}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"ClearAll", "[", "healTree", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"healTree", "[", 
    RowBox[{"tr_Graph", ",", "failed_List", ",", "phys_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"live", ",", "root", ",", "orphans", ",", "repaired", ",", 
       RowBox[{"physGraph", "=", "phys"}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"live", "=", 
       RowBox[{"VertexDelete", "[", 
        RowBox[{"tr", ",", "failed"}], "]"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"VertexCount", "[", "live", "]"}], "\[Equal]", "0"}], ",", 
        RowBox[{"Return", "[", "live", "]"}]}], "]"}], ";", 
      RowBox[{"root", "=", 
       RowBox[{"First", "[", 
        RowBox[{"VertexList", "[", "live", "]"}], "]"}]}], ";", 
      RowBox[{"orphans", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{
         RowBox[{"VertexList", "[", "physGraph", "]"}], ",", 
         RowBox[{"VertexList", "[", "live", "]"}]}], "]"}]}], ";", 
      RowBox[{"repaired", "=", 
       RowBox[{"Fold", "[", 
        RowBox[{
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"t", ",", "v"}], "}"}], ",", 
           RowBox[{"Module", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"nbr", "=", 
               RowBox[{"Complement", "[", 
                RowBox[{
                 RowBox[{"AdjacencyList", "[", 
                  RowBox[{"physGraph", ",", "v"}], "]"}], ",", "failed"}], 
                "]"}]}], "}"}], ",", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"nbr", "===", 
                RowBox[{"{", "}"}]}], ",", "t", ",", 
               RowBox[{"EdgeAdd", "[", 
                RowBox[{"t", ",", 
                 RowBox[{"v", "\[UndirectedEdge]", 
                  RowBox[{"First", "[", "nbr", "]"}]}]}], "]"}]}], "]"}]}], 
            "]"}]}], "]"}], ",", "live", ",", "orphans"}], "]"}]}], ";", 
      "repaired"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"ClearAll", "[", "octagonViewer", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"octagonViewer", "[", 
    RowBox[{"rows_", ",", "cols_"}], "]"}], ":=", 
   RowBox[{"DynamicModule", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"dat", "=", 
        RowBox[{"generateOctagonalLattice", "[", 
         RowBox[{"rows", ",", "cols"}], "]"}]}], ",", "root", ",", 
       RowBox[{"failed", "=", 
        RowBox[{"{", "}"}]}], ",", "tree"}], "}"}], ",", 
     RowBox[{
      RowBox[{"root", "=", 
       RowBox[{"First", "[", 
        RowBox[{"dat", "[", "\"\<Coordinates\>\"", "]"}], "]"}]}], ";", 
      RowBox[{"tree", "=", 
       RowBox[{"buildSpanningTree", "[", 
        RowBox[{
         RowBox[{"dat", "[", "\"\<Graph\>\"", "]"}], ",", "root"}], "]"}]}], 
      ";", 
      RowBox[{"Dynamic", "[", 
       RowBox[{"Graphics", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"LightGray", ",", "Thin", ",", 
             RowBox[{"Line", "@@@", 
              RowBox[{"EdgeList", "[", 
               RowBox[{"dat", "[", "\"\<Graph\>\"", "]"}], "]"}]}]}], "}"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{"Orange", ",", 
             RowBox[{"Thickness", "[", ".006", "]"}], ",", 
             RowBox[{"Line", "@@@", 
              RowBox[{"EdgeList", "[", "tree", "]"}]}]}], "}"}], ",", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"With", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"v", "=", 
                 RowBox[{
                  RowBox[{"dat", "[", "\"\<Coordinates\>\"", "]"}], 
                  "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}]}], 
                "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"EdgeForm", "[", "Black", "]"}], ",", 
                 RowBox[{"FaceForm", "[", 
                  RowBox[{"Which", "[", 
                   RowBox[{
                    RowBox[{"MemberQ", "[", 
                    RowBox[{"failed", ",", "v"}], "]"}], ",", "Black", ",", 
                    RowBox[{"v", "===", "root"}], ",", "Orange", ",", "True", 
                    ",", "LightGray"}], "]"}], "]"}], ",", 
                 RowBox[{"EventHandler", "[", 
                  RowBox[{
                   RowBox[{"Disk", "[", 
                    RowBox[{"v", ",", ".18"}], "]"}], ",", 
                   RowBox[{"\"\<MouseClicked\>\"", "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"CurrentValue", "[", "\"\<ControlKey\>\"", "]"}], 
                    ",", 
                    RowBox[{"failed", "=", 
                    RowBox[{"symDiff", "[", 
                    RowBox[{"failed", ",", 
                    RowBox[{"{", "v", "}"}]}], "]"}]}], ",", 
                    RowBox[{"root", "=", "v"}]}], "]"}], ";", 
                    RowBox[{"tree", "=", 
                    RowBox[{"healTree", "[", 
                    RowBox[{
                    RowBox[{"buildSpanningTree", "[", 
                    RowBox[{
                    RowBox[{"dat", "[", "\"\<Graph\>\"", "]"}], ",", "root"}],
                     "]"}], ",", "failed", ",", 
                    RowBox[{"dat", "[", "\"\<Graph\>\"", "]"}]}], "]"}]}]}], 
                    ")"}]}]}], "]"}]}], "}"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", 
               RowBox[{"Length", "[", 
                RowBox[{"dat", "[", "\"\<Coordinates\>\"", "]"}], "]"}]}], 
              "}"}]}], "]"}]}], "}"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "600"}], ",", 
         RowBox[{"PlotLabel", "\[Rule]", 
          RowBox[{"Style", "[", 
           RowBox[{
           "\"\<Octagonal N\.b2N lattice \[LongDash] Self-Healing Demo\>\"", 
            ",", "14", ",", "Bold"}], "]"}]}]}], "]"}], "]"}]}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"ClearAll", "[", "numSpanningTrees", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"numSpanningTrees", "[", "g_Graph", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"lap", "=", 
       RowBox[{"KirchhoffMatrix", "[", "g", "]"}]}], "}"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"ConnectedGraphQ", "[", "g", "]"}]}], ",", "0", ",", 
       RowBox[{"Round", "[", 
        RowBox[{"Det", "[", 
         RowBox[{"Drop", "[", 
          RowBox[{"lap", ",", 
           RowBox[{"{", "1", "}"}], ",", 
           RowBox[{"{", "1", "}"}]}], "]"}], "]"}], "]"}]}], "]"}]}], "]"}]}],
   ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"algebraicConnectivity", "[", "g_Graph", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"VertexCount", "[", "g", "]"}], ">", "1"}], ",", 
     RowBox[{
      RowBox[{"Sort", "[", 
       RowBox[{"Eigenvalues", "[", 
        RowBox[{"N", "[", 
         RowBox[{"KirchhoffMatrix", "[", "g", "]"}], "]"}], "]"}], "]"}], 
      "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",", "0"}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"generateClosNetwork", "[", 
    RowBox[{"r_", ",", "s_", ",", "p_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"servers", ",", "tors", ",", "spines", ",", "edges"}], "}"}], 
     ",", 
     RowBox[{
      RowBox[{"servers", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"\"\<S\>\"", "<>", 
           RowBox[{"ToString", "[", "i", "]"}], "<>", "\"\<-\>\"", "<>", 
           RowBox[{"ToString", "[", "j", "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "r"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "s"}], "}"}]}], "]"}], "]"}]}], ";", 
      RowBox[{"tors", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"\"\<T\>\"", "<>", 
          RowBox[{"ToString", "[", "i", "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "r"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"spines", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"\"\<P\>\"", "<>", 
          RowBox[{"ToString", "[", "i", "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "p"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"edges", "=", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
             "tors", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], 
             "\[UndirectedEdge]", 
             RowBox[{"servers", "\[LeftDoubleBracket]", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"i", "-", "1"}], ")"}], " ", "s"}], "+", "j"}], 
              "\[RightDoubleBracket]"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "r"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"j", ",", "s"}], "}"}]}], "]"}], "]"}], ",", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
             "tors", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], 
             "\[UndirectedEdge]", 
             RowBox[{
             "spines", "\[LeftDoubleBracket]", "j", 
              "\[RightDoubleBracket]"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "r"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"j", ",", "p"}], "}"}]}], "]"}], "]"}]}], "]"}]}], ";", 
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"Join", "[", 
         RowBox[{"servers", ",", "tors", ",", "spines"}], "]"}], ",", "edges",
         ",", 
        RowBox[{"GraphLayout", "\[Rule]", "\"\<LayeredEmbedding\>\""}]}], 
       "]"}]}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"generateMeshNetwork", "[", 
    RowBox[{"rows_", ",", "cols_"}], "]"}], ":=", 
   RowBox[{"GridGraph", "[", 
    RowBox[{"{", 
     RowBox[{"rows", ",", "cols"}], "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"ClearAll", "[", "closMeshDashboard", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"closMeshDashboard", "[", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"r", "=", "8"}], ",", 
       RowBox[{"s", "=", "8"}], ",", 
       RowBox[{"p", "=", "4"}], ",", 
       RowBox[{"mRows", "=", "8"}], ",", 
       RowBox[{"mCols", "=", "8"}], ",", 
       RowBox[{"samples", "=", "100"}], ",", "clos", ",", "mesh", ",", 
       "closHops", ",", "meshHops", ",", "closTrees", ",", "meshTrees", ",", 
       RowBox[{"fails", "=", 
        RowBox[{"Range", "[", 
         RowBox[{"0", ",", "20", ",", "2"}], "]"}]}], ",", "closRes", ",", 
       "meshRes"}], "}"}], ",", 
     RowBox[{
      RowBox[{"clos", "=", 
       RowBox[{"generateClosNetwork", "[", 
        RowBox[{"r", ",", "s", ",", "p"}], "]"}]}], ";", 
      RowBox[{"mesh", "=", 
       RowBox[{"generateMeshNetwork", "[", 
        RowBox[{"mRows", ",", "mCols"}], "]"}]}], ";", 
      RowBox[{"closHops", "=", 
       RowBox[{"Mean", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"GraphDistance", "[", 
           RowBox[{"clos", ",", 
            RowBox[{"RandomChoice", "[", 
             RowBox[{"VertexList", "[", "clos", "]"}], "]"}], ",", 
            RowBox[{"RandomChoice", "[", 
             RowBox[{"VertexList", "[", "clos", "]"}], "]"}]}], "]"}], ",", 
          RowBox[{"{", "samples", "}"}]}], "]"}], "]"}]}], ";", 
      RowBox[{"meshHops", "=", 
       RowBox[{"Mean", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"GraphDistance", "[", 
           RowBox[{"mesh", ",", 
            RowBox[{"RandomChoice", "[", 
             RowBox[{"VertexList", "[", "mesh", "]"}], "]"}], ",", 
            RowBox[{"RandomChoice", "[", 
             RowBox[{"VertexList", "[", "mesh", "]"}], "]"}]}], "]"}], ",", 
          RowBox[{"{", "samples", "}"}]}], "]"}], "]"}]}], ";", 
      RowBox[{"closTrees", "=", 
       RowBox[{"numSpanningTrees", "[", "clos", "]"}]}], ";", 
      RowBox[{"meshTrees", "=", 
       RowBox[{"numSpanningTrees", "[", "mesh", "]"}]}], ";", 
      RowBox[{"closRes", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"k", ",", 
           RowBox[{"algebraicConnectivity", "[", 
            RowBox[{"EdgeDelete", "[", 
             RowBox[{"clos", ",", 
              RowBox[{"RandomSample", "[", 
               RowBox[{
                RowBox[{"EdgeList", "[", "clos", "]"}], ",", "k"}], "]"}]}], 
             "]"}], "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", "fails"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"meshRes", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"k", ",", 
           RowBox[{"algebraicConnectivity", "[", 
            RowBox[{"EdgeDelete", "[", 
             RowBox[{"mesh", ",", 
              RowBox[{"RandomSample", "[", 
               RowBox[{
                RowBox[{"EdgeList", "[", "mesh", "]"}], ",", "k"}], "]"}]}], 
             "]"}], "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", "fails"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"Grid", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Style", "[", 
             RowBox[{
             "\"\<Clos vs. Mesh Network Analysis\>\"", ",", "20", ",", 
              "Bold"}], "]"}], ",", "\[SpanFromLeft]"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Labeled", "[", 
             RowBox[{"clos", ",", "\"\<Clos (3-tier)\>\"", ",", "Top"}], 
             "]"}], ",", 
            RowBox[{"Labeled", "[", 
             RowBox[{"mesh", ",", "\"\<8\[Times]8 Mesh\>\"", ",", "Top"}], 
             "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Labeled", "[", 
             RowBox[{
              RowBox[{"BarChart", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"closHops", ",", "meshHops"}], "}"}], ",", 
                RowBox[{"ChartLabels", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{"\"\<Clos\>\"", ",", "\"\<Mesh\>\""}], "}"}]}], ",", 
                RowBox[{"PlotLabel", "\[Rule]", "\"\<Average hop count\>\""}],
                 ",", 
                RowBox[{"ChartStyle", "\[Rule]", "\"\<Pastel\>\""}], ",", 
                RowBox[{"LabelingFunction", "\[Rule]", "Above"}]}], "]"}], 
              ",", "\"\<\>\"", ",", "Top"}], "]"}], ",", 
            RowBox[{"Labeled", "[", 
             RowBox[{
              RowBox[{"BarChart", "[", 
               RowBox[{
                RowBox[{"Log10", "/@", 
                 RowBox[{"{", 
                  RowBox[{"closTrees", ",", "meshTrees"}], "}"}]}], ",", 
                RowBox[{"ChartLabels", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{"\"\<Clos\>\"", ",", "\"\<Mesh\>\""}], "}"}]}], ",", 
                RowBox[{
                "PlotLabel", "\[Rule]", 
                 "\"\<log\:2081\:2080 spanning trees\>\""}], ",", 
                RowBox[{"ChartStyle", "\[Rule]", "\"\<Pastel\>\""}], ",", 
                RowBox[{"LabelingFunction", "\[Rule]", "Above"}]}], "]"}], 
              ",", "\"\<\>\"", ",", "Top"}], "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"Labeled", "[", 
            RowBox[{
             RowBox[{"ListLinePlot", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"closRes", ",", "meshRes"}], "}"}], ",", 
               RowBox[{"PlotLegends", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{"\"\<Clos\>\"", ",", "\"\<Mesh\>\""}], "}"}]}], ",", 
               
               RowBox[{"Frame", "\[Rule]", "True"}], ",", 
               RowBox[{"AxesLabel", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{
                 "\"\<links removed\>\"", ",", "\"\<\[Lambda]\:2082\>\""}], 
                 "}"}]}], ",", 
               RowBox[{
               "PlotLabel", "\[Rule]", 
                "\"\<Algebraic connectivity vs failures\>\""}]}], "]"}], ",", 
             "\"\<\>\"", ",", "Top"}], "]"}], "}"}]}], "}"}], ",", 
        RowBox[{"Spacings", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"2", ",", "3"}], "}"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "All"}], ",", 
        RowBox[{"Background", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"None", ",", 
           RowBox[{"{", 
            RowBox[{"Lighter", "[", 
             RowBox[{"Gray", ",", ".95"}], "]"}], "}"}]}], "}"}]}]}], 
       "]"}]}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"End", "[", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"EndPackage", "[", "]"}], ";"}], "\n", 
 RowBox[{"octagonViewer", "[", 
  RowBox[{"7", ",", "12"}], "]"}], "\n", 
 RowBox[{"closMeshDashboard", "[", "]"}]}], "Code",
 CellChangeTimes->{{3.9627939663973007`*^9, 3.962793983908293*^9}, {
  3.962805112506897*^9, 3.96280511981814*^9}, {3.9628054272466393`*^9, 
  3.962805463959895*^9}},
 CellLabel->
  "In[5471]:=",ExpressionUUID->"edf2a014-f6ab-4ecc-add2-4eac3299c500"],

Cell[BoxData[
 DynamicModuleBox[{Daedaelus`Private`dat$$ = <|
  "Graph" -> Graph[{{0, 0}, {1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 0}, {6, 0}, {
     7, 0}, {8, 0}, {9, 0}, {10, 0}, {11, 0}, {0, 1}, {1, 1}, {2, 1}, {3, 
     1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {0,
      2}, {1, 2}, {2, 2}, {3, 2}, {4, 2}, {5, 2}, {6, 2}, {7, 2}, {8, 2}, {9, 
     2}, {10, 2}, {11, 2}, {0, 3}, {1, 3}, {2, 3}, {3, 3}, {4, 3}, {5, 3}, {6,
      3}, {7, 3}, {8, 3}, {9, 3}, {10, 3}, {11, 3}, {0, 4}, {1, 4}, {2, 4}, {
     3, 4}, {4, 4}, {5, 4}, {6, 4}, {7, 4}, {8, 4}, {9, 4}, {10, 4}, {11, 
     4}, {0, 5}, {1, 5}, {2, 5}, {3, 5}, {4, 5}, {5, 5}, {6, 5}, {7, 5}, {8, 
     5}, {9, 5}, {10, 5}, {11, 5}, {0, 6}, {1, 6}, {2, 6}, {3, 6}, {4, 6}, {5,
      6}, {6, 6}, {7, 6}, {8, 6}, {9, 6}, {10, 6}, {11, 6}}, {}, {
     VertexCoordinates -> {{0, 0}, {1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 0}, {6,
        0}, {7, 0}, {8, 0}, {9, 0}, {10, 0}, {11, 0}, {0, 1}, {1, 1}, {2, 
       1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {
       11, 1}, {0, 2}, {1, 2}, {2, 2}, {3, 2}, {4, 2}, {5, 2}, {6, 2}, {7, 
       2}, {8, 2}, {9, 2}, {10, 2}, {11, 2}, {0, 3}, {1, 3}, {2, 3}, {3, 3}, {
       4, 3}, {5, 3}, {6, 3}, {7, 3}, {8, 3}, {9, 3}, {10, 3}, {11, 3}, {0, 
       4}, {1, 4}, {2, 4}, {3, 4}, {4, 4}, {5, 4}, {6, 4}, {7, 4}, {8, 4}, {9,
        4}, {10, 4}, {11, 4}, {0, 5}, {1, 5}, {2, 5}, {3, 5}, {4, 5}, {5, 
       5}, {6, 5}, {7, 5}, {8, 5}, {9, 5}, {10, 5}, {11, 5}, {0, 6}, {1, 6}, {
       2, 6}, {3, 6}, {4, 6}, {5, 6}, {6, 6}, {7, 6}, {8, 6}, {9, 6}, {10, 
       6}, {11, 6}}}], 
   "Coordinates" -> {{0, 0}, {1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 0}, {6, 0}, {
    7, 0}, {8, 0}, {9, 0}, {10, 0}, {11, 0}, {0, 1}, {1, 1}, {2, 1}, {3, 1}, {
    4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {0, 2}, {
    1, 2}, {2, 2}, {3, 2}, {4, 2}, {5, 2}, {6, 2}, {7, 2}, {8, 2}, {9, 2}, {
    10, 2}, {11, 2}, {0, 3}, {1, 3}, {2, 3}, {3, 3}, {4, 3}, {5, 3}, {6, 3}, {
    7, 3}, {8, 3}, {9, 3}, {10, 3}, {11, 3}, {0, 4}, {1, 4}, {2, 4}, {3, 4}, {
    4, 4}, {5, 4}, {6, 4}, {7, 4}, {8, 4}, {9, 4}, {10, 4}, {11, 4}, {0, 5}, {
    1, 5}, {2, 5}, {3, 5}, {4, 5}, {5, 5}, {6, 5}, {7, 5}, {8, 5}, {9, 5}, {
    10, 5}, {11, 5}, {0, 6}, {1, 6}, {2, 6}, {3, 6}, {4, 6}, {5, 6}, {6, 6}, {
    7, 6}, {8, 6}, {9, 6}, {10, 6}, {11, 6}}, "Dimensions" -> {7, 12}|>, 
  Daedaelus`Private`root$$ = {0, 0}, Daedaelus`Private`failed$$ = {}, 
  Daedaelus`Private`tree$$ = 
  Graph[{{0, 0}, {1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 0}, {6, 0}, {7, 0}, {8, 
   0}, {9, 0}, {10, 0}, {11, 0}, {0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 
   1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {0, 2}, {1, 2}, {2, 
   2}, {3, 2}, {4, 2}, {5, 2}, {6, 2}, {7, 2}, {8, 2}, {9, 2}, {10, 2}, {11, 
   2}, {0, 3}, {1, 3}, {2, 3}, {3, 3}, {4, 3}, {5, 3}, {6, 3}, {7, 3}, {8, 
   3}, {9, 3}, {10, 3}, {11, 3}, {0, 4}, {1, 4}, {2, 4}, {3, 4}, {4, 4}, {5, 
   4}, {6, 4}, {7, 4}, {8, 4}, {9, 4}, {10, 4}, {11, 4}, {0, 5}, {1, 5}, {2, 
   5}, {3, 5}, {4, 5}, {5, 5}, {6, 5}, {7, 5}, {8, 5}, {9, 5}, {10, 5}, {11, 
   5}, {0, 6}, {1, 6}, {2, 6}, {3, 6}, {4, 6}, {5, 6}, {6, 6}, {7, 6}, {8, 
   6}, {9, 6}, {10, 6}, {11, 6}}, {}, {
   VertexCoordinates -> {{0, 0}, {1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 0}, {6, 
     0}, {7, 0}, {8, 0}, {9, 0}, {10, 0}, {11, 0}, {0, 1}, {1, 1}, {2, 1}, {3,
      1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {
     0, 2}, {1, 2}, {2, 2}, {3, 2}, {4, 2}, {5, 2}, {6, 2}, {7, 2}, {8, 2}, {
     9, 2}, {10, 2}, {11, 2}, {0, 3}, {1, 3}, {2, 3}, {3, 3}, {4, 3}, {5, 
     3}, {6, 3}, {7, 3}, {8, 3}, {9, 3}, {10, 3}, {11, 3}, {0, 4}, {1, 4}, {2,
      4}, {3, 4}, {4, 4}, {5, 4}, {6, 4}, {7, 4}, {8, 4}, {9, 4}, {10, 4}, {
     11, 4}, {0, 5}, {1, 5}, {2, 5}, {3, 5}, {4, 5}, {5, 5}, {6, 5}, {7, 5}, {
     8, 5}, {9, 5}, {10, 5}, {11, 5}, {0, 6}, {1, 6}, {2, 6}, {3, 6}, {4, 
     6}, {5, 6}, {6, 6}, {7, 6}, {8, 6}, {9, 6}, {10, 6}, {11, 6}}}]}, 
  DynamicBox[ToBoxes[
    Graphics[{{LightGray, Thin, 
       MapApply[Line, 
        EdgeList[
         Daedaelus`Private`dat$$["Graph"]]]}, {Orange, 
       Thickness[0.006], 
       MapApply[Line, 
        EdgeList[Daedaelus`Private`tree$$]]}, 
      Table[
       With[{Daedaelus`Private`v$ = Part[
           Daedaelus`Private`dat$$["Coordinates"], Daedaelus`Private`i]}, {
         EdgeForm[Black], 
         FaceForm[
          Which[
           MemberQ[Daedaelus`Private`failed$$, Daedaelus`Private`v$], Black, 
           Daedaelus`Private`v$ === Daedaelus`Private`root$$, Orange, True, 
           LightGray]], 
         EventHandler[
          Disk[Daedaelus`Private`v$, 0.18], "MouseClicked" :> (If[
             CurrentValue["ControlKey"], Daedaelus`Private`failed$$ = 
             Daedaelus`Private`symDiff[
              Daedaelus`Private`failed$$, {Daedaelus`Private`v$}], 
             Daedaelus`Private`root$$ = Daedaelus`Private`v$]; 
           Daedaelus`Private`tree$$ = Daedaelus`healTree[
              Daedaelus`buildSpanningTree[
               Daedaelus`Private`dat$$["Graph"], Daedaelus`Private`root$$], 
              Daedaelus`Private`failed$$, 
              Daedaelus`Private`dat$$["Graph"]])]}], {Daedaelus`Private`i, 
        Length[
         Daedaelus`Private`dat$$["Coordinates"]]}]}, ImageSize -> 600, 
     PlotLabel -> 
     Style["Octagonal N\.b2N lattice \[LongDash] Self-Healing Demo", 14, 
       Bold]], StandardForm],
   ImageSizeCache->{750., {222., 230.}}],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{{3.9627939720586557`*^9, 3.9627939844643583`*^9}, 
   3.962794023480502*^9, 3.962794083265913*^9, 3.962794764281806*^9, {
   3.962795863555853*^9, 3.962795867937158*^9}, 3.96279939530335*^9, {
   3.9628047026348886`*^9, 3.962804761461073*^9}, 3.962804850400918*^9, 
   3.9628048936194572`*^9, 3.962804966096387*^9, {3.962805113254821*^9, 
   3.9628051270805817`*^9}, 3.9628053538358803`*^9, {3.962805439630978*^9, 
   3.96280546428653*^9}, {3.962806973449379*^9, 3.962806975591629*^9}, 
   3.962875635094102*^9, 3.962876267672038*^9, 3.962897155871401*^9},
 CellLabel->
  "Out[5497]=",ExpressionUUID->"e4abed96-4966-4167-8e8e-4d5319597a81"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     StyleBox["\<\"Clos vs. Mesh Network Analysis\"\>",
      StripOnInput->False,
      FontSize->20,
      FontWeight->Bold], "Daedaelus`Private`\[SpanFromLeft]"},
    {
     TemplateBox[{
       GraphicsBox[
        NamespaceBox["NetworkGraphics", 
         DynamicModuleBox[{Typeset`graph = HoldComplete[
             
             Graph[{"S1-1", "S1-2", "S1-3", "S1-4", "S1-5", "S1-6", "S1-7", 
               "S1-8", "S2-1", "S2-2", "S2-3", "S2-4", "S2-5", "S2-6", "S2-7",
                "S2-8", "S3-1", "S3-2", "S3-3", "S3-4", "S3-5", "S3-6", 
               "S3-7", "S3-8", "S4-1", "S4-2", "S4-3", "S4-4", "S4-5", "S4-6",
                "S4-7", "S4-8", "S5-1", "S5-2", "S5-3", "S5-4", "S5-5", 
               "S5-6", "S5-7", "S5-8", "S6-1", "S6-2", "S6-3", "S6-4", "S6-5",
                "S6-6", "S6-7", "S6-8", "S7-1", "S7-2", "S7-3", "S7-4", 
               "S7-5", "S7-6", "S7-7", "S7-8", "S8-1", "S8-2", "S8-3", "S8-4",
                "S8-5", "S8-6", "S8-7", "S8-8", "T1", "T2", "T3", "T4", "T5", 
               "T6", "T7", "T8", "P1", "P2", "P3", "P4"}, {
              Null, {{65, 1}, {65, 2}, {65, 3}, {65, 4}, {65, 5}, {65, 6}, {
               65, 7}, {65, 8}, {66, 9}, {66, 10}, {66, 11}, {66, 12}, {66, 
               13}, {66, 14}, {66, 15}, {66, 16}, {67, 17}, {67, 18}, {67, 
               19}, {67, 20}, {67, 21}, {67, 22}, {67, 23}, {67, 24}, {68, 
               25}, {68, 26}, {68, 27}, {68, 28}, {68, 29}, {68, 30}, {68, 
               31}, {68, 32}, {69, 33}, {69, 34}, {69, 35}, {69, 36}, {69, 
               37}, {69, 38}, {69, 39}, {69, 40}, {70, 41}, {70, 42}, {70, 
               43}, {70, 44}, {70, 45}, {70, 46}, {70, 47}, {70, 48}, {71, 
               49}, {71, 50}, {71, 51}, {71, 52}, {71, 53}, {71, 54}, {71, 
               55}, {71, 56}, {72, 57}, {72, 58}, {72, 59}, {72, 60}, {72, 
               61}, {72, 62}, {72, 63}, {72, 64}, {65, 73}, {65, 74}, {65, 
               75}, {65, 76}, {66, 73}, {66, 74}, {66, 75}, {66, 76}, {67, 
               73}, {67, 74}, {67, 75}, {67, 76}, {68, 73}, {68, 74}, {68, 
               75}, {68, 76}, {69, 73}, {69, 74}, {69, 75}, {69, 76}, {70, 
               73}, {70, 74}, {70, 75}, {70, 76}, {71, 73}, {71, 74}, {71, 
               75}, {71, 76}, {72, 73}, {72, 74}, {72, 75}, {72, 76}}}, {
              GraphLayout -> "LayeredEmbedding"}]]}, 
          TagBox[
           GraphicsGroupBox[
            GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGDwAWIQjQ6M9i9oE5ywzh6Vvw/OT+v/ocL75hia/Dk4v6Fc
5QuX1GU09dfgfJ/lZ0L5992C84ub+3h4mJ+iqX8G50fOTrLlu/oCTf8rON9+
s1mewPI3aO55B+dPTm3177T5AOf3ZO+6zWn4Ec5vK3yf3qX6Cc39n+H8ytrI
hm6+L2ju/Qrn53QentHz/Sua+7/B+fFTdTf2PviO5p8fcH7wwukn+07+RPPf
LzjfbS3jo/5Nv9H8+wfOt9yZ/WvC7L9o/v8H5+scvSo0qeU/WngwOMD4E17M
n3pyG4IPCR9GOL/z3RVFr9UIPiS8mOD85i+c607NR/Ah4ccM59f8srPynoLg
Q8KTBc4vYyg5droDwYeELyucn8+2MsinFsGHhDeCn8lz796ZQjY4HxL+CH6y
kHC2bxo7nA+JDwQ/RsLj+9koDjgfEj8IfphcbbOfPyecD4kvBN9fZRP/eWcu
OB8Sfwi+p9bz2f4W3HA+JD4RfGcDGY0LOjxwPiR+EXwbs8AtAYq8cD4kvhF8
M5s2h4uifHA+JP4RfH2n3WcCufjhfEh6QPBh+RWW7yHuew3nQ8L/K5wPcc9f
OJ9l85+uVUlMDjD+61MXdq8xYYPzLz5a8mYdGxecv/1XhezGG7xw/pUj/2x/
yjI4wMoZCH0PLb8+RMufj+F8AHR2KT4=
             "], {{
               Directive[
                Opacity[0.7], 
                Hue[0.6, 0.7, 0.5]], 
               Arrowheads[0.], {
                
                ArrowBox[{{1, 65}, {2, 65}, {3, 65}, {4, 65}, {5, 65}, {6, 
                 65}, {7, 65}, {8, 65}, {9, 66}, {10, 66}, {11, 66}, {12, 
                 66}, {13, 66}, {14, 66}, {15, 66}, {16, 66}, {17, 67}, {18, 
                 67}, {19, 67}, {20, 67}, {21, 67}, {22, 67}, {23, 67}, {24, 
                 67}, {25, 68}, {26, 68}, {27, 68}, {28, 68}, {29, 68}, {30, 
                 68}, {31, 68}, {32, 68}, {33, 69}, {34, 69}, {35, 69}, {36, 
                 69}, {37, 69}, {38, 69}, {39, 69}, {40, 69}, {41, 70}, {42, 
                 70}, {43, 70}, {44, 70}, {45, 70}, {46, 70}, {47, 70}, {48, 
                 70}, {49, 71}, {50, 71}, {51, 71}, {52, 71}, {53, 71}, {54, 
                 71}, {55, 71}, {56, 71}, {57, 72}, {58, 72}, {59, 72}, {60, 
                 72}, {61, 72}, {62, 72}, {63, 72}, {64, 72}, {65, 73}, {65, 
                 74}, {65, 75}, {65, 76}, {66, 73}, {66, 74}, {66, 75}, {66, 
                 76}, {67, 73}, {67, 74}, {67, 75}, {67, 76}, {68, 73}, {68, 
                 74}, {68, 75}, {68, 76}, {69, 73}, {69, 74}, {69, 75}, {69, 
                 76}, {70, 73}, {70, 74}, {70, 75}, {70, 76}, {71, 73}, {71, 
                 74}, {71, 75}, {71, 76}, {72, 73}, {72, 74}, {72, 75}, {72, 
                 76}}, 0.03661959095074001]}}, {
               Directive[
                Hue[0.6, 0.2, 0.8], 
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.7]]]], 
               DiskBox[1, 0.03661959095074001], 
               DiskBox[2, 0.03661959095074001], 
               DiskBox[3, 0.03661959095074001], 
               DiskBox[4, 0.03661959095074001], 
               DiskBox[5, 0.03661959095074001], 
               DiskBox[6, 0.03661959095074001], 
               DiskBox[7, 0.03661959095074001], 
               DiskBox[8, 0.03661959095074001], 
               DiskBox[9, 0.03661959095074001], 
               DiskBox[10, 0.03661959095074001], 
               DiskBox[11, 0.03661959095074001], 
               DiskBox[12, 0.03661959095074001], 
               DiskBox[13, 0.03661959095074001], 
               DiskBox[14, 0.03661959095074001], 
               DiskBox[15, 0.03661959095074001], 
               DiskBox[16, 0.03661959095074001], 
               DiskBox[17, 0.03661959095074001], 
               DiskBox[18, 0.03661959095074001], 
               DiskBox[19, 0.03661959095074001], 
               DiskBox[20, 0.03661959095074001], 
               DiskBox[21, 0.03661959095074001], 
               DiskBox[22, 0.03661959095074001], 
               DiskBox[23, 0.03661959095074001], 
               DiskBox[24, 0.03661959095074001], 
               DiskBox[25, 0.03661959095074001], 
               DiskBox[26, 0.03661959095074001], 
               DiskBox[27, 0.03661959095074001], 
               DiskBox[28, 0.03661959095074001], 
               DiskBox[29, 0.03661959095074001], 
               DiskBox[30, 0.03661959095074001], 
               DiskBox[31, 0.03661959095074001], 
               DiskBox[32, 0.03661959095074001], 
               DiskBox[33, 0.03661959095074001], 
               DiskBox[34, 0.03661959095074001], 
               DiskBox[35, 0.03661959095074001], 
               DiskBox[36, 0.03661959095074001], 
               DiskBox[37, 0.03661959095074001], 
               DiskBox[38, 0.03661959095074001], 
               DiskBox[39, 0.03661959095074001], 
               DiskBox[40, 0.03661959095074001], 
               DiskBox[41, 0.03661959095074001], 
               DiskBox[42, 0.03661959095074001], 
               DiskBox[43, 0.03661959095074001], 
               DiskBox[44, 0.03661959095074001], 
               DiskBox[45, 0.03661959095074001], 
               DiskBox[46, 0.03661959095074001], 
               DiskBox[47, 0.03661959095074001], 
               DiskBox[48, 0.03661959095074001], 
               DiskBox[49, 0.03661959095074001], 
               DiskBox[50, 0.03661959095074001], 
               DiskBox[51, 0.03661959095074001], 
               DiskBox[52, 0.03661959095074001], 
               DiskBox[53, 0.03661959095074001], 
               DiskBox[54, 0.03661959095074001], 
               DiskBox[55, 0.03661959095074001], 
               DiskBox[56, 0.03661959095074001], 
               DiskBox[57, 0.03661959095074001], 
               DiskBox[58, 0.03661959095074001], 
               DiskBox[59, 0.03661959095074001], 
               DiskBox[60, 0.03661959095074001], 
               DiskBox[61, 0.03661959095074001], 
               DiskBox[62, 0.03661959095074001], 
               DiskBox[63, 0.03661959095074001], 
               DiskBox[64, 0.03661959095074001], 
               DiskBox[65, 0.03661959095074001], 
               DiskBox[66, 0.03661959095074001], 
               DiskBox[67, 0.03661959095074001], 
               DiskBox[68, 0.03661959095074001], 
               DiskBox[69, 0.03661959095074001], 
               DiskBox[70, 0.03661959095074001], 
               DiskBox[71, 0.03661959095074001], 
               DiskBox[72, 0.03661959095074001], 
               DiskBox[73, 0.03661959095074001], 
               DiskBox[74, 0.03661959095074001], 
               DiskBox[75, 0.03661959095074001], 
               DiskBox[76, 0.03661959095074001]}}]], 
           MouseAppearanceTag["NetworkGraphics"]], AllowKernelInitialization -> 
          False]], {
        FormatType -> TraditionalForm, FrameTicks -> None, DefaultBaseStyle -> 
         "NetworkGraphics"}], "\"Clos (3-tier)\""},
      "Labeled",
      DisplayFunction->(GridBox[{{
          ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}, {
          TagBox[
           ItemBox[
            PaneBox[
             TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline},
              BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
           "SkipImageSizeLevel"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
        AutoDelete -> False, 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
        BaselinePosition -> {2, 1}]& ),
      InterpretationFunction->(RowBox[{"Labeled", "[", 
         RowBox[{#, ",", #2, ",", "Top", ",", 
           RowBox[{"{", "}"}]}], "]"}]& )], 
     TemplateBox[{
       GraphicsBox[
        NamespaceBox["NetworkGraphics", 
         DynamicModuleBox[{Typeset`graph = HoldComplete[
             
             Graph[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
               18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
               34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
               50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64}, {
              Null, 
               SparseArray[
               Automatic, {64, 64}, 0, {
                1, {{0, 2, 5, 8, 11, 14, 17, 20, 22, 25, 29, 33, 37, 41, 45, 
                  49, 52, 55, 59, 63, 67, 71, 75, 79, 82, 85, 89, 93, 97, 101,
                   105, 109, 112, 115, 119, 123, 127, 131, 135, 139, 142, 145,
                   149, 153, 157, 161, 165, 169, 172, 175, 179, 183, 187, 191,
                   195, 199, 202, 204, 207, 210, 213, 216, 219, 222, 224}, {{
                  2}, {9}, {1}, {3}, {10}, {2}, {4}, {11}, {3}, {5}, {12}, {
                  4}, {6}, {13}, {5}, {7}, {14}, {6}, {8}, {15}, {7}, {16}, {
                  1}, {10}, {17}, {2}, {9}, {11}, {18}, {3}, {10}, {12}, {
                  19}, {4}, {11}, {13}, {20}, {5}, {12}, {14}, {21}, {6}, {
                  13}, {15}, {22}, {7}, {14}, {16}, {23}, {8}, {15}, {24}, {
                  9}, {18}, {25}, {10}, {17}, {19}, {26}, {11}, {18}, {20}, {
                  27}, {12}, {19}, {21}, {28}, {13}, {20}, {22}, {29}, {14}, {
                  21}, {23}, {30}, {15}, {22}, {24}, {31}, {16}, {23}, {32}, {
                  17}, {26}, {33}, {18}, {25}, {27}, {34}, {19}, {26}, {28}, {
                  35}, {20}, {27}, {29}, {36}, {21}, {28}, {30}, {37}, {22}, {
                  29}, {31}, {38}, {23}, {30}, {32}, {39}, {24}, {31}, {40}, {
                  25}, {34}, {41}, {26}, {33}, {35}, {42}, {27}, {34}, {36}, {
                  43}, {28}, {35}, {37}, {44}, {29}, {36}, {38}, {45}, {30}, {
                  37}, {39}, {46}, {31}, {38}, {40}, {47}, {32}, {39}, {48}, {
                  33}, {42}, {49}, {34}, {41}, {43}, {50}, {35}, {42}, {44}, {
                  51}, {36}, {43}, {45}, {52}, {37}, {44}, {46}, {53}, {38}, {
                  45}, {47}, {54}, {39}, {46}, {48}, {55}, {40}, {47}, {56}, {
                  41}, {50}, {57}, {42}, {49}, {51}, {58}, {43}, {50}, {52}, {
                  59}, {44}, {51}, {53}, {60}, {45}, {52}, {54}, {61}, {46}, {
                  53}, {55}, {62}, {47}, {54}, {56}, {63}, {48}, {55}, {64}, {
                  49}, {58}, {50}, {57}, {59}, {51}, {58}, {60}, {52}, {59}, {
                  61}, {53}, {60}, {62}, {54}, {61}, {63}, {55}, {62}, {64}, {
                  56}, {63}}}, Pattern}]}, {
              GraphLayout -> {"GridEmbedding", "Dimension" -> {8, 8}}}]]}, 
          TagBox[
           GraphicsGroupBox[
            GraphicsComplexBox[CompressedData["
1:eJx10zsKQyEUhGFJZWlhYXEKs5K4hiwhkDpbv0vIC0n4UOEy/BdhmDnH8+1x
vZ9SSuP1vfV7jstaP9f+OMMFrnCDA+5j7ZPGWjNc4Ao3OODpby598kYLXOEG
Bzz97dFc+pSNVrjBAU9/52aP5tKnbrTBAXfuuTfO0V7Nqa8acOe/e+reOEd7
Nae+akd378I9dW+co72a8+f7BDiQON4=
             "], {{
               Directive[
                Opacity[0.7], 
                Hue[0.6, 0.7, 0.5]], 
               Arrowheads[0.], {
                
                ArrowBox[{{1, 2}, {1, 9}, {2, 3}, {2, 10}, {3, 4}, {3, 11}, {
                 4, 5}, {4, 12}, {5, 6}, {5, 13}, {6, 7}, {6, 14}, {7, 8}, {7,
                  15}, {8, 16}, {9, 10}, {9, 17}, {10, 11}, {10, 18}, {11, 
                 12}, {11, 19}, {12, 13}, {12, 20}, {13, 14}, {13, 21}, {14, 
                 15}, {14, 22}, {15, 16}, {15, 23}, {16, 24}, {17, 18}, {17, 
                 25}, {18, 19}, {18, 26}, {19, 20}, {19, 27}, {20, 21}, {20, 
                 28}, {21, 22}, {21, 29}, {22, 23}, {22, 30}, {23, 24}, {23, 
                 31}, {24, 32}, {25, 26}, {25, 33}, {26, 27}, {26, 34}, {27, 
                 28}, {27, 35}, {28, 29}, {28, 36}, {29, 30}, {29, 37}, {30, 
                 31}, {30, 38}, {31, 32}, {31, 39}, {32, 40}, {33, 34}, {33, 
                 41}, {34, 35}, {34, 42}, {35, 36}, {35, 43}, {36, 37}, {36, 
                 44}, {37, 38}, {37, 45}, {38, 39}, {38, 46}, {39, 40}, {39, 
                 47}, {40, 48}, {41, 42}, {41, 49}, {42, 43}, {42, 50}, {43, 
                 44}, {43, 51}, {44, 45}, {44, 52}, {45, 46}, {45, 53}, {46, 
                 47}, {46, 54}, {47, 48}, {47, 55}, {48, 56}, {49, 50}, {49, 
                 57}, {50, 51}, {50, 58}, {51, 52}, {51, 59}, {52, 53}, {52, 
                 60}, {53, 54}, {53, 61}, {54, 55}, {54, 62}, {55, 56}, {55, 
                 63}, {56, 64}, {57, 58}, {58, 59}, {59, 60}, {60, 61}, {61, 
                 62}, {62, 63}, {63, 64}}, 0.05338164251207729]}}, {
               Directive[
                Hue[0.6, 0.2, 0.8], 
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.7]]]], 
               DiskBox[1, 0.05338164251207729], 
               DiskBox[2, 0.05338164251207729], 
               DiskBox[3, 0.05338164251207729], 
               DiskBox[4, 0.05338164251207729], 
               DiskBox[5, 0.05338164251207729], 
               DiskBox[6, 0.05338164251207729], 
               DiskBox[7, 0.05338164251207729], 
               DiskBox[8, 0.05338164251207729], 
               DiskBox[9, 0.05338164251207729], 
               DiskBox[10, 0.05338164251207729], 
               DiskBox[11, 0.05338164251207729], 
               DiskBox[12, 0.05338164251207729], 
               DiskBox[13, 0.05338164251207729], 
               DiskBox[14, 0.05338164251207729], 
               DiskBox[15, 0.05338164251207729], 
               DiskBox[16, 0.05338164251207729], 
               DiskBox[17, 0.05338164251207729], 
               DiskBox[18, 0.05338164251207729], 
               DiskBox[19, 0.05338164251207729], 
               DiskBox[20, 0.05338164251207729], 
               DiskBox[21, 0.05338164251207729], 
               DiskBox[22, 0.05338164251207729], 
               DiskBox[23, 0.05338164251207729], 
               DiskBox[24, 0.05338164251207729], 
               DiskBox[25, 0.05338164251207729], 
               DiskBox[26, 0.05338164251207729], 
               DiskBox[27, 0.05338164251207729], 
               DiskBox[28, 0.05338164251207729], 
               DiskBox[29, 0.05338164251207729], 
               DiskBox[30, 0.05338164251207729], 
               DiskBox[31, 0.05338164251207729], 
               DiskBox[32, 0.05338164251207729], 
               DiskBox[33, 0.05338164251207729], 
               DiskBox[34, 0.05338164251207729], 
               DiskBox[35, 0.05338164251207729], 
               DiskBox[36, 0.05338164251207729], 
               DiskBox[37, 0.05338164251207729], 
               DiskBox[38, 0.05338164251207729], 
               DiskBox[39, 0.05338164251207729], 
               DiskBox[40, 0.05338164251207729], 
               DiskBox[41, 0.05338164251207729], 
               DiskBox[42, 0.05338164251207729], 
               DiskBox[43, 0.05338164251207729], 
               DiskBox[44, 0.05338164251207729], 
               DiskBox[45, 0.05338164251207729], 
               DiskBox[46, 0.05338164251207729], 
               DiskBox[47, 0.05338164251207729], 
               DiskBox[48, 0.05338164251207729], 
               DiskBox[49, 0.05338164251207729], 
               DiskBox[50, 0.05338164251207729], 
               DiskBox[51, 0.05338164251207729], 
               DiskBox[52, 0.05338164251207729], 
               DiskBox[53, 0.05338164251207729], 
               DiskBox[54, 0.05338164251207729], 
               DiskBox[55, 0.05338164251207729], 
               DiskBox[56, 0.05338164251207729], 
               DiskBox[57, 0.05338164251207729], 
               DiskBox[58, 0.05338164251207729], 
               DiskBox[59, 0.05338164251207729], 
               DiskBox[60, 0.05338164251207729], 
               DiskBox[61, 0.05338164251207729], 
               DiskBox[62, 0.05338164251207729], 
               DiskBox[63, 0.05338164251207729], 
               DiskBox[64, 0.05338164251207729]}}]], 
           MouseAppearanceTag["NetworkGraphics"]], AllowKernelInitialization -> 
          False]], {
        FormatType -> TraditionalForm, FrameTicks -> None, DefaultBaseStyle -> 
         "NetworkGraphics"}], "\"8\[Times]8 Mesh\""},
      "Labeled",
      DisplayFunction->(GridBox[{{
          ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}, {
          TagBox[
           ItemBox[
            PaneBox[
             TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline},
              BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
           "SkipImageSizeLevel"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
        AutoDelete -> False, 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
        BaselinePosition -> {2, 1}]& ),
      InterpretationFunction->(RowBox[{"Labeled", "[", 
         RowBox[{#, ",", #2, ",", "Top", ",", 
           RowBox[{"{", "}"}]}], "]"}]& )]},
    {
     TemplateBox[{
       GraphicsBox[{{
          Opacity[0], 
          
          PointBox[{{-0.8428550619082302, 0.}, {3.8048069919883467`, 
           0.}}]}, {{}, {
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.6859999999999999]]], 
            RGBColor[0.982864, 0.7431472, 0.3262672]], {{
             Directive[
              EdgeForm[
               Directive[
                Thickness[Small], 
                Opacity[0.6859999999999999]]], 
              RGBColor[0.761959, 0.470832, 0.940597]], 
             
             RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
              3.28}, "RoundingRadius" -> 0]}, {
             Directive[
              EdgeForm[
               Directive[
                Thickness[Small], 
                Opacity[0.6859999999999999]]], 
              RGBColor[0.431296, 0.709773, 0.927077]], 
             
             RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
              5.28}, "RoundingRadius" -> 0]}}}, {}, {}}, {}, {
          InsetBox[
           FormBox[
            StyleBox[
             FractionBox["82", "25"], {}, StripOnInput -> False], 
            TraditionalForm], 
           Offset[{0, 4}, {1., 3.28}], 
           ImageScaled[{0.5, 0}]], 
          InsetBox[
           FormBox[
            StyleBox[
             FractionBox["132", "25"], {}, StripOnInput -> False], 
            TraditionalForm], 
           Offset[{0, 4}, {2., 5.28}], 
           ImageScaled[{0.5, 0}]]}, {}, {}, {
          StyleBox[{Antialiasing -> False, {
             Directive[
              Thickness[Tiny]], {
              LineBox[{{-0.8428550619082302, 0.}, {3.870688128186453, 0.}}]}, 
             
             StyleBox[{}, {"GraphicsLabel"}, StripOnInput -> False]}, 
            StyleBox[{{
               Directive[
                Thickness[Tiny]], 
               LineBox[{{0.5487982520029133, 0.}, 
                 
                 Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                  0.}]}], 
               LineBox[{{2.4512017479970867`, 0.}, 
                 
                 Offset[{-1.102182119232618*^-15, -6.}, {2.4512017479970867`, 
                  0.}]}], {{}, {}, {
                 LineBox[{{1.4512017479970867`, 0.}, 
                   
                   Offset[{-7.347880794884119*^-16, -4.}, {
                    1.4512017479970867`, 0.}]}], 
                 LineBox[{{1.5487982520029133`, 0.}, 
                   
                   Offset[{-7.347880794884119*^-16, -4.}, {
                    1.5487982520029133`, 0.}]}]}, {}}}, 
              StyleBox[{
                Directive[
                 Thickness[Tiny]], 
                Directive[
                 Thickness[Tiny]], 
                StyleBox[{
                  InsetBox[
                   FormBox["\"Clos\"", TraditionalForm], 
                   Offset[{0, -2}, {1., 0.}], 
                   NCache[
                    ImageScaled[{
                    Rational[1, 2], 1}], 
                    ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
                  InsetBox[
                   FormBox["\"Mesh\"", TraditionalForm], 
                   Offset[{0, -2}, {2., 0.}], 
                   NCache[
                    ImageScaled[{
                    Rational[1, 2], 1}], 
                    ImageScaled[{0.5, 1}]], Automatic, {1, 0}]}, {{}}, 
                 StripOnInput -> False]}, {"GraphicsLabel"}, StripOnInput -> 
               False]}, {"GraphicsTicks"}, StripOnInput -> False]}, {
           "GraphicsAxes"}, StripOnInput -> False]}}, {
        DisplayFunction -> Identity, AspectRatio -> 
         NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, True}, 
         AxesLabel -> {None, None}, AxesOrigin -> {-0.8428550619082302, 0.}, 
         CoordinatesToolOptions -> {"DisplayFunction" -> ({
             Identity[
              Part[#, 1]], 
             Identity[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             Identity[
              Part[#, 1]], 
             Identity[
              Part[#, 2]]}& )}, FrameLabel -> {{None, None}, {None, None}}, 
         FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
         GridLines -> {None, None}, GridLinesStyle -> Directive[
           GrayLevel[0.5, 0.4]], PlotLabel -> 
         FormBox["\"Average hop count\"", TraditionalForm], 
         PlotRange -> {{All, All}, {All, All}}, PlotRangePadding -> {{
            Scaled[0.02], 
            Scaled[0.02]}, {
            Scaled[0.02], 
            Scaled[0.05]}}, Ticks -> {None, Automatic}}], "\"\""},
      "Labeled",
      DisplayFunction->(GridBox[{{
          ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}, {
          TagBox[
           ItemBox[
            PaneBox[
             TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline},
              BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
           "SkipImageSizeLevel"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
        AutoDelete -> False, 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
        BaselinePosition -> {2, 1}]& ),
      InterpretationFunction->(RowBox[{"Labeled", "[", 
         RowBox[{#, ",", #2, ",", "Top", ",", 
           RowBox[{"{", "}"}]}], "]"}]& )], 
     TemplateBox[{
       GraphicsBox[{{
          Opacity[0], 
          
          PointBox[{{-0.8428550619082302, 0.}, {3.8048069919883467`, 
           0.}}]}, {{}, {
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.6859999999999999]]], 
            RGBColor[0.982864, 0.7431472, 0.3262672]], {{
             Directive[
              EdgeForm[
               Directive[
                Thickness[Small], 
                Opacity[0.6859999999999999]]], 
              RGBColor[0.761959, 0.470832, 0.940597]], 
             
             RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
              6.923689900271566}, "RoundingRadius" -> 0]}, {
             Directive[
              EdgeForm[
               Directive[
                Thickness[Small], 
                Opacity[0.6859999999999999]]], 
              RGBColor[0.431296, 0.709773, 0.927077]], 
             
             RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
              26.10116713367319}, "RoundingRadius" -> 0]}}}, {}, {}}, {}, {
          InsetBox[
           FormBox[
            StyleBox[
             FractionBox[
              RowBox[{"log", "(", "8388608", ")"}], 
              RowBox[{"log", "(", "10", ")"}]], {}, StripOnInput -> False], 
            TraditionalForm], 
           Offset[{0, 4}, {1., 6.923689900271566}], 
           ImageScaled[{0.5, 0}]], 
          InsetBox[
           FormBox[
            StyleBox[
             FractionBox[
              RowBox[{"log", "(", "126231322912498539682594816", ")"}], 
              RowBox[{"log", "(", "10", ")"}]], {}, StripOnInput -> False], 
            TraditionalForm], 
           Offset[{0, 4}, {2., 26.10116713367319}], 
           ImageScaled[{0.5, 0}]]}, {}, {}, {
          StyleBox[{Antialiasing -> False, {
             Directive[
              Thickness[Tiny]], {
              LineBox[{{-0.8428550619082302, 0.}, {3.870688128186453, 0.}}]}, 
             
             StyleBox[{}, {"GraphicsLabel"}, StripOnInput -> False]}, 
            StyleBox[{{
               Directive[
                Thickness[Tiny]], 
               LineBox[{{0.5487982520029133, 0.}, 
                 
                 Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                  0.}]}], 
               LineBox[{{2.4512017479970867`, 0.}, 
                 
                 Offset[{-1.102182119232618*^-15, -6.}, {2.4512017479970867`, 
                  0.}]}], {{}, {}, {
                 LineBox[{{1.4512017479970867`, 0.}, 
                   
                   Offset[{-7.347880794884119*^-16, -4.}, {
                    1.4512017479970867`, 0.}]}], 
                 LineBox[{{1.5487982520029133`, 0.}, 
                   
                   Offset[{-7.347880794884119*^-16, -4.}, {
                    1.5487982520029133`, 0.}]}]}, {}}}, 
              StyleBox[{
                Directive[
                 Thickness[Tiny]], 
                Directive[
                 Thickness[Tiny]], 
                StyleBox[{
                  InsetBox[
                   FormBox["\"Clos\"", TraditionalForm], 
                   Offset[{0, -2}, {1., 0.}], 
                   NCache[
                    ImageScaled[{
                    Rational[1, 2], 1}], 
                    ImageScaled[{0.5, 1}]], Automatic, {1, 0}], 
                  InsetBox[
                   FormBox["\"Mesh\"", TraditionalForm], 
                   Offset[{0, -2}, {2., 0.}], 
                   NCache[
                    ImageScaled[{
                    Rational[1, 2], 1}], 
                    ImageScaled[{0.5, 1}]], Automatic, {1, 0}]}, {{}}, 
                 StripOnInput -> False]}, {"GraphicsLabel"}, StripOnInput -> 
               False]}, {"GraphicsTicks"}, StripOnInput -> False]}, {
           "GraphicsAxes"}, StripOnInput -> False]}}, {
        DisplayFunction -> Identity, AspectRatio -> 
         NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, True}, 
         AxesLabel -> {None, None}, AxesOrigin -> {-0.8428550619082302, 0.}, 
         CoordinatesToolOptions -> {"DisplayFunction" -> ({
             Identity[
              Part[#, 1]], 
             Identity[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             Identity[
              Part[#, 1]], 
             Identity[
              Part[#, 2]]}& )}, FrameLabel -> {{None, None}, {None, None}}, 
         FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
         GridLines -> {None, None}, GridLinesStyle -> Directive[
           GrayLevel[0.5, 0.4]], PlotLabel -> 
         FormBox["\"log\:2081\:2080 spanning trees\"", TraditionalForm], 
         PlotRange -> {{All, All}, {All, All}}, PlotRangePadding -> {{
            Scaled[0.02], 
            Scaled[0.02]}, {
            Scaled[0.02], 
            Scaled[0.05]}}, Ticks -> {None, Automatic}}], "\"\""},
      "Labeled",
      DisplayFunction->(GridBox[{{
          ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}, {
          TagBox[
           ItemBox[
            PaneBox[
             TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline},
              BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
           "SkipImageSizeLevel"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
        AutoDelete -> False, 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
        BaselinePosition -> {2, 1}]& ),
      InterpretationFunction->(RowBox[{"Labeled", "[", 
         RowBox[{#, ",", #2, ",", "Top", ",", 
           RowBox[{"{", "}"}]}], "]"}]& )]},
    {
     TemplateBox[{
       TemplateBox[{
         GraphicsBox[{{}, 
           InterpretationBox[{
             TagBox[{{{}, {}, 
                TagBox[{
                  Hue[0.67, 0.6, 0.6], 
                  Directive[
                   PointSize[
                    NCache[
                    Rational[7, 360], 0.019444444444444445`]], 
                   RGBColor[0.368417, 0.506779, 0.709798], 
                   AbsoluteThickness[2]], 
                  
                  LineBox[{{0., 0.31534156157350673`}, {2., 
                   5.228555504280073*^-16}, {4., 4.857225732732778*^-17}, {6.,
                    1.1121711914920297`*^-16}, {8., 
                   1.1102230246251565`*^-16}, {
                   10., -4.440892098500626*^-16}, {
                   12., -4.440892098500626*^-16}, {
                   14., -2.2206426445790147`*^-16}, {
                   16., -2.3866229354695854`*^-16}, {
                   18., -1.4576070212346316`*^-15}, {
                   20., -3.5811247651565134`*^-16}}]}, 
                 Annotation[#, "Charting`Private`Tag#1"]& ], 
                TagBox[{
                  Hue[0.9060679774997897, 0.6, 0.6], 
                  Directive[
                   PointSize[
                    NCache[
                    Rational[7, 360], 0.019444444444444445`]], 
                   RGBColor[0.880722, 0.611041, 0.142051], 
                   AbsoluteThickness[2]], 
                  
                  LineBox[{{0., 0.15224093497742514`}, {2., 
                   0.14899180741036588`}, {4., 0.12796182573108572`}, {6., 
                   0.12710172069365078`}, {8., 0.11575705552355374`}, {10., 
                   0.12670185218637914`}, {12., 0.10342553678399065`}, {14., 
                   0.09647505889844177}, {16., 0.09807967233920675}, {18., 
                   2.4607138930590596`*^-16}, {20., 0.07793444256084969}}]}, 
                 Annotation[#, "Charting`Private`Tag#2"]& ]}}, {
              "WolframDynamicHighlight", <|
               "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
             StyleBox[
              DynamicBox[
               (Charting`HighlightActionBox["DynamicHighlight", {}, 
                Slot["HighlightElements"], 
                Slot["LayoutOptions"], 
                Slot["Meta"], 
                Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
                   Annotation[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[
                    Rational[7, 360]], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], 
                    
                    Line[{{0., 0.31534156157350673`}, {2., 
                    5.228555504280073*^-16}, {4., 4.857225732732778*^-17}, {
                    6., 1.1121711914920297`*^-16}, {8., 
                    1.1102230246251565`*^-16}, {
                    10., -4.440892098500626*^-16}, {
                    12., -4.440892098500626*^-16}, {
                    14., -2.2206426445790147`*^-16}, {
                    16., -2.3866229354695854`*^-16}, {
                    18., -1.4576070212346316`*^-15}, {
                    20., -3.5811247651565134`*^-16}}]}, 
                    "Charting`Private`Tag#1"], 
                   Annotation[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[
                    Rational[7, 360]], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], 
                    
                    Line[{{0., 0.15224093497742514`}, {2., 
                    0.14899180741036588`}, {4., 0.12796182573108572`}, {6., 
                    0.12710172069365078`}, {8., 0.11575705552355374`}, {10., 
                    0.12670185218637914`}, {12., 0.10342553678399065`}, {14., 
                    0.09647505889844177}, {16., 0.09807967233920675}, {18., 
                    2.4607138930590596`*^-16}, {20., 0.07793444256084969}}]}, 
                    "Charting`Private`Tag#2"]}}, <|
                 "HighlightElements" -> <|
                   "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
                  "LayoutOptions" -> <|
                   "PanelPlotLayout" -> <||>, 
                    "PlotRange" -> {{0, 20.}, {-1.4576070212346316`*^-15, 
                    0.31534156157350673`}}, 
                    "Frame" -> {{True, True}, {True, True}}, 
                    "AxesOrigin" -> {0, 0}, 
                    "ImageSize" -> {360, 360/GoldenRatio}, 
                    "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
                    GoldenRatio^(-1), "DefaultStyle" -> {
                    Directive[
                    PointSize[
                    Rational[7, 360]], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], 
                    Directive[
                    PointSize[
                    Rational[7, 360]], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]]}, 
                    "HighlightLabelingFunctions" -> <|
                    "CoordinatesToolOptions" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), 
                    "ScalingFunctions" -> {{Identity, Identity}, {
                    Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
                    False|>, 
                  "Meta" -> <|
                   "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
                    "Function" -> ListLinePlot, "GroupHighlight" -> 
                    False|>|>]]& )[<|
                "HighlightElements" -> <|
                  "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
                 "LayoutOptions" -> <|
                  "PanelPlotLayout" -> <||>, 
                   "PlotRange" -> {{0, 20.}, {-1.4576070212346316`*^-15, 
                    0.31534156157350673`}}, 
                   "Frame" -> {{True, True}, {True, True}}, 
                   "AxesOrigin" -> {0, 0}, 
                   "ImageSize" -> {360, 360/GoldenRatio}, 
                   "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
                   GoldenRatio^(-1), "DefaultStyle" -> {
                    Directive[
                    PointSize[
                    Rational[7, 360]], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], 
                    Directive[
                    PointSize[
                    Rational[7, 360]], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]]}, 
                   "HighlightLabelingFunctions" -> <|
                    "CoordinatesToolOptions" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), 
                    "ScalingFunctions" -> {{Identity, Identity}, {
                    Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
                   False|>, 
                 "Meta" -> <|
                  "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
                   "Function" -> ListLinePlot, "GroupHighlight" -> 
                   False|>|>]], Selectable -> False]}, 
            Annotation[{{{}, {}, 
               Annotation[{
                 Hue[0.67, 0.6, 0.6], 
                 Directive[
                  PointSize[
                   Rational[7, 360]], 
                  RGBColor[0.368417, 0.506779, 0.709798], 
                  AbsoluteThickness[2]], 
                 
                 Line[{{0., 0.31534156157350673`}, {2., 
                  5.228555504280073*^-16}, {4., 4.857225732732778*^-17}, {6., 
                  1.1121711914920297`*^-16}, {8., 1.1102230246251565`*^-16}, {
                  10., -4.440892098500626*^-16}, {
                  12., -4.440892098500626*^-16}, {
                  14., -2.2206426445790147`*^-16}, {
                  16., -2.3866229354695854`*^-16}, {
                  18., -1.4576070212346316`*^-15}, {
                  20., -3.5811247651565134`*^-16}}]}, 
                "Charting`Private`Tag#1"], 
               Annotation[{
                 Hue[0.9060679774997897, 0.6, 0.6], 
                 Directive[
                  PointSize[
                   Rational[7, 360]], 
                  RGBColor[0.880722, 0.611041, 0.142051], 
                  AbsoluteThickness[2]], 
                 
                 Line[{{0., 0.15224093497742514`}, {2., 
                  0.14899180741036588`}, {4., 0.12796182573108572`}, {6., 
                  0.12710172069365078`}, {8., 0.11575705552355374`}, {10., 
                  0.12670185218637914`}, {12., 0.10342553678399065`}, {14., 
                  0.09647505889844177}, {16., 0.09807967233920675}, {18., 
                  2.4607138930590596`*^-16}, {20., 0.07793444256084969}}]}, 
                "Charting`Private`Tag#2"]}}, <|
             "HighlightElements" -> <|
               "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
              "LayoutOptions" -> <|
               "PanelPlotLayout" -> <||>, 
                "PlotRange" -> {{0, 20.}, {-1.4576070212346316`*^-15, 
                  0.31534156157350673`}}, 
                "Frame" -> {{True, True}, {True, True}}, 
                "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio},
                 "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
                GoldenRatio^(-1), "DefaultStyle" -> {
                  Directive[
                   PointSize[
                    Rational[7, 360]], 
                   RGBColor[0.880722, 0.611041, 0.142051], 
                   AbsoluteThickness[2]], 
                  Directive[
                   PointSize[
                    Rational[7, 360]], 
                   RGBColor[0.368417, 0.506779, 0.709798], 
                   AbsoluteThickness[2]]}, 
                "HighlightLabelingFunctions" -> <|
                 "CoordinatesToolOptions" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), 
                  "ScalingFunctions" -> {{Identity, Identity}, {
                    Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
                False|>, 
              "Meta" -> <|
               "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
                "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>, 
             "DynamicHighlight"]], {{}, {}}}, {
          DisplayFunction -> Identity, DisplayFunction -> Identity, 
           DisplayFunction -> Identity, AspectRatio -> 
           NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True},
            AxesLabel -> {
             FormBox[
              TagBox["\"links removed\"", HoldForm], TraditionalForm], 
             FormBox[
              TagBox["\"\[Lambda]\:2082\"", HoldForm], TraditionalForm]}, 
           AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
           Frame -> {{True, True}, {True, True}}, 
           FrameLabel -> {{None, None}, {None, None}}, 
           FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
           GridLines -> {None, None}, GridLinesStyle -> Directive[
             GrayLevel[0.5, 0.4]], 
           Method -> {
            "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
             Automatic, 
             "DefaultGraphicsInteraction" -> {
              "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
               "Effects" -> {
                "Highlight" -> {"ratio" -> 2}, 
                 "HighlightPoint" -> {"ratio" -> 2}, 
                 "Droplines" -> {
                  "freeformCursorMode" -> True, 
                   "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
             "DefaultMeshStyle" -> AbsolutePointSize[6], "DefaultPlotStyle" -> {
               Directive[
                RGBColor[0.368417, 0.506779, 0.709798], 
                AbsoluteThickness[2]], 
               Directive[
                RGBColor[0.880722, 0.611041, 0.142051], 
                AbsoluteThickness[2]], 
               Directive[
                RGBColor[0.560181, 0.691569, 0.194885], 
                AbsoluteThickness[2]], 
               Directive[
                RGBColor[0.922526, 0.385626, 0.209179], 
                AbsoluteThickness[2]], 
               Directive[
                RGBColor[0.528488, 0.470624, 0.701351], 
                AbsoluteThickness[2]], 
               Directive[
                RGBColor[0.772079, 0.431554, 0.102387], 
                AbsoluteThickness[2]], 
               Directive[
                RGBColor[0.363898, 0.618501, 0.782349], 
                AbsoluteThickness[2]], 
               Directive[
                RGBColor[1, 0.75, 0], 
                AbsoluteThickness[2]], 
               Directive[
                RGBColor[0.647624, 0.37816, 0.614037], 
                AbsoluteThickness[2]], 
               Directive[
                RGBColor[0.571589, 0.586483, 0.], 
                AbsoluteThickness[2]], 
               Directive[
                RGBColor[0.915, 0.3325, 0.2125], 
                AbsoluteThickness[2]], 
               Directive[
                RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
                AbsoluteThickness[2]], 
               Directive[
                RGBColor[
                0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
                AbsoluteThickness[2]], 
               Directive[
                RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
                AbsoluteThickness[2]], 
               Directive[
                RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
                AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
             "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> True, 
             "IncludeHighlighting" -> "CurrentSet", "HighlightStyle" -> 
             Automatic, "OptimizePlotMarkers" -> True, 
             "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                 Identity[
                  Part[#, 1]], 
                 Identity[
                  Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                 Identity[
                  Part[#, 1]], 
                 Identity[
                  Part[#, 2]]}& )}}, PlotLabel -> 
           FormBox["\"Algebraic connectivity vs failures\"", TraditionalForm],
            PlotRange -> {{0, 20.}, {-1.4576070212346316`*^-15, 
             0.31534156157350673`}}, PlotRangeClipping -> True, 
           PlotRangePadding -> {{
              Scaled[0.02], 
              Scaled[0.02]}, {
              Scaled[0.05], 
              Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
         FormBox[
          FormBox[
           
           TemplateBox[{"\"Clos\"", "\"Mesh\""}, "LineLegend", 
            DisplayFunction -> (FormBox[
              StyleBox[
               StyleBox[
                PaneBox[
                 TagBox[
                  GridBox[{{
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #2}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                   False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
                  "Grid"], Alignment -> Left, AppearanceElements -> None, 
                 ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
                 "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
               FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
               False], TraditionalForm]& ), 
            InterpretationFunction :> (RowBox[{"LineLegend", "[", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["7", "360"], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                    RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}], 
                    ",", 
                    RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["7", "360"], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                    RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}]}], 
                   "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{#, ",", #2}], "}"}], ",", 
                 RowBox[{"LegendMarkers", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], 
                 ",", 
                 RowBox[{"Joined", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"True", ",", "True"}], "}"}]}], ",", 
                 RowBox[{"LabelStyle", "\[Rule]", 
                   RowBox[{"{", "}"}]}], ",", 
                 RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], 
               "]"}]& ), Editable -> True], TraditionalForm], 
          TraditionalForm]}, "Legended", DisplayFunction -> (GridBox[{{
            TagBox[
             ItemBox[
              PaneBox[
               TagBox[#, "SkipImageSizeLevel"], 
               Alignment -> {Center, Baseline}, BaselinePosition -> Baseline],
               DefaultBaseStyle -> "Labeled"], "SkipImageSizeLevel"], 
            ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}},
           AutoDelete -> False, GridBoxItemSize -> Automatic, 
          BaselinePosition -> {1, 1}]& ), 
        InterpretationFunction -> (RowBox[{"Legended", "[", 
           RowBox[{#, ",", 
             RowBox[{"Placed", "[", 
               RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& ), Editable -> 
        True], "\"\""},
      "Labeled",
      DisplayFunction->(GridBox[{{
          ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}, {
          TagBox[
           ItemBox[
            PaneBox[
             TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline},
              BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
           "SkipImageSizeLevel"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
        AutoDelete -> False, 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
        BaselinePosition -> {2, 1}]& ),
      InterpretationFunction->(RowBox[{"Labeled", "[", 
         RowBox[{#, ",", #2, ",", "Top", ",", 
           RowBox[{"{", "}"}]}], "]"}]& )], ""}
   },
   AutoDelete->False,
   GridBoxBackground->{"Columns" -> {{None}}, "Rows" -> {
       RGBColor[0.975, 0.975, 0.975]}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{3}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.9627939720586557`*^9, 3.9627939844643583`*^9}, 
   3.962794023480502*^9, 3.962794083265913*^9, 3.962794764281806*^9, {
   3.962795863555853*^9, 3.962795867937158*^9}, 3.96279939530335*^9, {
   3.9628047026348886`*^9, 3.962804761461073*^9}, 3.962804850400918*^9, 
   3.9628048936194572`*^9, 3.962804966096387*^9, {3.962805113254821*^9, 
   3.9628051270805817`*^9}, 3.9628053538358803`*^9, {3.962805439630978*^9, 
   3.96280546428653*^9}, {3.962806973449379*^9, 3.962806975591629*^9}, 
   3.962875635094102*^9, 3.962876267672038*^9, 3.9628971559732323`*^9},
 CellLabel->
  "Out[5498]=",ExpressionUUID->"14949904-a09d-4a48-adce-2677ed7a767d"]
}, Open  ]]
}, Open  ]],

Cell["\<\
The Mesh Topology and the Daedaelus Vision: A Paradigm of Inherent Robustness\
\
\>", "Subtitle",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898307534945*^9}, {
   3.962898368042245*^9, 3.962898369635974*^9}, {3.962898493181312*^9, 
   3.9628984941794252`*^9}},
 FormatType->"TextForm",
 FontSize->18,
 Background->None,ExpressionUUID->"d27f31a2-08e7-41fa-b6ae-5c449a460945"],

Cell[CellGroupData[{

Cell[TextData[{
 "In stark contrast to the engineered hierarchy of the Clos architecture \
stands the mesh topology, a design philosophy rooted in decentralization and \
inherent robustness. A mesh network is a topology in which infrastructure \
nodes connect directly, dynamically, and non-hierarchically to as many other \
nodes as possible, forming a web-like structure. This design lacks any single \
point of dependency, allowing every node to participate in relaying \
information. The result is a system with intrinsic fault tolerance; because \
multiple paths typically exist between any two nodes, the failure of a single \
node or link does not necessarily disrupt communication. These networks can \
be classified as either a ",
 StyleBox["full mesh",
  FontSlant->"Italic"],
 ", where every node is connected to every other node, or a partial mesh, \
where nodes are highly interconnected but not necessarily to all others. The \
cost and complexity of a full mesh, where the number of links grows \
quadratically according to the formula ",
 StyleBox["N(N\[Minus]1)/2",
  FontSlant->"Italic"],
 " for ",
 StyleBox["N",
  FontSlant->"Italic"],
 " nodes, makes highly-connected partial meshes the more practical \
implementation for most large-scale systems. \[NonBreakingSpace] \n\nWhile \
generic mesh networks have been used in various contexts, particularly \
wireless networking, the company Daedaelus has proposed a radical \
re-imagining of the mesh, not just as a topology but as the foundation for a \
new class of \[OpenCurlyDoubleQuote]transaction \
fabric\[CloseCurlyDoubleQuote]. The Daedaelus vision is born from a critique \
of the fundamental limitations of conventional networking. Their research \
identifies the \[OpenCurlyDoubleQuote]insidious non-determinism\
\[CloseCurlyDoubleQuote] of today\[CloseCurlyQuote]s networks, where fallible \
links lead to dropped packets, timeouts, and application-level retries. These \
ad-hoc recovery mechanisms make strong consistency guarantees like \
exactly-once semantics impossible, leading to unbounded tail latencies, retry \
storms, and a significant rate of catastrophic transaction failures. \
\[NonBreakingSpace] \n\nThe Daedaelus proposition is to build an \
\[OpenCurlyDoubleQuote]unbreakable network\[CloseCurlyDoubleQuote] that \
provides deterministic guarantees of reliability, moving beyond the \
probabilistic, best-effort nature of traditional IP networking. This is \
achieved through a novel protocol stack, inspired by quantum information \
theory and multiway systems, implemented directly in FPGAs on each node. Key \
components include a reversible, distributed atomic Ethernet protocol and the \
use of multicast consensus to ensure data integrity and fault tolerance. \
Physically, the architecture is realized as a mesh of chiplet servers with \
direct, switchless, peer-to-peer connections over high-speed links like \
Compute Express Link (CXL). This design claims to eliminate dropped packets \
entirely. If a link fails, traffic is immediately and locally re-routed \
around the fault. Crucially, the protocol ensures that both the sender and \
receiver have immediate, shared knowledge about whether a packet was \
delivered successfully or not, eliminating the ambiguity and delays \
associated with timeouts and heartbeats. \[NonBreakingSpace] \n\nThis \
represents a profound philosophical shift from probabilistic to deterministic \
reliability. A Clos network uses protocols like ECMP to ",
 StyleBox["probabilistically",
  FontSlant->"Italic"],
 " balance traffic over a few redundant, pre-defined paths, reacting to \
failures after they occur. The Daedaelus approach, by contrast, aims to \
create a fabric where reliability is a deterministic, verifiable property of \
the system itself. The language \
used\[LongDash]\[CloseCurlyDoubleQuote]atomic,\[CloseCurlyDoubleQuote] \
\[OpenCurlyDoubleQuote]reversible,\[CloseCurlyDoubleQuote] \
\[OpenCurlyDoubleQuote]consensus\[CloseCurlyDoubleQuote]\[LongDash]is \
borrowed from the fields of distributed databases and theoretical physics, \
signaling an ambition to provide network-level guarantees analogous to the \
ACID (Atomicity, Consistency, Isolation, Durability) properties of a \
transactional database. The quantitative analysis of a generic mesh\
\[CloseCurlyQuote]s structure in this report\[LongDash]its high path \
diversity and resilience\[LongDash]should therefore be viewed as the physical \
substrate upon which these advanced protocol-level guarantees are built. The \
topology provides the inherent robustness that the protocol then formalizes \
into a deterministic transaction fabric. \[NonBreakingSpace] "
}], "Chapter",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898338257278*^9}, {
   3.962898381402219*^9, 3.96289842166496*^9}, {3.96289849829926*^9, 
   3.962898548521832*^9}},
 FormatType->"TextForm",
 FontSize->14,
 Background->None,ExpressionUUID->"dc0174c3-74c4-4f63-a215-9b65a86ae7b5"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"BeginPackage", "[", "\"\<DaedaelusMesh`\>\"", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"generateDaedaelusLattice", "::", "usage"}], "MessageName"], "=", 
   "\"\<generateDaedaelusLattice[rows, cols] -> \
<|\\\"Graph\\\",\\\"Coordinates\\\"|>, the 8-valent N2N ground-plane.\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"buildSpanningTree", "::", "usage"}], "MessageName"], "=", 
   "\"\<buildSpanningTree[g, root] -> breadth-first spanning tree rooted at \
root.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"healTree", "::", "usage"}], "MessageName"], "=", 
   "\"\<healTree[tree, failedNodes, failedLinks, ground] -> repaired \
tree.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"visualizeDaedaelusLattice", "::", "usage"}], "MessageName"], 
   "=", "\"\<visualizeDaedaelusLattice[ground, tree, root, failedNodes, \
failedLinks, opts] renders mesh + TRAPH with visual cues.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"analyzeClosVsMesh", "::", "usage"}], "MessageName"], "=", 
   "\"\<analyzeClosVsMesh[n] compares an n-host mesh with a 2-tier \
Clos.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"example1", "::", "usage"}], "MessageName"], "=", 
   "\"\<example1[] draws a 5x8 lattice, fails node {3,4}, and shows the \
healed tree.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"example2", "::", "usage"}], "MessageName"], "=", 
   "\"\<example2[] runs analyzeClosVsMesh[64] and displays the comparison \
grid.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Begin", "[", "\"\<`Private`\>\"", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Unprotect", "@@", 
   RowBox[{"{", 
    RowBox[{
    "generateDaedaelusLattice", ",", "buildSpanningTree", ",", "healTree", 
     ",", "visualizeDaedaelusLattice", ",", "analyzeClosVsMesh"}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"ClearAll", "@@", 
   RowBox[{"{", 
    RowBox[{
    "generateDaedaelusLattice", ",", "buildSpanningTree", ",", "healTree", 
     ",", "visualizeDaedaelusLattice", ",", "analyzeClosVsMesh"}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"generateDaedaelusLattice", "[", 
    RowBox[{
     RowBox[{"rows_Integer", "?", "Positive"}], ",", 
     RowBox[{"cols_Integer", "?", "Positive"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"nodes", ",", "edges", ",", "coords"}], "}"}], ",", 
     RowBox[{
      RowBox[{"nodes", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"i", ",", "j"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "rows"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"j", ",", "cols"}], "}"}]}], "]"}], ",", "1"}], "]"}]}], 
      ";", 
      RowBox[{"edges", "=", 
       RowBox[{"Union", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"DeleteCases", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"j", "<", "cols"}], ",", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}], "\[TwoWayRule]", 
                   RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"j", "+", "1"}]}], "}"}]}], ",", "Nothing"}], 
                 "]"}], ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"j", ">", "1"}], ",", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}], "\[TwoWayRule]", 
                   RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"j", "-", "1"}]}], "}"}]}], ",", "Nothing"}], 
                 "]"}], ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"i", "<", "rows"}], ",", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}], "\[TwoWayRule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"i", "+", "1"}], ",", "j"}], "}"}]}], ",", 
                  "Nothing"}], "]"}], ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"i", ">", "1"}], ",", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}], "\[TwoWayRule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"i", "-", "1"}], ",", "j"}], "}"}]}], ",", 
                  "Nothing"}], "]"}], ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"i", "<", "rows"}], "&&", 
                   RowBox[{"j", "<", "cols"}]}], ",", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}], "\[TwoWayRule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"i", "+", "1"}], ",", 
                    RowBox[{"j", "+", "1"}]}], "}"}]}], ",", "Nothing"}], 
                 "]"}], ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"i", "<", "rows"}], "&&", 
                   RowBox[{"j", ">", "1"}]}], ",", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}], "\[TwoWayRule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"i", "+", "1"}], ",", 
                    RowBox[{"j", "-", "1"}]}], "}"}]}], ",", "Nothing"}], 
                 "]"}], ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"i", ">", "1"}], "&&", 
                   RowBox[{"j", "<", "cols"}]}], ",", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}], "\[TwoWayRule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"i", "-", "1"}], ",", 
                    RowBox[{"j", "+", "1"}]}], "}"}]}], ",", "Nothing"}], 
                 "]"}], ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"i", ">", "1"}], "&&", 
                   RowBox[{"j", ">", "1"}]}], ",", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}], "\[TwoWayRule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"i", "-", "1"}], ",", 
                    RowBox[{"j", "-", "1"}]}], "}"}]}], ",", "Nothing"}], 
                 "]"}]}], "}"}], ",", "Nothing"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "rows"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"j", ",", "cols"}], "}"}]}], "]"}], ",", "2"}], "]"}], 
        "]"}]}], ";", 
      RowBox[{"coords", "=", 
       RowBox[{"AssociationThread", "[", 
        RowBox[{"nodes", "\[Rule]", 
         RowBox[{"Reverse", "/@", "nodes"}]}], "]"}]}], ";", 
      RowBox[{"Association", "[", 
       RowBox[{
        RowBox[{"\"\<Graph\>\"", "\[Rule]", 
         RowBox[{"Graph", "[", 
          RowBox[{"nodes", ",", "edges", ",", 
           RowBox[{"VertexCoordinates", "\[Rule]", "coords"}], ",", 
           RowBox[{"GraphLayout", "\[Rule]", "\"\<None\>\""}]}], "]"}]}], ",", 
        RowBox[{"\"\<Coordinates\>\"", "\[Rule]", "coords"}]}], "]"}]}]}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"buildSpanningTree", "[", 
     RowBox[{"g_Graph", ",", "root_"}], "]"}], "/;", 
    RowBox[{"VertexQ", "[", 
     RowBox[{"g", ",", "root"}], "]"}]}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"visited", "=", 
        RowBox[{"{", "root", "}"}]}], ",", 
       RowBox[{"frontier", "=", 
        RowBox[{"{", "root", "}"}]}], ",", "next", ",", 
       RowBox[{"edges", "=", 
        RowBox[{"{", "}"}]}], ",", "nbr"}], "}"}], ",", 
     RowBox[{
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{"frontier", "=!=", 
         RowBox[{"{", "}"}]}], ",", 
        RowBox[{
         RowBox[{"next", "=", 
          RowBox[{"{", "}"}]}], ";", 
         RowBox[{"Do", "[", 
          RowBox[{
           RowBox[{"Do", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"nbr", "=", "n"}], ";", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"!", 
                 RowBox[{"MemberQ", "[", 
                  RowBox[{"visited", ",", "nbr"}], "]"}]}], ",", 
                RowBox[{
                 RowBox[{"AppendTo", "[", 
                  RowBox[{"edges", ",", 
                   RowBox[{"v", "\[TwoWayRule]", "nbr"}]}], "]"}], ";", 
                 RowBox[{"AppendTo", "[", 
                  RowBox[{"next", ",", "nbr"}], "]"}], ";", 
                 RowBox[{"AppendTo", "[", 
                  RowBox[{"visited", ",", "nbr"}], "]"}], ";"}]}], "]"}]}], 
             ",", 
             RowBox[{"{", 
              RowBox[{"n", ",", 
               RowBox[{"AdjacencyList", "[", 
                RowBox[{"g", ",", "v"}], "]"}]}], "}"}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"v", ",", "frontier"}], "}"}]}], "]"}], ";", 
         RowBox[{"frontier", "=", 
          RowBox[{"DeleteDuplicates", "[", "next", "]"}]}], ";"}]}], "]"}], 
      ";", 
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"VertexList", "[", "g", "]"}], ",", "edges", ",", 
        RowBox[{"VertexCoordinates", "\[Rule]", 
         RowBox[{"GraphEmbedding", "[", "g", "]"}]}], ",", 
        RowBox[{"DirectedEdges", "\[Rule]", "False"}]}], "]"}]}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"healTree", "[", 
    RowBox[{
    "tree_Graph", ",", "failedNodes_List", ",", "failedLinks_List", ",", 
     "ground_Graph"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "live", ",", "root", ",", "comps", ",", "main", ",", "orphans", ",", 
       "repairs"}], "}"}], ",", 
     RowBox[{
      RowBox[{"live", "=", 
       RowBox[{"EdgeDelete", "[", 
        RowBox[{
         RowBox[{"VertexDelete", "[", 
          RowBox[{"tree", ",", "failedNodes"}], "]"}], ",", "failedLinks"}], 
        "]"}]}], ";", 
      RowBox[{"root", "=", 
       RowBox[{"First", "[", 
        RowBox[{"VertexList", "[", "tree", "]"}], "]"}]}], ";", 
      RowBox[{"comps", "=", 
       RowBox[{"ConnectedComponents", "[", "live", "]"}]}], ";", 
      RowBox[{"main", "=", 
       RowBox[{"FirstCase", "[", 
        RowBox[{"comps", ",", 
         RowBox[{
          RowBox[{"comp_", "/;", 
           RowBox[{"MemberQ", "[", 
            RowBox[{"comp", ",", "root"}], "]"}]}], "\[RuleDelayed]", 
          "comp"}], ",", 
         RowBox[{"{", "}"}]}], "]"}]}], ";", 
      RowBox[{"orphans", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"comps", ",", "1"}], "]"}], ",", "main"}], "]"}]}], ";", 
      RowBox[{"repairs", "=", 
       RowBox[{
        RowBox[{"Reap", "[", 
         RowBox[{"Do", "[", 
          RowBox[{
           RowBox[{"Module", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"nb", ",", "parent"}], "}"}], ",", 
             RowBox[{
              RowBox[{"nb", "=", 
               RowBox[{"Complement", "[", 
                RowBox[{
                 RowBox[{"AdjacencyList", "[", 
                  RowBox[{"ground", ",", "v"}], "]"}], ",", "failedNodes"}], 
                "]"}]}], ";", 
              RowBox[{"parent", "=", 
               RowBox[{"FirstCase", "[", 
                RowBox[{"nb", ",", 
                 RowBox[{
                  RowBox[{"x_", "/;", 
                   RowBox[{"MemberQ", "[", 
                    RowBox[{"main", ",", "x"}], "]"}]}], "\[RuleDelayed]", 
                  "x"}], ",", 
                 RowBox[{"Missing", "[", "]"}]}], "]"}]}], ";", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"parent", "=!=", 
                 RowBox[{"Missing", "[", "]"}]}], ",", 
                RowBox[{
                 RowBox[{"Sow", "[", 
                  RowBox[{"parent", "\[TwoWayRule]", "v"}], "]"}], ";", 
                 RowBox[{"AppendTo", "[", 
                  RowBox[{"main", ",", "v"}], "]"}], ";"}]}], "]"}], ";"}]}], 
            "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"v", ",", "orphans"}], "}"}]}], "]"}], "]"}], 
        "\[LeftDoubleBracket]", 
        RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}]}], ";", 
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"VertexList", "[", "live", "]"}], ",", 
        RowBox[{"EdgeAdd", "[", 
         RowBox[{
          RowBox[{"EdgeList", "[", "live", "]"}], ",", "repairs"}], "]"}], 
        ",", 
        RowBox[{"VertexCoordinates", "\[Rule]", 
         RowBox[{"GraphEmbedding", "[", "ground", "]"}]}], ",", 
        RowBox[{"DirectedEdges", "\[Rule]", "False"}]}], "]"}]}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "visualizeDaedaelusLattice", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<RootColor\>\"", "\[Rule]", "Orange"}], ",", 
     RowBox[{"\"\<FailedNodeColor\>\"", "\[Rule]", "Black"}], ",", 
     RowBox[{"\"\<GroundEdgeStyle\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"Gray", ",", "Thin"}], "}"}]}], ",", 
     RowBox[{"\"\<TreeEdgeStyle\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"Red", ",", "Thick"}], "}"}]}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"visualizeDaedaelusLattice", "[", 
    RowBox[{
    "ground_Graph", ",", "tree_Graph", ",", "root_", ",", "fNodes_List", ",", 
     "fLinks_List", ",", 
     RowBox[{"opts", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "coords", ",", "allEdges", ",", "groundLines", ",", "treeLines", ",", 
       "failedLines", ",", "vertexShapes"}], "}"}], ",", 
     RowBox[{
      RowBox[{"coords", "=", 
       RowBox[{"Association", "[", 
        RowBox[{"Thread", "[", 
         RowBox[{
          RowBox[{"VertexList", "[", "ground", "]"}], "\[Rule]", 
          RowBox[{"GraphEmbedding", "[", "ground", "]"}]}], "]"}], "]"}]}], 
      ";", 
      RowBox[{"vertexShapes", "=", 
       RowBox[{"Graphics", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"v", "=", 
               RowBox[{
                RowBox[{"VertexList", "[", "ground", "]"}], 
                "\[LeftDoubleBracket]", "k", "\[RightDoubleBracket]"}]}], ",", 
              RowBox[{"pt", "=", 
               RowBox[{
                RowBox[{"GraphEmbedding", "[", "ground", "]"}], 
                "\[LeftDoubleBracket]", "k", "\[RightDoubleBracket]"}]}]}], 
             "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"EdgeForm", "[", "Gray", "]"}], ",", 
              RowBox[{"Which", "[", 
               RowBox[{
                RowBox[{"v", "===", "root"}], ",", 
                RowBox[{"OptionValue", "[", "\"\<RootColor\>\"", "]"}], ",", 
                RowBox[{"MemberQ", "[", 
                 RowBox[{"fNodes", ",", "v"}], "]"}], ",", 
                RowBox[{"OptionValue", "[", "\"\<FailedNodeColor\>\"", "]"}], 
                ",", "True", ",", "LightGray"}], "]"}], ",", 
              RowBox[{"Polygon", "[", 
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{"pt", "+", 
                  RowBox[{"0.35", " ", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Cos", "[", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]", " ", "j"}], "8"], "+", 
                    FractionBox["\[Pi]", "8"]}], "]"}], ",", 
                    RowBox[{"Sin", "[", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]", " ", "j"}], "8"], "+", 
                    FractionBox["\[Pi]", "8"]}], "]"}]}], "}"}]}]}], ",", 
                 RowBox[{"{", 
                  RowBox[{"j", ",", "8"}], "}"}]}], "]"}], "]"}]}], "}"}]}], 
           "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"k", ",", 
            RowBox[{"VertexCount", "[", "ground", "]"}]}], "}"}]}], "]"}], 
        "]"}]}], ";", 
      RowBox[{"allEdges", "=", 
       RowBox[{"EdgeList", "[", "ground", "]"}]}], ";", 
      RowBox[{"groundLines", "=", 
       RowBox[{"Cases", "[", 
        RowBox[{"allEdges", ",", 
         RowBox[{"e_", "/;", 
          RowBox[{
           RowBox[{"!", 
            RowBox[{"EdgeQ", "[", 
             RowBox[{"tree", ",", "e"}], "]"}]}], "&&", 
           RowBox[{"!", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"MemberQ", "[", 
               RowBox[{"fLinks", ",", "e"}], "]"}], "||", 
              RowBox[{"MemberQ", "[", 
               RowBox[{"fLinks", ",", 
                RowBox[{"Reverse", "[", "e", "]"}]}], "]"}]}], ")"}]}]}]}]}], 
        "]"}]}], ";", 
      RowBox[{"treeLines", "=", 
       RowBox[{"Cases", "[", 
        RowBox[{"allEdges", ",", 
         RowBox[{"e_", "/;", 
          RowBox[{"EdgeQ", "[", 
           RowBox[{"tree", ",", "e"}], "]"}]}]}], "]"}]}], ";", 
      RowBox[{"failedLines", "=", 
       RowBox[{"Cases", "[", 
        RowBox[{"allEdges", ",", 
         RowBox[{"e_", "/;", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{"fLinks", ",", "e"}], "]"}], "||", 
           RowBox[{"MemberQ", "[", 
            RowBox[{"fLinks", ",", 
             RowBox[{"Reverse", "[", "e", "]"}]}], "]"}]}]}]}], "]"}]}], ";", 
      
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Graphics", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"OptionValue", "[", "\"\<GroundEdgeStyle\>\"", "]"}], ",", 
           
           RowBox[{"Line", "[", 
            RowBox[{"Map", "[", 
             RowBox[{"coords", ",", 
              RowBox[{"List", "@@@", "groundLines"}], ",", 
              RowBox[{"{", "2", "}"}]}], "]"}], "]"}]}], "}"}], "]"}], ",", 
        RowBox[{"Graphics", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"OptionValue", "[", "\"\<TreeEdgeStyle\>\"", "]"}], ",", 
           RowBox[{"Line", "[", 
            RowBox[{"Map", "[", 
             RowBox[{"coords", ",", 
              RowBox[{"List", "@@@", "treeLines"}], ",", 
              RowBox[{"{", "2", "}"}]}], "]"}], "]"}]}], "}"}], "]"}], ",", 
        RowBox[{"Graphics", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Darker", "[", "Red", "]"}], ",", "Dashed", ",", "Thick", 
           ",", 
           RowBox[{"Line", "[", 
            RowBox[{"Map", "[", 
             RowBox[{"coords", ",", 
              RowBox[{"List", "@@@", "failedLines"}], ",", 
              RowBox[{"{", "2", "}"}]}], "]"}], "]"}]}], "}"}], "]"}], ",", 
        "vertexShapes"}], "}"}]}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"kirchhoffTreeCount", "[", "g_Graph", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"VertexCount", "[", "g", "]"}], "\[LessEqual]", "1"}], ",", "1",
      ",", 
     RowBox[{"Round", "[", 
      RowBox[{"Det", "[", 
       RowBox[{"Drop", "[", 
        RowBox[{
         RowBox[{"KirchhoffMatrix", "[", "g", "]"}], ",", 
         RowBox[{"{", "1", "}"}], ",", 
         RowBox[{"{", "1", "}"}]}], "]"}], "]"}], "]"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"generateClosNetwork", "[", 
    RowBox[{"spSrv_", ",", "racks_", ",", "spines_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"srv", ",", "tor", ",", "spi", ",", "edges"}], "}"}], ",", 
     RowBox[{
      RowBox[{"srv", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"\"\<S_\>\"", "<>", 
           RowBox[{"ToString", "[", "r", "]"}], "<>", "\"\<_\>\"", "<>", 
           RowBox[{"ToString", "[", "s", "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"r", ",", "racks"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"s", ",", "spSrv"}], "}"}]}], "]"}], "]"}]}], ";", 
      RowBox[{"tor", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"\"\<ToR_\>\"", "<>", 
          RowBox[{"ToString", "[", "r", "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"r", ",", "racks"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"spi", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"\"\<SP_\>\"", "<>", 
          RowBox[{"ToString", "[", "s", "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"s", ",", "spines"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"edges", "=", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"srv", "\[LeftDoubleBracket]", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"r", "-", "1"}], ")"}], " ", "spSrv"}], "+", "s"}], 
              "\[RightDoubleBracket]"}], "\[TwoWayRule]", 
             RowBox[{
             "tor", "\[LeftDoubleBracket]", "r", "\[RightDoubleBracket]"}]}], 
            ",", 
            RowBox[{"{", 
             RowBox[{"r", ",", "racks"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"s", ",", "spSrv"}], "}"}]}], "]"}], "]"}], ",", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
             "tor", "\[LeftDoubleBracket]", "r", "\[RightDoubleBracket]"}], 
             "\[TwoWayRule]", 
             RowBox[{
             "spi", "\[LeftDoubleBracket]", "s", "\[RightDoubleBracket]"}]}], 
            ",", 
            RowBox[{"{", 
             RowBox[{"r", ",", "racks"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"s", ",", "spines"}], "}"}]}], "]"}], "]"}]}], "]"}]}], 
      ";", 
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"Join", "[", 
         RowBox[{"srv", ",", "tor", ",", "spi"}], "]"}], ",", "edges", ",", 
        RowBox[{"GraphLayout", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"\"\<LayeredEmbedding\>\"", ",", 
           RowBox[{"\"\<RootVertex\>\"", "\[Rule]", 
            RowBox[{"First", "[", "spi", "]"}]}]}], "}"}]}]}], "]"}]}]}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"analyzeClosVsMesh", "[", 
    RowBox[{"n_Integer", "?", "Positive"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "dim", ",", "mesh", ",", "clos", ",", "srvRk", ",", "meshTrees", ",", 
       "closTrees", ",", "meshFail", ",", "closFail"}], "}"}], ",", 
     RowBox[{
      RowBox[{"dim", "=", 
       RowBox[{"Ceiling", "[", 
        SqrtBox["n"], "]"}]}], ";", 
      RowBox[{"mesh", "=", 
       RowBox[{
        RowBox[{"generateDaedaelusLattice", "[", 
         RowBox[{"dim", ",", "dim"}], "]"}], "[", "\"\<Graph\>\"", "]"}]}], 
      ";", 
      RowBox[{"srvRk", "=", 
       RowBox[{"Ceiling", "[", 
        FractionBox["n", "4"], "]"}]}], ";", 
      RowBox[{"clos", "=", 
       RowBox[{"generateClosNetwork", "[", 
        RowBox[{"srvRk", ",", "4", ",", "4"}], "]"}]}], ";", 
      RowBox[{"meshTrees", "=", 
       RowBox[{"kirchhoffTreeCount", "[", "mesh", "]"}]}], ";", 
      RowBox[{"closTrees", "=", 
       RowBox[{"kirchhoffTreeCount", "[", "clos", "]"}]}], ";", 
      RowBox[{"meshFail", "=", 
       RowBox[{"ConnectedGraphQ", "[", 
        RowBox[{"VertexDelete", "[", 
         RowBox[{"mesh", ",", 
          RowBox[{"First", "[", 
           RowBox[{"VertexList", "[", "mesh", "]"}], "]"}]}], "]"}], "]"}]}], 
      ";", 
      RowBox[{"closFail", "=", 
       RowBox[{"ConnectedGraphQ", "[", 
        RowBox[{"VertexDelete", "[", 
         RowBox[{"clos", ",", "\"\<SP_1\>\""}], "]"}], "]"}]}], ";", 
      RowBox[{"Grid", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Style", "[", 
             RowBox[{"\"\<Metric\>\"", ",", "Bold"}], "]"}], ",", 
            RowBox[{"Style", "[", 
             RowBox[{"\"\<N2N Mesh\>\"", ",", "Bold"}], "]"}], ",", 
            RowBox[{"Style", "[", 
             RowBox[{"\"\<2-Tier Clos\>\"", ",", "Bold"}], "]"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Total Links\>\"", ",", 
            RowBox[{"EdgeCount", "[", "mesh", "]"}], ",", 
            RowBox[{"EdgeCount", "[", "clos", "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
           "\"\<Typical Latency\>\"", ",", "\"\<\[TildeTilde]1 hop\>\"", ",", 
            "\"\<\[GreaterEqual]3 hops\>\""}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
           "\"\<Spanning-Tree Count\>\"", ",", "meshTrees", ",", 
            "closTrees"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Single-Node Failure\>\"", ",", 
            RowBox[{"If", "[", 
             RowBox[{
             "meshFail", ",", "\"\<Graceful degradation\>\"", ",", 
              "\"\<Partition\>\""}], "]"}], ",", 
            RowBox[{"If", "[", 
             RowBox[{
             "closFail", ",", "\"\<Graceful degradation\>\"", ",", 
              "\"\<Partition\>\""}], "]"}]}], "}"}]}], "}"}], ",", 
        RowBox[{"Frame", "\[Rule]", "All"}], ",", 
        RowBox[{"Alignment", "\[Rule]", "Center"}], ",", 
        RowBox[{"Spacings", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"2", ",", "1"}], "}"}]}]}], "]"}]}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"example1", "[", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "lat", ",", "root", ",", "init", ",", "healed", ",", 
       "graphicsComponents"}], "}"}], ",", 
     RowBox[{
      RowBox[{"lat", "=", 
       RowBox[{"generateDaedaelusLattice", "[", 
        RowBox[{"5", ",", "8"}], "]"}]}], ";", 
      RowBox[{"root", "=", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}]}], ";", 
      RowBox[{"init", "=", 
       RowBox[{"buildSpanningTree", "[", 
        RowBox[{
         RowBox[{"lat", "[", "\"\<Graph\>\"", "]"}], ",", "root"}], "]"}]}], 
      ";", 
      RowBox[{"healed", "=", 
       RowBox[{"healTree", "[", 
        RowBox[{"init", ",", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"3", ",", "4"}], "}"}], "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"lat", "[", "\"\<Graph\>\"", "]"}]}], "]"}]}], ";", 
      RowBox[{"graphicsComponents", "=", 
       RowBox[{"visualizeDaedaelusLattice", "[", 
        RowBox[{
         RowBox[{"lat", "[", "\"\<Graph\>\"", "]"}], ",", "healed", ",", 
         "root", ",", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"3", ",", "4"}], "}"}], "}"}], ",", 
         RowBox[{"{", "}"}]}], "]"}]}], ";", 
      RowBox[{"Show", "[", 
       RowBox[{"graphicsComponents", ",", 
        RowBox[{"ImageSize", "\[Rule]", "800"}], ",", 
        RowBox[{"AspectRatio", "\[Rule]", "Automatic"}]}], "]"}]}]}], "]"}]}],
   ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"example2", "[", "]"}], ":=", 
   RowBox[{"analyzeClosVsMesh", "[", "64", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"End", "[", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"EndPackage", "[", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Needs", "[", "\"\<DaedaelusMesh`\>\"", "]"}], ";"}], "\n", 
 RowBox[{"example1", "[", "]"}], "\n", 
 RowBox[{"example2", "[", "]"}]}], "Code",
 CellChangeTimes->{{3.9628067291733627`*^9, 3.9628067418905*^9}},
 CellLabel->
  "In[2820]:=",ExpressionUUID->"d1bcaa84-a24b-474f-aad5-b66f7fe93351"],

Cell[BoxData[
 GraphicsBox[{{
    {GrayLevel[0.5], Thickness[Tiny]}, LineBox[CompressedData["
1:eJyN19FtwzAQA1C3khyt0ZU6Qgdot+93+yEDhxfKyIdhnXUkDwhpKx9fP5/f
7TiO3//rfV1v66rr9Ow9YGpPu8EkfFtrcVfdA2/tF99XLe6qR+Ct/eLHqsVd
9Rl4a7/4c9XirvoReGu/+MeqxV31DLy1X/xctbhJ/6Q/eSd5Sy/sfttXsPom
eawFrM8a63Y8z6DP9M2Os99oJL2+1h09fanP1Kn7ztHga/Q3cMnH+lKduu8c
Db5GfwOXfK+P1an7ztHga/Q3cCkn5kCduu8cDb5GfwOXcinvhG/Cl97Nr3h8
965M2UsZ0PfqmIU7L1fvJu6UK7H29oD1WWfdj+cZzJE+33GOG42kN9Z6oGeO
9Lk6dd85Onyd/g4u5Uifq1P3naPD1+nv4FKOzIE6dd85Onyd/g4u5VbeCd+E
L511XvkG7M4e6duUcqWH1dHTd+/65OldbvX57ptkFu68XL2buFOuxNo7AtZn
g/U4nmcwR/p8x3neaCS9c61P9MyRPlen7jvHgG/QP8ClHJkDdeq+cwz4Bv0D
XMqtvBO+CV/673B3Rkpns5QbfS1P477LmR5K34LqmeT95EF9J4/XLgf6Zufh
k/vO1/rg3PA8uO986u/+2PBM7jvfTXB/MS4RGg==
     "]]}, {
    {RGBColor[1, 0, 0], Thickness[Large]}, LineBox[{}]}, 
   {RGBColor[
     NCache[
      Rational[2, 3], 0.6666666666666666], 0, 0], Thickness[Large], 
    Dashing[{Small, Small}], LineBox[{}]}, {
    {RGBColor[1, 0.5, 0], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{1.1339392013277814`, 1.3233578363789502`}, {
      0.8660607986722186, 1.3233578363789502`}, {0.6766421636210497, 
      1.1339392013277814`}, {0.6766421636210497, 0.8660607986722186}, {
      0.8660607986722186, 0.6766421636210497}, {1.1339392013277814`, 
      0.6766421636210497}, {1.3233578363789502`, 0.8660607986722186}, {
      1.3233578363789502`, 1.1339392013277814`}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{2.1339392013277814`, 1.3233578363789502`}, {
      1.8660607986722186`, 1.3233578363789502`}, {1.6766421636210498`, 
      1.1339392013277814`}, {1.6766421636210498`, 0.8660607986722186}, {
      1.8660607986722186`, 0.6766421636210497}, {2.1339392013277814`, 
      0.6766421636210497}, {2.32335783637895, 0.8660607986722186}, {
      2.32335783637895, 1.1339392013277814`}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{3.1339392013277814`, 1.3233578363789502`}, {
      2.8660607986722186`, 1.3233578363789502`}, {2.67664216362105, 
      1.1339392013277814`}, {2.67664216362105, 0.8660607986722186}, {
      2.8660607986722186`, 0.6766421636210497}, {3.1339392013277814`, 
      0.6766421636210497}, {3.32335783637895, 0.8660607986722186}, {
      3.32335783637895, 1.1339392013277814`}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{4.133939201327782, 1.3233578363789502`}, {
      3.8660607986722186`, 1.3233578363789502`}, {3.67664216362105, 
      1.1339392013277814`}, {3.67664216362105, 0.8660607986722186}, {
      3.8660607986722186`, 0.6766421636210497}, {4.133939201327782, 
      0.6766421636210497}, {4.323357836378951, 0.8660607986722186}, {
      4.323357836378951, 1.1339392013277814`}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{5.133939201327782, 1.3233578363789502`}, {4.866060798672218,
       1.3233578363789502`}, {4.676642163621049, 1.1339392013277814`}, {
      4.676642163621049, 0.8660607986722186}, {4.866060798672218, 
      0.6766421636210497}, {5.133939201327782, 0.6766421636210497}, {
      5.323357836378951, 0.8660607986722186}, {5.323357836378951, 
      1.1339392013277814`}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{6.133939201327782, 1.3233578363789502`}, {5.866060798672218,
       1.3233578363789502`}, {5.676642163621049, 1.1339392013277814`}, {
      5.676642163621049, 0.8660607986722186}, {5.866060798672218, 
      0.6766421636210497}, {6.133939201327782, 0.6766421636210497}, {
      6.323357836378951, 0.8660607986722186}, {6.323357836378951, 
      1.1339392013277814`}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{7.133939201327782, 1.3233578363789502`}, {6.866060798672218,
       1.3233578363789502`}, {6.676642163621049, 1.1339392013277814`}, {
      6.676642163621049, 0.8660607986722186}, {6.866060798672218, 
      0.6766421636210497}, {7.133939201327782, 0.6766421636210497}, {
      7.323357836378951, 0.8660607986722186}, {7.323357836378951, 
      1.1339392013277814`}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{8.133939201327781, 1.3233578363789502`}, {7.866060798672218,
       1.3233578363789502`}, {7.676642163621049, 1.1339392013277814`}, {
      7.676642163621049, 0.8660607986722186}, {7.866060798672218, 
      0.6766421636210497}, {8.133939201327781, 0.6766421636210497}, {
      8.32335783637895, 0.8660607986722186}, {8.32335783637895, 
      1.1339392013277814`}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{1.1339392013277814`, 2.32335783637895}, {0.8660607986722186,
       2.32335783637895}, {0.6766421636210497, 2.1339392013277814`}, {
      0.6766421636210497, 1.8660607986722186`}, {0.8660607986722186, 
      1.6766421636210498`}, {1.1339392013277814`, 1.6766421636210498`}, {
      1.3233578363789502`, 1.8660607986722186`}, {1.3233578363789502`, 
      2.1339392013277814`}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{2.1339392013277814`, 2.32335783637895}, {
      1.8660607986722186`, 2.32335783637895}, {1.6766421636210498`, 
      2.1339392013277814`}, {1.6766421636210498`, 1.8660607986722186`}, {
      1.8660607986722186`, 1.6766421636210498`}, {2.1339392013277814`, 
      1.6766421636210498`}, {2.32335783637895, 1.8660607986722186`}, {
      2.32335783637895, 2.1339392013277814`}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{3.1339392013277814`, 2.32335783637895}, {
      2.8660607986722186`, 2.32335783637895}, {2.67664216362105, 
      2.1339392013277814`}, {2.67664216362105, 1.8660607986722186`}, {
      2.8660607986722186`, 1.6766421636210498`}, {3.1339392013277814`, 
      1.6766421636210498`}, {3.32335783637895, 1.8660607986722186`}, {
      3.32335783637895, 2.1339392013277814`}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{4.133939201327782, 2.32335783637895}, {3.8660607986722186`, 
      2.32335783637895}, {3.67664216362105, 2.1339392013277814`}, {
      3.67664216362105, 1.8660607986722186`}, {3.8660607986722186`, 
      1.6766421636210498`}, {4.133939201327782, 1.6766421636210498`}, {
      4.323357836378951, 1.8660607986722186`}, {4.323357836378951, 
      2.1339392013277814`}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{5.133939201327782, 2.32335783637895}, {4.866060798672218, 
      2.32335783637895}, {4.676642163621049, 2.1339392013277814`}, {
      4.676642163621049, 1.8660607986722186`}, {4.866060798672218, 
      1.6766421636210498`}, {5.133939201327782, 1.6766421636210498`}, {
      5.323357836378951, 1.8660607986722186`}, {5.323357836378951, 
      2.1339392013277814`}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{6.133939201327782, 2.32335783637895}, {5.866060798672218, 
      2.32335783637895}, {5.676642163621049, 2.1339392013277814`}, {
      5.676642163621049, 1.8660607986722186`}, {5.866060798672218, 
      1.6766421636210498`}, {6.133939201327782, 1.6766421636210498`}, {
      6.323357836378951, 1.8660607986722186`}, {6.323357836378951, 
      2.1339392013277814`}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{7.133939201327782, 2.32335783637895}, {6.866060798672218, 
      2.32335783637895}, {6.676642163621049, 2.1339392013277814`}, {
      6.676642163621049, 1.8660607986722186`}, {6.866060798672218, 
      1.6766421636210498`}, {7.133939201327782, 1.6766421636210498`}, {
      7.323357836378951, 1.8660607986722186`}, {7.323357836378951, 
      2.1339392013277814`}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{8.133939201327781, 2.32335783637895}, {7.866060798672218, 
      2.32335783637895}, {7.676642163621049, 2.1339392013277814`}, {
      7.676642163621049, 1.8660607986722186`}, {7.866060798672218, 
      1.6766421636210498`}, {8.133939201327781, 1.6766421636210498`}, {
      8.32335783637895, 1.8660607986722186`}, {8.32335783637895, 
      2.1339392013277814`}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{1.1339392013277814`, 3.32335783637895}, {0.8660607986722186,
       3.32335783637895}, {0.6766421636210497, 3.1339392013277814`}, {
      0.6766421636210497, 2.8660607986722186`}, {0.8660607986722186, 
      2.67664216362105}, {1.1339392013277814`, 2.67664216362105}, {
      1.3233578363789502`, 2.8660607986722186`}, {1.3233578363789502`, 
      3.1339392013277814`}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{2.1339392013277814`, 3.32335783637895}, {
      1.8660607986722186`, 3.32335783637895}, {1.6766421636210498`, 
      3.1339392013277814`}, {1.6766421636210498`, 2.8660607986722186`}, {
      1.8660607986722186`, 2.67664216362105}, {2.1339392013277814`, 
      2.67664216362105}, {2.32335783637895, 2.8660607986722186`}, {
      2.32335783637895, 3.1339392013277814`}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{3.1339392013277814`, 3.32335783637895}, {
      2.8660607986722186`, 3.32335783637895}, {2.67664216362105, 
      3.1339392013277814`}, {2.67664216362105, 2.8660607986722186`}, {
      2.8660607986722186`, 2.67664216362105}, {3.1339392013277814`, 
      2.67664216362105}, {3.32335783637895, 2.8660607986722186`}, {
      3.32335783637895, 3.1339392013277814`}}]}, 
    {GrayLevel[0], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{4.133939201327782, 3.32335783637895}, {3.8660607986722186`, 
      3.32335783637895}, {3.67664216362105, 3.1339392013277814`}, {
      3.67664216362105, 2.8660607986722186`}, {3.8660607986722186`, 
      2.67664216362105}, {4.133939201327782, 2.67664216362105}, {
      4.323357836378951, 2.8660607986722186`}, {4.323357836378951, 
      3.1339392013277814`}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{5.133939201327782, 3.32335783637895}, {4.866060798672218, 
      3.32335783637895}, {4.676642163621049, 3.1339392013277814`}, {
      4.676642163621049, 2.8660607986722186`}, {4.866060798672218, 
      2.67664216362105}, {5.133939201327782, 2.67664216362105}, {
      5.323357836378951, 2.8660607986722186`}, {5.323357836378951, 
      3.1339392013277814`}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{6.133939201327782, 3.32335783637895}, {5.866060798672218, 
      3.32335783637895}, {5.676642163621049, 3.1339392013277814`}, {
      5.676642163621049, 2.8660607986722186`}, {5.866060798672218, 
      2.67664216362105}, {6.133939201327782, 2.67664216362105}, {
      6.323357836378951, 2.8660607986722186`}, {6.323357836378951, 
      3.1339392013277814`}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{7.133939201327782, 3.32335783637895}, {6.866060798672218, 
      3.32335783637895}, {6.676642163621049, 3.1339392013277814`}, {
      6.676642163621049, 2.8660607986722186`}, {6.866060798672218, 
      2.67664216362105}, {7.133939201327782, 2.67664216362105}, {
      7.323357836378951, 2.8660607986722186`}, {7.323357836378951, 
      3.1339392013277814`}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{8.133939201327781, 3.32335783637895}, {7.866060798672218, 
      3.32335783637895}, {7.676642163621049, 3.1339392013277814`}, {
      7.676642163621049, 2.8660607986722186`}, {7.866060798672218, 
      2.67664216362105}, {8.133939201327781, 2.67664216362105}, {
      8.32335783637895, 2.8660607986722186`}, {8.32335783637895, 
      3.1339392013277814`}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{1.1339392013277814`, 4.323357836378951}, {
      0.8660607986722186, 4.323357836378951}, {0.6766421636210497, 
      4.133939201327782}, {0.6766421636210497, 3.8660607986722186`}, {
      0.8660607986722186, 3.67664216362105}, {1.1339392013277814`, 
      3.67664216362105}, {1.3233578363789502`, 3.8660607986722186`}, {
      1.3233578363789502`, 4.133939201327782}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{2.1339392013277814`, 4.323357836378951}, {
      1.8660607986722186`, 4.323357836378951}, {1.6766421636210498`, 
      4.133939201327782}, {1.6766421636210498`, 3.8660607986722186`}, {
      1.8660607986722186`, 3.67664216362105}, {2.1339392013277814`, 
      3.67664216362105}, {2.32335783637895, 3.8660607986722186`}, {
      2.32335783637895, 4.133939201327782}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{3.1339392013277814`, 4.323357836378951}, {
      2.8660607986722186`, 4.323357836378951}, {2.67664216362105, 
      4.133939201327782}, {2.67664216362105, 3.8660607986722186`}, {
      2.8660607986722186`, 3.67664216362105}, {3.1339392013277814`, 
      3.67664216362105}, {3.32335783637895, 3.8660607986722186`}, {
      3.32335783637895, 4.133939201327782}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{4.133939201327782, 4.323357836378951}, {3.8660607986722186`,
       4.323357836378951}, {3.67664216362105, 4.133939201327782}, {
      3.67664216362105, 3.8660607986722186`}, {3.8660607986722186`, 
      3.67664216362105}, {4.133939201327782, 3.67664216362105}, {
      4.323357836378951, 3.8660607986722186`}, {4.323357836378951, 
      4.133939201327782}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{5.133939201327782, 4.323357836378951}, {4.866060798672218, 
      4.323357836378951}, {4.676642163621049, 4.133939201327782}, {
      4.676642163621049, 3.8660607986722186`}, {4.866060798672218, 
      3.67664216362105}, {5.133939201327782, 3.67664216362105}, {
      5.323357836378951, 3.8660607986722186`}, {5.323357836378951, 
      4.133939201327782}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{6.133939201327782, 4.323357836378951}, {5.866060798672218, 
      4.323357836378951}, {5.676642163621049, 4.133939201327782}, {
      5.676642163621049, 3.8660607986722186`}, {5.866060798672218, 
      3.67664216362105}, {6.133939201327782, 3.67664216362105}, {
      6.323357836378951, 3.8660607986722186`}, {6.323357836378951, 
      4.133939201327782}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{7.133939201327782, 4.323357836378951}, {6.866060798672218, 
      4.323357836378951}, {6.676642163621049, 4.133939201327782}, {
      6.676642163621049, 3.8660607986722186`}, {6.866060798672218, 
      3.67664216362105}, {7.133939201327782, 3.67664216362105}, {
      7.323357836378951, 3.8660607986722186`}, {7.323357836378951, 
      4.133939201327782}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{8.133939201327781, 4.323357836378951}, {7.866060798672218, 
      4.323357836378951}, {7.676642163621049, 4.133939201327782}, {
      7.676642163621049, 3.8660607986722186`}, {7.866060798672218, 
      3.67664216362105}, {8.133939201327781, 3.67664216362105}, {
      8.32335783637895, 3.8660607986722186`}, {8.32335783637895, 
      4.133939201327782}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{1.1339392013277814`, 5.323357836378951}, {
      0.8660607986722186, 5.323357836378951}, {0.6766421636210497, 
      5.133939201327782}, {0.6766421636210497, 4.866060798672218}, {
      0.8660607986722186, 4.676642163621049}, {1.1339392013277814`, 
      4.676642163621049}, {1.3233578363789502`, 4.866060798672218}, {
      1.3233578363789502`, 5.133939201327782}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{2.1339392013277814`, 5.323357836378951}, {
      1.8660607986722186`, 5.323357836378951}, {1.6766421636210498`, 
      5.133939201327782}, {1.6766421636210498`, 4.866060798672218}, {
      1.8660607986722186`, 4.676642163621049}, {2.1339392013277814`, 
      4.676642163621049}, {2.32335783637895, 4.866060798672218}, {
      2.32335783637895, 5.133939201327782}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{3.1339392013277814`, 5.323357836378951}, {
      2.8660607986722186`, 5.323357836378951}, {2.67664216362105, 
      5.133939201327782}, {2.67664216362105, 4.866060798672218}, {
      2.8660607986722186`, 4.676642163621049}, {3.1339392013277814`, 
      4.676642163621049}, {3.32335783637895, 4.866060798672218}, {
      3.32335783637895, 5.133939201327782}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{4.133939201327782, 5.323357836378951}, {3.8660607986722186`,
       5.323357836378951}, {3.67664216362105, 5.133939201327782}, {
      3.67664216362105, 4.866060798672218}, {3.8660607986722186`, 
      4.676642163621049}, {4.133939201327782, 4.676642163621049}, {
      4.323357836378951, 4.866060798672218}, {4.323357836378951, 
      5.133939201327782}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{5.133939201327782, 5.323357836378951}, {4.866060798672218, 
      5.323357836378951}, {4.676642163621049, 5.133939201327782}, {
      4.676642163621049, 4.866060798672218}, {4.866060798672218, 
      4.676642163621049}, {5.133939201327782, 4.676642163621049}, {
      5.323357836378951, 4.866060798672218}, {5.323357836378951, 
      5.133939201327782}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{6.133939201327782, 5.323357836378951}, {5.866060798672218, 
      5.323357836378951}, {5.676642163621049, 5.133939201327782}, {
      5.676642163621049, 4.866060798672218}, {5.866060798672218, 
      4.676642163621049}, {6.133939201327782, 4.676642163621049}, {
      6.323357836378951, 4.866060798672218}, {6.323357836378951, 
      5.133939201327782}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{7.133939201327782, 5.323357836378951}, {6.866060798672218, 
      5.323357836378951}, {6.676642163621049, 5.133939201327782}, {
      6.676642163621049, 4.866060798672218}, {6.866060798672218, 
      4.676642163621049}, {7.133939201327782, 4.676642163621049}, {
      7.323357836378951, 4.866060798672218}, {7.323357836378951, 
      5.133939201327782}}]}, 
    {GrayLevel[0.85], EdgeForm[GrayLevel[0.5]], 
     PolygonBox[{{8.133939201327781, 5.323357836378951}, {7.866060798672218, 
      5.323357836378951}, {7.676642163621049, 5.133939201327782}, {
      7.676642163621049, 4.866060798672218}, {7.866060798672218, 
      4.676642163621049}, {8.133939201327781, 4.676642163621049}, {
      8.32335783637895, 4.866060798672218}, {8.32335783637895, 
      5.133939201327782}}]}}},
  AspectRatio->Automatic,
  ImageSize->800]], "Output",
 CellChangeTimes->{
  3.9628067553185883`*^9, 3.9628068423898573`*^9, {3.962806954808763*^9, 
   3.9628069834217873`*^9}, {3.962807796547168*^9, 3.962807799390869*^9}, {
   3.9628103149245777`*^9, 3.962810316315463*^9}, 3.962875639111991*^9, 
   3.962876275802661*^9},
 CellLabel->
  "Out[2844]=",ExpressionUUID->"021ad817-f3c0-473c-99b6-ad790ec74c4e"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     StyleBox["\<\"Metric\"\>",
      StripOnInput->False,
      FontWeight->Bold], 
     StyleBox["\<\"N2N Mesh\"\>",
      StripOnInput->False,
      FontWeight->Bold], 
     StyleBox["\<\"2-Tier Clos\"\>",
      StripOnInput->False,
      FontWeight->Bold]},
    {"\<\"Total Links\"\>", "420", "80"},
    {"\<\"Typical Latency\"\>", "\<\"\[TildeTilde]1 hop\"\>", "\<\"\
\[GreaterEqual]3 hops\"\>"},
    {"\<\"Spanning-Tree Count\"\>", 
     "1459317836184139215695519252141942969301860352", "4096"},
    {"\<\"Single-Node Failure\"\>", "\<\"Graceful degradation\"\>", \
"\<\"Graceful degradation\"\>"}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Center}}},
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{1}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.9628067553185883`*^9, 3.9628068423898573`*^9, {3.962806954808763*^9, 
   3.9628069834217873`*^9}, {3.962807796547168*^9, 3.962807799390869*^9}, {
   3.9628103149245777`*^9, 3.962810316315463*^9}, 3.962875639111991*^9, 
   3.962876275804343*^9},
 CellLabel->
  "Out[2845]=",ExpressionUUID->"c40f69fd-c74e-4651-be23-91e4cc39267f"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
The Latency Imperative: Analyzing Path Length and Predictability\
\>", "Title",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, 3.962898640977153*^9},
 FormatType->"TextForm",
 FontSize->24,
 Background->None,ExpressionUUID->"4ea48689-18cc-4f47-a1af-8df54b140382"],

Cell[CellGroupData[{

Cell["\<\
In the world of high-performance computing and distributed applications, \
latency is a paramount concern. The time it takes for data to travel between \
nodes can directly impact application performance, transaction throughput, \
and user experience. This section dissects the first quantitative metric from \
the simulation\[LongDash]latency, as proxied by hop count\[LongDash]to \
compare the Clos and mesh architectures. It begins with a critical evaluation \
of the metric itself, acknowledging its utility and its significant \
limitations, before interpreting the simulation\[CloseCurlyQuote]s results to \
reveal a fundamental trade-off between the uniform predictability offered by \
Clos and the locality-sensitive performance inherent to the mesh.\
\>", "Chapter",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898338257278*^9}, {
   3.962898381402219*^9, 3.96289842166496*^9}, {3.96289849829926*^9, 
   3.962898570547124*^9}, {3.962898605101194*^9, 3.9628986082485447`*^9}},
 FormatType->"TextForm",
 FontSize->14,
 Background->None,ExpressionUUID->"6ecf3f64-af79-4d6c-b2e1-626661920c1e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"generateClosNetwork", "[", 
   RowBox[{
   "racks_Integer", ",", "serversPerRack_Integer", ",", "spines_Integer"}], 
   "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "serverNodes", ",", "leafNodes", ",", "spineNodes", ",", "allNodes", ",",
       "serverEdges", ",", "leafEdges", ",", "allEdges", ",", "g"}], "}"}], 
    ",", 
    RowBox[{
     RowBox[{"serverNodes", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"\"\<S\>\"", "<>", 
          RowBox[{"ToString", "[", "i", "]"}], "<>", "\"\<_\>\"", "<>", 
          RowBox[{"ToString", "[", "j", "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "racks"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "serversPerRack"}], "}"}]}], "]"}], "]"}]}], ";", 
     
     RowBox[{"leafNodes", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"\"\<Leaf\>\"", "<>", 
         RowBox[{"ToString", "[", "i", "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "racks"}], "}"}]}], "]"}]}], ";", 
     RowBox[{"spineNodes", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"\"\<Spine\>\"", "<>", 
         RowBox[{"ToString", "[", "k", "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"k", ",", "spines"}], "}"}]}], "]"}]}], ";", 
     RowBox[{"allNodes", "=", 
      RowBox[{"Join", "[", 
       RowBox[{"serverNodes", ",", "leafNodes", ",", "spineNodes"}], "]"}]}], 
     ";", 
     RowBox[{"serverEdges", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"\"\<S\>\"", "<>", 
           RowBox[{"ToString", "[", "i", "]"}], "<>", "\"\<_\>\"", "<>", 
           RowBox[{"ToString", "[", "j", "]"}]}], "\[UndirectedEdge]", 
          RowBox[{"\"\<Leaf\>\"", "<>", 
           RowBox[{"ToString", "[", "i", "]"}]}]}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "racks"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"j", ",", "serversPerRack"}], "}"}]}], "]"}], "]"}]}], ";", 
     
     RowBox[{"leafEdges", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"\"\<Leaf\>\"", "<>", 
           RowBox[{"ToString", "[", "i", "]"}]}], "\[UndirectedEdge]", 
          RowBox[{"\"\<Spine\>\"", "<>", 
           RowBox[{"ToString", "[", "k", "]"}]}]}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "racks"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", "spines"}], "}"}]}], "]"}], "]"}]}], ";", 
     RowBox[{"allEdges", "=", 
      RowBox[{"Join", "[", 
       RowBox[{"serverEdges", ",", "leafEdges"}], "]"}]}], ";", 
     RowBox[{"g", "=", 
      RowBox[{"Graph", "[", 
       RowBox[{"allNodes", ",", "allEdges", ",", 
        RowBox[{"GraphLayout", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"\"\<LayeredDrawing\>\"", ",", 
           RowBox[{"\"\<RootVertices\>\"", "\[Rule]", "spineNodes"}], ",", 
           RowBox[{"\"\<LayerSpacing\>\"", "\[Rule]", "2"}]}], "}"}]}], ",", 
        RowBox[{"VertexLabels", "\[Rule]", 
         RowBox[{"Placed", "[", 
          RowBox[{"\"\<Name\>\"", ",", "Tooltip"}], "]"}]}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}]}], ";", 
     RowBox[{"Association", "[", 
      RowBox[{"\"\<Graph\>\"", "\[Rule]", "g"}], "]"}]}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"generateDaedaelusLattice", "[", 
   RowBox[{"rows_Integer", ",", "cols_Integer"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"vertices", ",", "edges", ",", "g"}], "}"}], ",", 
    RowBox[{
     RowBox[{"vertices", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"i", ",", "j"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", "rows"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "1", ",", "cols"}], "}"}]}], "]"}], ",", "1"}], 
       "]"}]}], ";", 
     RowBox[{"edges", "=", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"Flatten", "[", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"i", ",", "j"}], "}"}], "\[UndirectedEdge]", 
            RowBox[{"{", 
             RowBox[{"i", ",", 
              RowBox[{"j", "+", "1"}]}], "}"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "1", ",", "rows"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"j", ",", "1", ",", 
             RowBox[{"cols", "-", "1"}]}], "}"}]}], "]"}], "]"}], ",", 
        RowBox[{"Flatten", "[", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"i", ",", "j"}], "}"}], "\[UndirectedEdge]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"i", "+", "1"}], ",", "j"}], "}"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "1", ",", 
             RowBox[{"rows", "-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"j", ",", "1", ",", "cols"}], "}"}]}], "]"}], "]"}]}], 
       "]"}]}], ";", 
     RowBox[{"g", "=", 
      RowBox[{"Graph", "[", 
       RowBox[{"vertices", ",", "edges", ",", 
        RowBox[{"VertexCoordinates", "\[Rule]", 
         RowBox[{"(", 
          RowBox[{"vertices", "/.", "\[VeryThinSpace]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"i_Integer", ",", "j_Integer"}], "}"}], "\[RuleDelayed]", 
            RowBox[{"{", 
             RowBox[{"j", ",", 
              RowBox[{"-", "i"}]}], "}"}]}]}], ")"}]}], ",", 
        RowBox[{"VertexLabels", "\[Rule]", 
         RowBox[{"Placed", "[", 
          RowBox[{"\"\<Name\>\"", ",", "Tooltip"}], "]"}]}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}]}], ";", 
     RowBox[{"Association", "[", 
      RowBox[{"\"\<Graph\>\"", "\[Rule]", "g"}], "]"}]}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"countSpanningTrees", "[", "g_Graph", "]"}], ":=", 
   RowBox[{"MatrixTreeCount", "[", "g", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"closGraph", "=", 
   RowBox[{
    RowBox[{"generateClosNetwork", "[", 
     RowBox[{"4", ",", "4", ",", "2"}], "]"}], "[", "\"\<Graph\>\"", "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"daedaelusGraph", "=", 
   RowBox[{
    RowBox[{"generateDaedaelusLattice", "[", 
     RowBox[{"4", ",", "4"}], "]"}], "[", "\"\<Graph\>\"", "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"closLatency", "=", 
   RowBox[{"GraphDistance", "[", 
    RowBox[{"closGraph", ",", "\"\<S1_1\>\"", ",", "\"\<S4_4\>\""}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"daedaelusLatency", "=", 
   RowBox[{"GraphDistance", "[", 
    RowBox[{"daedaelusGraph", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "4"}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"closSpanningTrees", "=", 
   RowBox[{"countSpanningTrees", "[", "closGraph", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"daedaelusSpanningTrees", "=", 
   RowBox[{"countSpanningTrees", "[", "daedaelusGraph", "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"closResilience", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"ConnectedComponents", "[", 
         RowBox[{"EdgeDelete", "[", 
          RowBox[{"closGraph", ",", 
           RowBox[{"RandomSample", "[", 
            RowBox[{
             RowBox[{"EdgeList", "[", "closGraph", "]"}], ",", "k"}], "]"}]}],
           "]"}], "]"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"k", ",", "0", ",", "10"}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"daedaelusResilience", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"ConnectedComponents", "[", 
         RowBox[{"EdgeDelete", "[", 
          RowBox[{"daedaelusGraph", ",", 
           RowBox[{"RandomSample", "[", 
            RowBox[{
             RowBox[{"EdgeList", "[", "daedaelusGraph", "]"}], ",", "k"}], 
            "]"}]}], "]"}], "]"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"k", ",", "0", ",", "10"}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Style", "[", 
        RowBox[{
        "\"\<The Fabric Showdown: Clos vs. Daedaelus Mesh\>\"", ",", "Bold", 
         ",", "22"}], "]"}], ",", "\[SpanFromLeft]"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Labeled", "[", 
        RowBox[{
        "closGraph", ",", "\"\<Clos Network (16 Servers)\>\"", ",", "Top", 
         ",", 
         RowBox[{"LabelStyle", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Bold", ",", "14"}], "}"}]}]}], "]"}], ",", 
       RowBox[{"Labeled", "[", 
        RowBox[{
        "daedaelusGraph", ",", "\"\<Daedaelus Mesh (16 Nodes)\>\"", ",", 
         "Top", ",", 
         RowBox[{"LabelStyle", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Bold", ",", "14"}], "}"}]}]}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"BarChart", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"closLatency", ",", "daedaelusLatency"}], "}"}], ",", 
         RowBox[{"ChartLabels", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<Clos\>\"", ",", "\"\<Mesh\>\""}], "}"}]}], ",", 
         RowBox[{"LabelingFunction", "\[Rule]", "Above"}], ",", 
         RowBox[{"PlotLabel", "\[Rule]", 
          RowBox[{"Style", "[", 
           RowBox[{
           "\"\<Path Latency (Hop Count)\>\"", ",", "Bold", ",", "12"}], 
           "]"}]}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
       RowBox[{"BarChart", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"closSpanningTrees", ",", "daedaelusSpanningTrees"}], "}"}],
          ",", 
         RowBox[{"ChartLabels", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<Clos\>\"", ",", "\"\<Mesh\>\""}], "}"}]}], ",", 
         RowBox[{"LabelingFunction", "\[Rule]", "Above"}], ",", 
         RowBox[{"ScalingFunctions", "\[Rule]", "\"\<Log\>\""}], ",", 
         RowBox[{"PlotLabel", "\[Rule]", 
          RowBox[{"Style", "[", 
           RowBox[{
           "\"\<Path Diversity (Spanning\:2011Tree Count)\>\"", ",", "Bold", 
            ",", "12"}], "]"}]}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"ListLinePlot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"closResilience", ",", "daedaelusResilience"}], "}"}], ",", 
         
         RowBox[{"PlotLegends", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<Clos\>\"", ",", "\"\<Mesh\>\""}], "}"}]}], ",", 
         RowBox[{"AxesLabel", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
           "\"\<Edges Removed\>\"", ",", "\"\<Connected Components\>\""}], 
           "}"}]}], ",", 
         RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
         RowBox[{"PlotLabel", "\[Rule]", 
          RowBox[{"Style", "[", 
           RowBox[{
           "\"\<Resilience to Random Link Failures\>\"", ",", "Bold", ",", 
            "12"}], "]"}]}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
       "\[SpanFromLeft]"}], "}"}]}], "}"}], ",", 
   RowBox[{"Frame", "\[Rule]", "All"}], ",", 
   RowBox[{"Spacings", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "2"}], "}"}]}]}], "]"}]}], "Code",
 CellChangeTimes->{{3.9628127432240553`*^9, 3.962812743227619*^9}, 
   3.962812788772588*^9},
 CellLabel->
  "In[5523]:=",ExpressionUUID->"e8f95e02-002c-42b4-95ec-c025e1a9af1a"],

Cell[BoxData[
 TemplateBox[{
  "SetDelayed", "write", 
   "\"Tag \\!\\(\\*RowBox[{\\\"generateDaedaelusLattice\\\"}]\\) in \
\\!\\(\\*RowBox[{\\\"generateDaedaelusLattice\\\", \\\"[\\\", \
RowBox[{\\\"rows_Integer\\\", \\\",\\\", \\\"cols_Integer\\\"}], \
\\\"]\\\"}]\\) is Protected.\"", 2, 5524, 2447, 19048228518958353288, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.962897129259746*^9, 3.962897149121253*^9}, 
   3.962897191512476*^9, 3.96289723090981*^9, 3.9628975356712027`*^9},
 CellLabel->
  "During evaluation of \
In[5523]:=",ExpressionUUID->"cc23b0ae-d4f2-4680-9963-3b51acb3500e"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{
  3.962812743527932*^9, 3.96281278914122*^9, 3.962875728039565*^9, 
   3.962876281617564*^9, {3.962897129314947*^9, 3.962897149176704*^9}, 
   3.962897191563291*^9, 3.9628972309401093`*^9, 3.962897535717264*^9},
 CellLabel->
  "Out[5524]=",ExpressionUUID->"b8518635-3821-4876-96df-468022c545ca"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     StyleBox["\<\"The Fabric Showdown: Clos vs. Daedaelus Mesh\"\>",
      StripOnInput->False,
      FontSize->22,
      FontWeight->Bold], "\[SpanFromLeft]"},
    {
     TemplateBox[{
       GraphicsBox[
        NamespaceBox["NetworkGraphics", 
         DynamicModuleBox[{Typeset`graph = HoldComplete[
             
             Graph[{"Spine1", "Spine2", "Leaf1", "Leaf2", "Leaf3", "Leaf4", 
               "S1_1", "S1_2", "S1_3", "S1_4", "S2_1", "S2_2", "S2_3", "S2_4",
                "S3_1", "S3_2", "S3_3", "S3_4", "S4_1", "S4_2", "S4_3", 
               "S4_4"}, {
              Null, {{1, 3}, {2, 3}, {1, 4}, {2, 4}, {1, 5}, {2, 5}, {1, 6}, {
               2, 6}, {3, 7}, {3, 8}, {3, 9}, {3, 10}, {4, 11}, {4, 12}, {4, 
               13}, {4, 14}, {5, 15}, {5, 16}, {5, 17}, {5, 18}, {6, 19}, {6, 
               20}, {6, 21}, {6, 22}}}]]}, 
          TagBox[
           GraphicsGroupBox[
            GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGAQA2IQzcazMmd9EKPDblYzlXQTRoeujY8XnNrA4PB0zhHv
/+//2z+L5VvLvozLgYG14fT7RYwOxtw/FK/LMjkc+71ZIF7prX3Rty79T6Vv
7dk4UnuuCf23L5LjD/Y++9/+xPmkg6pPOB3ezGH7xHFWwCEm14pjmRuLwzKB
RZc0BAUcJG7OCHNf88t+mc3stA2Mgg7yIjoLz09lcIi5bWhoxcvvoJStpF3N
we6Q8vMnt9VlFocDFw7J+lqssT81P+mGRwy7wxrz1EvHz96yD8r4vzH9xm97
FoVUL+MVF+0vlt6dHyvG6MAABR+el/33Fj9nb1T65kzENWYHh8CEiC/rr9vH
VF2bIuT+xR6mrmqe+W7faQwOB7YnCcgEr7L/unEbz9ZTP+03SVsraEmwOKi8
THW2+M7ncMCXYZrOOwaHuNvTPm2fJuAQfk/0iEvSL/trLSuX88UJOLTEn9u/
P/CrPVeTf7LwZV4HAMtBk+k=
             "], {{
               Directive[
                Opacity[0.7], 
                Hue[0.6, 0.7, 0.5]], 
               Arrowheads[0.], {
                
                ArrowBox[{{1, 3}, {1, 4}, {1, 5}, {1, 6}, {2, 3}, {2, 4}, {2, 
                 5}, {2, 6}, {3, 7}, {3, 8}, {3, 9}, {3, 10}, {4, 11}, {4, 
                 12}, {4, 13}, {4, 14}, {5, 15}, {5, 16}, {5, 17}, {5, 18}, {
                 6, 19}, {6, 20}, {6, 21}, {6, 22}}, 0.03858962501291395]}}, {
              
               Directive[
                Hue[0.6, 0.2, 0.8], 
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.7]]]], 
               DiskBox[1, 0.03858962501291395], 
               DiskBox[2, 0.03858962501291395], 
               DiskBox[3, 0.03858962501291395], 
               DiskBox[4, 0.03858962501291395], 
               DiskBox[5, 0.03858962501291395], 
               DiskBox[6, 0.03858962501291395], 
               DiskBox[7, 0.03858962501291395], 
               DiskBox[8, 0.03858962501291395], 
               DiskBox[9, 0.03858962501291395], 
               DiskBox[10, 0.03858962501291395], 
               DiskBox[11, 0.03858962501291395], 
               DiskBox[12, 0.03858962501291395], 
               DiskBox[13, 0.03858962501291395], 
               DiskBox[14, 0.03858962501291395], 
               DiskBox[15, 0.03858962501291395], 
               DiskBox[16, 0.03858962501291395], 
               DiskBox[17, 0.03858962501291395], 
               DiskBox[18, 0.03858962501291395], 
               DiskBox[19, 0.03858962501291395], 
               DiskBox[20, 0.03858962501291395], 
               DiskBox[21, 0.03858962501291395], 
               DiskBox[22, 0.03858962501291395]}}]], 
           MouseAppearanceTag["NetworkGraphics"]], AllowKernelInitialization -> 
          False]], {
        FormatType -> TraditionalForm, FrameTicks -> None, DefaultBaseStyle -> 
         "NetworkGraphics"}], "\"Clos Network (16 Servers)\""},
      "Labeled",
      DisplayFunction->(GridBox[{{
          
          ItemBox[#2, BaseStyle -> {Bold, 14}, DefaultBaseStyle -> 
           "LabeledLabel"]}, {
          TagBox[
           ItemBox[
            PaneBox[
             TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline},
              BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
           "SkipImageSizeLevel"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
        AutoDelete -> False, 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
        BaselinePosition -> {2, 1}]& ),
      InterpretationFunction->(RowBox[{"Labeled", "[", 
         RowBox[{#, ",", #2, ",", "Top", ",", 
           RowBox[{"{", 
             RowBox[{"LabelStyle", "\[Rule]", 
               RowBox[{"{", 
                 RowBox[{"Bold", ",", "14"}], "}"}]}], "}"}]}], "]"}]& )], 
     TemplateBox[{
       TagBox[
        DynamicModuleBox[{
         Typeset`sgraph$$ = 
          Graph[{{1, 1}, {1, 2}, {1, 3}, {1, 4}, {2, 1}, {2, 2}, {2, 3}, {2, 
            4}, {3, 1}, {3, 2}, {3, 3}, {3, 4}, {4, 1}, {4, 2}, {4, 3}, {4, 
            4}}, {Null, {{1, 2}, {1, 5}, {1, 6}, {2, 1}, {2, 3}, {2, 5}, {2, 
             6}, {2, 7}, {3, 2}, {3, 4}, {3, 6}, {3, 7}, {3, 8}, {4, 3}, {4, 
             7}, {4, 8}, {5, 1}, {5, 2}, {5, 6}, {5, 9}, {5, 10}, {6, 1}, {6, 
             2}, {6, 3}, {6, 5}, {6, 7}, {6, 9}, {6, 10}, {6, 11}, {7, 2}, {7,
              3}, {7, 4}, {7, 6}, {7, 8}, {7, 10}, {7, 11}, {7, 12}, {8, 3}, {
             8, 4}, {8, 7}, {8, 11}, {8, 12}, {9, 5}, {9, 6}, {9, 10}, {9, 
             13}, {9, 14}, {10, 5}, {10, 6}, {10, 7}, {10, 9}, {10, 11}, {10, 
             13}, {10, 14}, {10, 15}, {11, 6}, {11, 7}, {11, 8}, {11, 10}, {
             11, 12}, {11, 14}, {11, 15}, {11, 16}, {12, 7}, {12, 8}, {12, 
             11}, {12, 15}, {12, 16}, {13, 9}, {13, 10}, {13, 14}, {14, 9}, {
             14, 10}, {14, 11}, {14, 13}, {14, 15}, {15, 10}, {15, 11}, {15, 
             12}, {15, 14}, {15, 16}, {16, 11}, {16, 12}, {16, 15}}}, {
            GraphLayout -> "None", 
             VertexCoordinates -> {{1, 1}, {2, 1}, {3, 1}, {4, 1}, {1, 2}, {2,
               2}, {3, 2}, {4, 2}, {1, 3}, {2, 3}, {3, 3}, {4, 3}, {1, 4}, {2,
               4}, {3, 4}, {4, 4}}}]}, 
         InterpretationBox[
          RowBox[{
            TagBox["Graph", "SummaryHead"], "[", 
            
            DynamicModuleBox[{
             Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
             TemplateBox[{
               PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[
                    
                    GraphicsComplexBox[{{
                    0.1, -3.31951456589972}, {-0.14816751450286603`, \
-2.625037331552915}, {0.6310524421714278, -1.3}, {
                    0.9405108616213151, -2.8841601437046225`}, {
                    0.4967448863824806, -2.092358403567382}, \
{-0.846735323402297, -1.466588600696043}, {
                    0.8846460183439665, -0.5107506168284197}, {
                    1.8939086566530445`, -2.50980168725566}, {
                    1.756629266633539, -3.4622764737192444`}, {
                    2.119361963550152, -2.99}, {-0.5709741939515942, \
-4.632295267644082}, {
                    0.20977925607671288`, -4.647162049737781}, \
{-1.0861820131541373`, -4.047493574735101}, {-1.2223073729506904`, \
-2.2040562174063485`}}, {
                    Hue[0.6, 0.7, 0.5], 
                    Opacity[0.7], 
                    Arrowheads[0.], 
                    
                    ArrowBox[{{1, 2}, {1, 4}, {1, 11}, {1, 12}, {1, 13}, {2, 
                    3}, {2, 4}, {2, 5}, {2, 6}, {2, 14}, {3, 4}, {3, 7}, {4, 
                    5}, {4, 8}, {4, 9}, {8, 10}, {9, 10}}, 
                    0.0378698213750627], 
                    Hue[0.6, 0.2, 0.8], 
                    EdgeForm[{
                    GrayLevel[0], 
                    Opacity[0.7]}], 
                    DiskBox[1, 0.05], 
                    DiskBox[2, 0.05], 
                    DiskBox[3, 0.05], 
                    DiskBox[4, 0.05], 
                    DiskBox[5, 0.05], 
                    DiskBox[6, 0.05], 
                    DiskBox[7, 0.05], 
                    DiskBox[8, 0.05], 
                    DiskBox[9, 0.05], 
                    DiskBox[10, 0.05], 
                    DiskBox[11, 0.05], 
                    DiskBox[12, 0.05], 
                    DiskBox[13, 0.05], 
                    DiskBox[14, 0.05]}], AspectRatio -> 1, Background -> 
                    GrayLevel[0.93], ImagePadding -> 0, FrameStyle -> 
                    Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Frame -> True, 
                    FrameTicks -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, (3.5 CurrentValue["FontCapHeight"])/
                    AbsoluteCurrentValue[Magnification]}], 
                    PlotRange -> {{-1.1, 2.4}, {-4.4, -0.7}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Vertex count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["16", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Edge count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["84", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                   False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[
                    
                    GraphicsComplexBox[{{
                    0.1, -3.31951456589972}, {-0.14816751450286603`, \
-2.625037331552915}, {0.6310524421714278, -1.3}, {
                    0.9405108616213151, -2.8841601437046225`}, {
                    0.4967448863824806, -2.092358403567382}, \
{-0.846735323402297, -1.466588600696043}, {
                    0.8846460183439665, -0.5107506168284197}, {
                    1.8939086566530445`, -2.50980168725566}, {
                    1.756629266633539, -3.4622764737192444`}, {
                    2.119361963550152, -2.99}, {-0.5709741939515942, \
-4.632295267644082}, {
                    0.20977925607671288`, -4.647162049737781}, \
{-1.0861820131541373`, -4.047493574735101}, {-1.2223073729506904`, \
-2.2040562174063485`}}, {
                    Hue[0.6, 0.7, 0.5], 
                    Opacity[0.7], 
                    Arrowheads[0.], 
                    
                    ArrowBox[{{1, 2}, {1, 4}, {1, 11}, {1, 12}, {1, 13}, {2, 
                    3}, {2, 4}, {2, 5}, {2, 6}, {2, 14}, {3, 4}, {3, 7}, {4, 
                    5}, {4, 8}, {4, 9}, {8, 10}, {9, 10}}, 
                    0.0378698213750627], 
                    Hue[0.6, 0.2, 0.8], 
                    EdgeForm[{
                    GrayLevel[0], 
                    Opacity[0.7]}], 
                    DiskBox[1, 0.05], 
                    DiskBox[2, 0.05], 
                    DiskBox[3, 0.05], 
                    DiskBox[4, 0.05], 
                    DiskBox[5, 0.05], 
                    DiskBox[6, 0.05], 
                    DiskBox[7, 0.05], 
                    DiskBox[8, 0.05], 
                    DiskBox[9, 0.05], 
                    DiskBox[10, 0.05], 
                    DiskBox[11, 0.05], 
                    DiskBox[12, 0.05], 
                    DiskBox[13, 0.05], 
                    DiskBox[14, 0.05]}], AspectRatio -> 1, Background -> 
                    GrayLevel[0.93], ImagePadding -> 0, FrameStyle -> 
                    Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Frame -> True, 
                    FrameTicks -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, (3.5 CurrentValue["FontCapHeight"])/
                    AbsoluteCurrentValue[Magnification]}], 
                    PlotRange -> {{-1.1, 2.4}, {-4.4, -0.7}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Vertex count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["16", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Edge count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["84", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"undirected graph with parallel edges\"", 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Connected graph: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    ConnectedGraphQ[Typeset`sgraph$$], StandardForm], 
                    SynchronousUpdating -> False, TrackedSymbols :> {}, 
                    CachedValue :> 
                    AnimatorBox[
                    0, {0, Infinity}, AppearanceElements -> "ProgressSlider", 
                    ImageSize -> 20]], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Acyclic graph: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    AcyclicGraphQ[Typeset`sgraph$$], StandardForm], 
                    SynchronousUpdating -> False, TrackedSymbols :> {}, 
                    CachedValue :> 
                    AnimatorBox[
                    0, {0, Infinity}, AppearanceElements -> "ProgressSlider", 
                    ImageSize -> 20]], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                   False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   BaselinePosition -> {1, 1}]}, 
                Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
              "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
          Typeset`sgraph$$, Selectable -> False, Editable -> False, 
          SelectWithContents -> True], DynamicModuleValues :> {}], 
        Setting[#, {0}]& ], "\"Daedaelus Mesh (16 Nodes)\""},
      "Labeled",
      DisplayFunction->(GridBox[{{
          
          ItemBox[#2, BaseStyle -> {Bold, 14}, DefaultBaseStyle -> 
           "LabeledLabel"]}, {
          TagBox[
           ItemBox[
            PaneBox[
             TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline},
              BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
           "SkipImageSizeLevel"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
        AutoDelete -> False, 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
        BaselinePosition -> {2, 1}]& ),
      InterpretationFunction->(RowBox[{"Labeled", "[", 
         RowBox[{#, ",", #2, ",", "Top", ",", 
           RowBox[{"{", 
             RowBox[{"LabelStyle", "\[Rule]", 
               RowBox[{"{", 
                 RowBox[{"Bold", ",", "14"}], "}"}]}], "}"}]}], "]"}]& )]},
    {
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-0.8428550619082302, 0.}, {3.8048069919883467`, 
         0.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6859999999999999], Thickness[Small]}], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6859999999999999], Thickness[Small]}], 
          RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867, 4.},
           RoundingRadius->0]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
          0.6859999999999999], Thickness[Small]}], 
          RectangleBox[{1.5487982520029133, 0.}, {2.4512017479970867, 3.},
           RoundingRadius->0]}}, {}, {}}, {}, {
        InsetBox["4", Offset[{0, 4}, {1., 4.}], ImageScaled[{0.5, 0}]], 
        InsetBox["3", Offset[{0, 4}, {2., 3.}], 
         ImageScaled[{0.5, 0}]]}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{-0.8428550619082302, 0.}, {3.870688128186453, 0.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 
                0.}]}], 
             LineBox[{{2.4512017479970867`, 0.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {2.4512017479970867`, 
                0.}]}], {{}, {}, {
               LineBox[{{1.4512017479970867`, 0.}, 
                 Offset[{-7.347880794884119*^-16, -4.}, {1.4512017479970867`, 
                  0.}]}], 
               LineBox[{{1.5487982520029133`, 0.}, 
                 Offset[{-7.347880794884119*^-16, -4.}, {1.5487982520029133`, 
                  0.}]}]}, {}}}, 
            StyleBox[
             {Thickness[Tiny], 
              InsetBox["\<\"Clos\"\>", Offset[{0, -2}, {1., 0.}], NCache[
               ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]], 
               Automatic, {1, 0}], 
              InsetBox["\<\"Mesh\"\>", Offset[{0, -2}, {2., 0.}], NCache[
               ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]], 
               Automatic, {1, 0}]}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{-0.8428550619082302, 0.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Identity[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImageSize->Medium,
      PlotLabel->FormBox[
        StyleBox[
        "\"Path Latency (Hop Count)\"", Bold, 12, StripOnInput -> False], 
        TraditionalForm],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.02], 
         Scaled[0.05]}},
      Ticks->{None, Automatic}], 
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-0.8428550619082302, -1.}, {
         3.8048069919883467`, -1.}}]}, {{}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
         0.6859999999999999], Thickness[
         Small]}], {}, {}}, {}, {}}, {}, {}, {}, {}, 
       StyleBox[
        StyleBox[{
          {Thickness[Tiny], 
           LineBox[{{-0.8428550619082302, -1.}, {3.870688128186453, -1.}}], 
           StyleBox[{}, "GraphicsLabel",
            StripOnInput->False]}, 
          StyleBox[{
            {Thickness[Tiny], 
             LineBox[{{0.5487982520029133, -1.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {
                0.5487982520029133, -1.}]}], 
             LineBox[{{2.4512017479970867`, -1.}, 
               Offset[{-1.102182119232618*^-15, -6.}, {
                2.4512017479970867`, -1.}]}], {{}, {}, {
               LineBox[{{1.4512017479970867`, -1.}, 
                 Offset[{-7.347880794884119*^-16, -4.}, {
                  1.4512017479970867`, -1.}]}], 
               LineBox[{{1.5487982520029133`, -1.}, 
                 Offset[{-7.347880794884119*^-16, -4.}, {
                  1.5487982520029133`, -1.}]}]}, {}}}, 
            StyleBox[
             {Thickness[Tiny], 
              InsetBox["\<\"Clos\"\>", Offset[{0, -2}, {1., -1.}], NCache[
               ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]], 
               Automatic, {1, 0}], 
              InsetBox["\<\"Mesh\"\>", Offset[{0, -2}, {2., -1.}], NCache[
               ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]], 
               Automatic, {1, 0}]}, "GraphicsLabel",
             StripOnInput->False]}, "GraphicsTicks",
           StripOnInput->False]},
         Antialiasing->False], "GraphicsAxes",
        StripOnInput->False]},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, True},
      AxesLabel->{None, None},
      AxesOrigin->{-0.8428550619082302, -1.},
      CoordinatesToolOptions:>{"DisplayFunction" -> ({
          Identity[
           Part[#, 1]], 
          Exp[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          Identity[
           Part[#, 1]], 
          Exp[
           Part[#, 2]]}& )},
      DisplayFunction->Identity,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{
         Charting`ScaledTicks[{Log, Exp}], 
         Charting`ScaledFrameTicks[{Log, Exp}]}, {Automatic, Automatic}},
      GridLines->{None, None},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImageSize->Medium,
      PlotLabel->FormBox[
        StyleBox[
        "\"Path Diversity (Spanning\:2011Tree Count)\"", Bold, 12, 
         StripOnInput -> False], TraditionalForm],
      PlotRange->{{All, All}, {All, All}},
      PlotRangePadding->{{
         Scaled[0.02], 
         Scaled[0.02]}, {
         Scaled[0.05], 
         Scaled[0.05]}},
      Ticks->FrontEndValueCache[{None, 
         Charting`ScaledTicks[{Log, Exp}]}, {None, {{-1.6094379124341003`, 
           FormBox[
            TagBox[
             InterpretationBox[
              StyleBox["\"0.2\"", ShowStringCharacters -> False], 
              0.2`15.954589770191003, AutoDelete -> True], NumberForm[#, {
               DirectedInfinity[1], 1}]& ], TraditionalForm], {0.01, 
           0.}}, {-0.916290731874155, 
           FormBox[
            TagBox[
             InterpretationBox[
              StyleBox["\"0.4\"", ShowStringCharacters -> False], 
              0.4`15.954589770191003, AutoDelete -> True], NumberForm[#, {
               DirectedInfinity[1], 1}]& ], TraditionalForm], {0.01, 
           0.}}, {-0.5108256237659907, 
           FormBox[
            TagBox[
             InterpretationBox[
              StyleBox["\"0.6\"", ShowStringCharacters -> False], 
              0.6`15.954589770191003, AutoDelete -> True], NumberForm[#, {
               DirectedInfinity[1], 1}]& ], TraditionalForm], {0.01, 
           0.}}, {-0.2231435513142097, 
           FormBox[
            TagBox[
             InterpretationBox[
              StyleBox["\"0.8\"", ShowStringCharacters -> False], 
              0.8`15.954589770191003, AutoDelete -> True], NumberForm[#, {
               DirectedInfinity[1], 1}]& ], TraditionalForm], {0.01, 0.}}, {
          0., 
           FormBox[
            TagBox[
             InterpretationBox[
              StyleBox["\"1.0\"", ShowStringCharacters -> False], 
              1.`15.954589770191003, AutoDelete -> True], NumberForm[#, {
               DirectedInfinity[1], 1}]& ], TraditionalForm], {0.01, 
           0.}}, {-2.995732273553991, 
           FormBox[
            TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
           0.}}, {-2.3025850929940455`, 
           FormBox[
            TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
           0.}}, {-1.8971199848858813`, 
           FormBox[
            TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
           0.}}, {-1.3862943611198906`, 
           FormBox[
            TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
           0.}}, {-1.2039728043259361`, 
           FormBox[
            TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
           0.}}, {-1.0498221244986778`, 
           FormBox[
            TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
           0.}}, {-0.7985076962177716, 
           FormBox[
            TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
           0.}}, {-0.6931471805599453, 
           FormBox[
            TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
           0.}}, {-0.5978370007556204, 
           FormBox[
            TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
           0.}}, {-0.4307829160924542, 
           FormBox[
            TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
           0.}}, {-0.35667494393873245`, 
           FormBox[
            TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
           0.}}, {-0.2876820724517809, 
           FormBox[
            TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
           0.}}, {-0.16251892949777494`, 
           FormBox[
            TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
           0.}}, {-0.10536051565782628`, 
           FormBox[
            TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
           0.}}, {-0.05129329438755058, 
           FormBox[
            TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
          0.04879016416943205, 
           FormBox[
            TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
          0.09531017980432493, 
           FormBox[
            TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
          0.13976194237515863`, 
           FormBox[
            TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
          0.1823215567939546, 
           FormBox[
            TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
           0.}}}}]]},
    {
     TemplateBox[{
       GraphicsBox[{{}, 
         InterpretationBox[{
           TagBox[{{{}, {}, 
              TagBox[{
                Hue[0.67, 0.6, 0.6], 
                Directive[
                 PointSize[
                  NCache[
                   Rational[7, 360], 0.019444444444444445`]], 
                 RGBColor[0.368417, 0.506779, 0.709798], 
                 AbsoluteThickness[2]], 
                
                LineBox[{{0., 1.}, {1., 1.}, {2., 3.}, {3., 3.}, {4., 3.}, {
                 5., 3.}, {6., 5.}, {7., 5.}, {8., 6.}, {9., 9.}, {10., 
                 8.}}]}, Annotation[#, "Charting`Private`Tag#1"]& ], 
              TagBox[{
                Hue[0.9060679774997897, 0.6, 0.6], 
                Directive[
                 PointSize[
                  NCache[
                   Rational[7, 360], 0.019444444444444445`]], 
                 RGBColor[0.880722, 0.611041, 0.142051], 
                 AbsoluteThickness[2]], 
                
                LineBox[{{0., 1.}, {1., 1.}, {2., 1.}, {3., 1.}, {4., 1.}, {
                 5., 1.}, {6., 1.}, {7., 1.}, {8., 1.}, {9., 1.}, {10., 
                 1.}}]}, Annotation[#, "Charting`Private`Tag#2"]& ]}}, {
            "WolframDynamicHighlight", <|
             "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
           StyleBox[
            DynamicBox[
             (Charting`HighlightActionBox["DynamicHighlight", {}, 
              Slot["HighlightElements"], 
              Slot["LayoutOptions"], 
              Slot["Meta"], 
              Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
                 Annotation[{
                   Hue[0.67, 0.6, 0.6], 
                   Directive[
                    PointSize[
                    Rational[7, 360]], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], 
                   
                   Line[{{0., 1.}, {1., 1.}, {2., 3.}, {3., 3.}, {4., 3.}, {
                    5., 3.}, {6., 5.}, {7., 5.}, {8., 6.}, {9., 9.}, {10., 
                    8.}}]}, "Charting`Private`Tag#1"], 
                 Annotation[{
                   Hue[0.9060679774997897, 0.6, 0.6], 
                   Directive[
                    PointSize[
                    Rational[7, 360]], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], 
                   
                   Line[{{0., 1.}, {1., 1.}, {2., 1.}, {3., 1.}, {4., 1.}, {
                    5., 1.}, {6., 1.}, {7., 1.}, {8., 1.}, {9., 1.}, {10., 
                    1.}}]}, "Charting`Private`Tag#2"]}}, <|
               "HighlightElements" -> <|
                 "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
                "LayoutOptions" -> <|
                 "PanelPlotLayout" -> <||>, 
                  "PlotRange" -> {{0, 10.}, {0, 9.}}, 
                  "Frame" -> {{False, False}, {False, False}}, 
                  "AxesOrigin" -> {0, 0}, 
                  "ImageSize" -> {360, 360/GoldenRatio}, 
                  "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
                  GoldenRatio^(-1), "DefaultStyle" -> {
                    Directive[
                    PointSize[
                    Rational[7, 360]], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], 
                    Directive[
                    PointSize[
                    Rational[7, 360]], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]]}, 
                  "HighlightLabelingFunctions" -> <|
                   "CoordinatesToolOptions" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), 
                    "ScalingFunctions" -> {{Identity, Identity}, {
                    Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
                  False|>, 
                "Meta" -> <|
                 "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
                  "Function" -> ListLinePlot, "GroupHighlight" -> 
                  False|>|>]]& )[<|
              "HighlightElements" -> <|
                "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
               "LayoutOptions" -> <|
                "PanelPlotLayout" -> <||>, "PlotRange" -> {{0, 10.}, {0, 9.}},
                  "Frame" -> {{False, False}, {False, False}}, 
                 "AxesOrigin" -> {0, 0}, 
                 "ImageSize" -> {360, 360/GoldenRatio}, 
                 "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
                 GoldenRatio^(-1), "DefaultStyle" -> {
                   Directive[
                    PointSize[
                    Rational[7, 360]], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], 
                   Directive[
                    PointSize[
                    Rational[7, 360]], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]]}, 
                 "HighlightLabelingFunctions" -> <|
                  "CoordinatesToolOptions" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), 
                   "ScalingFunctions" -> {{Identity, Identity}, {
                    Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
                 False|>, 
               "Meta" -> <|
                "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
                 "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>]], 
            Selectable -> False]}, 
          Annotation[{{{}, {}, 
             Annotation[{
               Hue[0.67, 0.6, 0.6], 
               Directive[
                PointSize[
                 Rational[7, 360]], 
                RGBColor[0.368417, 0.506779, 0.709798], 
                AbsoluteThickness[2]], 
               
               Line[{{0., 1.}, {1., 1.}, {2., 3.}, {3., 3.}, {4., 3.}, {5., 
                3.}, {6., 5.}, {7., 5.}, {8., 6.}, {9., 9.}, {10., 8.}}]}, 
              "Charting`Private`Tag#1"], 
             Annotation[{
               Hue[0.9060679774997897, 0.6, 0.6], 
               Directive[
                PointSize[
                 Rational[7, 360]], 
                RGBColor[0.880722, 0.611041, 0.142051], 
                AbsoluteThickness[2]], 
               
               Line[{{0., 1.}, {1., 1.}, {2., 1.}, {3., 1.}, {4., 1.}, {5., 
                1.}, {6., 1.}, {7., 1.}, {8., 1.}, {9., 1.}, {10., 1.}}]}, 
              "Charting`Private`Tag#2"]}}, <|
           "HighlightElements" -> <|
             "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
            "LayoutOptions" -> <|
             "PanelPlotLayout" -> <||>, "PlotRange" -> {{0, 10.}, {0, 9.}}, 
              "Frame" -> {{False, False}, {False, False}}, 
              "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
              "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
              GoldenRatio^(-1), "DefaultStyle" -> {
                Directive[
                 PointSize[
                  Rational[7, 360]], 
                 RGBColor[0.880722, 0.611041, 0.142051], 
                 AbsoluteThickness[2]], 
                Directive[
                 PointSize[
                  Rational[7, 360]], 
                 RGBColor[0.368417, 0.506779, 0.709798], 
                 AbsoluteThickness[2]]}, 
              "HighlightLabelingFunctions" -> <|
               "CoordinatesToolOptions" -> ({
                  Identity[
                   Part[#, 1]], 
                  Identity[
                   Part[#, 2]]}& ), 
                "ScalingFunctions" -> {{Identity, Identity}, {
                  Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
              False|>, 
            "Meta" -> <|
             "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
              "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>, 
           "DynamicHighlight"]], {{}, {}}}, {
        DisplayFunction -> Identity, DisplayFunction -> Identity, 
         DisplayFunction -> Identity, AspectRatio -> 
         NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
         AxesLabel -> {
           FormBox[
            TagBox["\"Edges Removed\"", HoldForm], TraditionalForm], 
           FormBox[
            TagBox["\"Connected Components\"", HoldForm], TraditionalForm]}, 
         AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
         Frame -> {{False, False}, {False, False}}, 
         FrameLabel -> {{None, None}, {None, None}}, 
         FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
         GridLines -> {None, None}, GridLinesStyle -> Directive[
           GrayLevel[0.5, 0.4]], ImageSize -> Medium, 
         Method -> {
          "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
           "DefaultGraphicsInteraction" -> {
            "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
             "Effects" -> {
              "Highlight" -> {"ratio" -> 2}, 
               "HighlightPoint" -> {"ratio" -> 2}, 
               "Droplines" -> {
                "freeformCursorMode" -> True, 
                 "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
           "DefaultMeshStyle" -> AbsolutePointSize[6], 
           "DefaultPlotStyle" -> {
             Directive[
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.880722, 0.611041, 0.142051], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.560181, 0.691569, 0.194885], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.922526, 0.385626, 0.209179], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.528488, 0.470624, 0.701351], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.772079, 0.431554, 0.102387], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.363898, 0.618501, 0.782349], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[1, 0.75, 0], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.647624, 0.37816, 0.614037], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.571589, 0.586483, 0.], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.915, 0.3325, 0.2125], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[
              0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
              AbsoluteThickness[2]], 
             Directive[
              RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
              AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
           "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> True, 
           "IncludeHighlighting" -> "CurrentSet", "HighlightStyle" -> 
           Automatic, "OptimizePlotMarkers" -> True, 
           "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& ), "CopiedValueFunction" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& )}}, PlotLabel -> FormBox[
           StyleBox[
           "\"Resilience to Random Link Failures\"", Bold, 12, StripOnInput -> 
            False], TraditionalForm], PlotRange -> {{0, 10.}, {0, 9.}}, 
         PlotRangeClipping -> True, PlotRangePadding -> {{
            Scaled[0.02], 
            Scaled[0.02]}, {
            Scaled[0.02], 
            Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
       FormBox[
        FormBox[
         TemplateBox[{"\"Clos\"", "\"Mesh\""}, "LineLegend", 
          DisplayFunction -> (FormBox[
            StyleBox[
             StyleBox[
              PaneBox[
               TagBox[
                GridBox[{{
                   TagBox[
                    GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #2}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
                "Grid"], Alignment -> Left, AppearanceElements -> None, 
               ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
               "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
             FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
             False], TraditionalForm]& ), 
          InterpretationFunction :> (RowBox[{"LineLegend", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["7", "360"], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                    RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["7", "360"], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                    RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}]}], 
                 "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{#, ",", #2}], "}"}], ",", 
               RowBox[{"LegendMarkers", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], 
               ",", 
               RowBox[{"Joined", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{"True", ",", "True"}], "}"}]}], ",", 
               RowBox[{"LabelStyle", "\[Rule]", 
                 RowBox[{"{", "}"}]}], ",", 
               RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
          Editable -> True], TraditionalForm], TraditionalForm]},
      "Legended",
      DisplayFunction->(GridBox[{{
          TagBox[
           ItemBox[
            PaneBox[
             TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline},
              BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
           "SkipImageSizeLevel"], 
          ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
        AutoDelete -> False, GridBoxItemSize -> Automatic, 
        BaselinePosition -> {1, 1}]& ),
      Editable->True,
      InterpretationFunction->(RowBox[{"Legended", "[", 
         RowBox[{#, ",", 
           RowBox[{"Placed", "[", 
             RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )], "\[SpanFromLeft]"}
   },
   AutoDelete->False,
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{2}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.962812743527932*^9, 3.96281278914122*^9, 3.962875728039565*^9, 
   3.962876281617564*^9, {3.962897129314947*^9, 3.962897149176704*^9}, 
   3.962897191563291*^9, 3.9628972309401093`*^9, 3.962897535820065*^9},
 CellLabel->
  "Out[5534]=",ExpressionUUID->"f40a2cb9-c922-41f2-9f7f-890d58c51bea"]
}, Open  ]]
}, Open  ]],

Cell["\<\
Hop Count as a First-Order Latency Metric: Utility and Limitations\
\>", "Subtitle",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898307534945*^9}, {
   3.962898368042245*^9, 3.962898369635974*^9}, {3.962898493181312*^9, 
   3.9628984941794252`*^9}, {3.9628987079145727`*^9, 3.962898708877008*^9}},
 FormatType->"TextForm",
 FontSize->18,
 Background->None,ExpressionUUID->"0764c1a0-3e48-47b1-9d84-d32930535748"],

Cell[CellGroupData[{

Cell["\<\
Hop count is a fundamental networking metric that measures the number of \
intermediate devices, such as routers or switches, that a data packet \
traverses on its path from a source to a destination. Each network segment a \
packet crosses constitutes a \[OpenCurlyDoubleQuote]hop.\
\[CloseCurlyDoubleQuote] This simple, easy-to-understand measure of path \
length is used by foundational routing protocols, most notably the Routing \
Information Protocol (RIP), to determine the \[OpenCurlyDoubleQuote]shortest\
\[CloseCurlyDoubleQuote] available path to a destination. It is also the core \
principle behind the ubiquitous `traceroute` diagnostic utility, which maps \
the path a packet takes by identifying each intermediate hop. The underlying \
logic is intuitive: a path with fewer hops generally involves fewer devices \
and network segments, suggesting a shorter and therefore faster transmission \
time, as each hop introduces processing, queuing, and store-and-forward \
delays. \[NonBreakingSpace] 

Operationally, hop count is managed through the Time-to-Live (TTL) field in \
the IPv4 header (or the Hop Limit field in IPv6). This value is decremented \
by one at each router hop. If the TTL reaches zero, the packet is discarded, \
a crucial mechanism that prevents packets from circulating endlessly in the \
network in the event of a routing loop. \[NonBreakingSpace] 

However, it is imperative to recognize that hop count is only a rough, \
first-order proxy for actual end-to-end latency. Relying on it exclusively \
can be misleading because it ignores several critical factors that contribute \
to delay. The metric does not account for the bandwidth of the links; a path \
with few hops over slow, highly congested links can easily exhibit higher \
latency than a path with more hops over high-bandwidth, uncongested links. \
Furthermore, hop count does not consider the processing power or current load \
of the intermediate devices themselves, nor does it factor in the physical \
distance of the cables, which determines the signal propagation delay\
\[LongDash]a non-negligible component of latency in geographically \
distributed networks. Therefore, while the simulation\[CloseCurlyQuote]s use \
of hop count provides a valuable structural comparison of path lengths, its \
results must be interpreted with a clear understanding of these limitations. \
\[NonBreakingSpace] \
\>", "Chapter",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898338257278*^9}, {
   3.962898381402219*^9, 3.96289842166496*^9}, {3.96289849829926*^9, 
   3.962898570547124*^9}, {3.962898605101194*^9, 3.9628986082485447`*^9}, {
   3.962898718588675*^9, 3.962898749672501*^9}},
 FormatType->"TextForm",
 FontSize->14,
 Background->None,ExpressionUUID->"e5c5af7c-7360-4022-8255-463c75966ceb"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"generateClosNetwork", "[", 
    RowBox[{"racks_Integer", ",", "srv_Integer", ",", "spines_Integer"}], 
    "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "serverNodes", ",", "torNodes", ",", "spineNodes", ",", "edges", ",", 
       "g", ",", "layout"}], "}"}], ",", 
     RowBox[{
      RowBox[{"serverNodes", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"\"\<S\>\"", "<>", 
           RowBox[{"ToString", "[", "i", "]"}], "<>", "\"\<,\>\"", "<>", 
           RowBox[{"ToString", "[", "j", "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "racks"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "srv"}], "}"}]}], "]"}], "]"}]}], ";", 
      RowBox[{"torNodes", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"\"\<T\>\"", "<>", 
          RowBox[{"ToString", "[", "i", "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "racks"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"spineNodes", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"\"\<SP\>\"", "<>", 
          RowBox[{"ToString", "[", "k", "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", "spines"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"edges", "=", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"\"\<S\>\"", "<>", 
              RowBox[{"ToString", "[", "i", "]"}], "<>", "\"\<,\>\"", "<>", 
              RowBox[{"ToString", "[", "j", "]"}]}], "\[TwoWayRule]", 
             RowBox[{"\"\<T\>\"", "<>", 
              RowBox[{"ToString", "[", "i", "]"}]}]}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "racks"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"j", ",", "srv"}], "}"}]}], "]"}], "]"}], ",", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"t", "\[TwoWayRule]", "s"}], ",", 
            RowBox[{"{", 
             RowBox[{"t", ",", "torNodes"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"s", ",", "spineNodes"}], "}"}]}], "]"}], "]"}]}], 
        "]"}]}], ";", 
      RowBox[{"g", "=", 
       RowBox[{"Graph", "[", 
        RowBox[{
         RowBox[{"Join", "[", 
          RowBox[{"serverNodes", ",", "torNodes", ",", "spineNodes"}], "]"}], 
         ",", "edges", ",", 
         RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]}], ";", 
      
      RowBox[{"layout", "=", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"Thread", "[", 
          RowBox[{"serverNodes", "\[Rule]", 
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"j", "+", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}], " ", 
                   RowBox[{"(", 
                    RowBox[{"srv", "+", "1"}], ")"}]}]}], ",", "1"}], "}"}], 
               ",", 
               RowBox[{"{", 
                RowBox[{"i", ",", "racks"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"j", ",", "srv"}], "}"}]}], "]"}], ",", "1"}], 
            "]"}]}], "]"}], ",", 
         RowBox[{"Thread", "[", 
          RowBox[{"torNodes", "\[Rule]", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"Mean", "[", 
                 RowBox[{"Range", "[", 
                  RowBox[{"1", ",", "srv"}], "]"}], "]"}], "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"i", "-", "1"}], ")"}], " ", 
                 RowBox[{"(", 
                  RowBox[{"srv", "+", "1"}], ")"}]}]}], ",", "2.5"}], "}"}], 
             ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "racks"}], "}"}]}], "]"}]}], "]"}], ",", 
         RowBox[{"Thread", "[", 
          RowBox[{"spineNodes", "\[Rule]", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Mean", "[", 
                RowBox[{"Range", "[", 
                 RowBox[{"1", ",", 
                  RowBox[{"racks", " ", 
                   RowBox[{"(", 
                    RowBox[{"srv", "+", "1"}], ")"}]}]}], "]"}], "]"}], ",", 
               RowBox[{"4", "+", "k"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"k", ",", "spines"}], "}"}]}], "]"}]}], "]"}]}], 
        "]"}]}], ";", 
      RowBox[{"Association", "[", 
       RowBox[{"\"\<Graph\>\"", "\[Rule]", 
        RowBox[{"Graph", "[", 
         RowBox[{
          RowBox[{"VertexList", "[", "g", "]"}], ",", 
          RowBox[{"EdgeList", "[", "g", "]"}], ",", 
          RowBox[{"VertexCoordinates", "\[Rule]", "layout"}]}], "]"}]}], 
       "]"}]}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"generateMeshNetwork", "[", 
    RowBox[{"rows_Integer", ",", "cols_Integer"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"nodes", ",", "edges", ",", "g"}], "}"}], ",", 
     RowBox[{
      RowBox[{"nodes", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"\"\<N\>\"", "<>", 
           RowBox[{"ToString", "[", "r", "]"}], "<>", "\"\<,\>\"", "<>", 
           RowBox[{"ToString", "[", "c", "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"r", ",", "rows"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"c", ",", "cols"}], "}"}]}], "]"}], "]"}]}], ";", 
      RowBox[{"edges", "=", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"\"\<N\>\"", "<>", 
              RowBox[{"ToString", "[", "r", "]"}], "<>", "\"\<,\>\"", "<>", 
              RowBox[{"ToString", "[", "c", "]"}]}], "\[TwoWayRule]", 
             RowBox[{"\"\<N\>\"", "<>", 
              RowBox[{"ToString", "[", "r", "]"}], "<>", "\"\<,\>\"", "<>", 
              RowBox[{"ToString", "[", 
               RowBox[{"c", "+", "1"}], "]"}]}]}], ",", 
            RowBox[{"{", 
             RowBox[{"r", ",", "rows"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"c", ",", 
              RowBox[{"cols", "-", "1"}]}], "}"}]}], "]"}], "]"}], ",", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"\"\<N\>\"", "<>", 
              RowBox[{"ToString", "[", "r", "]"}], "<>", "\"\<,\>\"", "<>", 
              RowBox[{"ToString", "[", "c", "]"}]}], "\[TwoWayRule]", 
             RowBox[{"\"\<N\>\"", "<>", 
              RowBox[{"ToString", "[", 
               RowBox[{"r", "+", "1"}], "]"}], "<>", "\"\<,\>\"", "<>", 
              RowBox[{"ToString", "[", "c", "]"}]}]}], ",", 
            RowBox[{"{", 
             RowBox[{"r", ",", 
              RowBox[{"rows", "-", "1"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"c", ",", "cols"}], "}"}]}], "]"}], "]"}]}], "]"}]}], 
      ";", 
      RowBox[{"g", "=", 
       RowBox[{"Graph", "[", 
        RowBox[{"nodes", ",", "edges", ",", 
         RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}], ",", 
         RowBox[{"GraphLayout", "\[Rule]", "\"\<GridEmbedding\>\""}]}], 
        "]"}]}], ";", 
      RowBox[{"Association", "[", 
       RowBox[{"\"\<Graph\>\"", "\[Rule]", "g"}], "]"}]}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"spanningTreeCount", "[", "g_Graph", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "km", "}"}], ",", 
     RowBox[{
      RowBox[{"km", "=", 
       RowBox[{"KirchhoffMatrix", "[", "g", "]"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"VertexCount", "[", "g", "]"}], ">", "1"}], ",", 
        RowBox[{"Det", "[", 
         RowBox[{"Most", "[", 
          RowBox[{"Transpose", "[", 
           RowBox[{"Most", "[", "km", "]"}], "]"}], "]"}], "]"}], ",", "0"}], 
       "]"}]}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"calculateResilience", "[", 
    RowBox[{"g_Graph", ",", "failures_Integer"}], "]"}], ":=", 
   RowBox[{"Length", "[", 
    RowBox[{"ConnectedComponents", "[", 
     RowBox[{"EdgeDelete", "[", 
      RowBox[{"g", ",", 
       RowBox[{"RandomSample", "[", 
        RowBox[{
         RowBox[{"EdgeList", "[", "g", "]"}], ",", 
         RowBox[{"Min", "[", 
          RowBox[{"failures", ",", 
           RowBox[{"EdgeCount", "[", "g", "]"}]}], "]"}]}], "]"}]}], "]"}], 
     "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"Style", "[", 
    RowBox[{
    "\"\<\\nNetwork Topology Comparison\>\"", ",", "Bold", ",", "20"}], "]"}],
    "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"closData", "=", 
   RowBox[{"generateClosNetwork", "[", 
    RowBox[{"4", ",", "4", ",", "2"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"meshData", "=", 
   RowBox[{"generateMeshNetwork", "[", 
    RowBox[{"4", ",", "4"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"closGraph", "=", 
   RowBox[{"closData", "[", "\"\<Graph\>\"", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"meshGraph", "=", 
   RowBox[{"meshData", "[", "\"\<Graph\>\"", "]"}]}], ";"}], "\n", 
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Labeled", "[", 
       RowBox[{"closGraph", ",", 
        RowBox[{"Style", "[", 
         RowBox[{"\"\<Clos Network (Decentralized Control)\>\"", ",", "14"}], 
         "]"}], ",", "Top"}], "]"}], ",", 
      RowBox[{"Labeled", "[", 
       RowBox[{"meshGraph", ",", 
        RowBox[{"Style", "[", 
         RowBox[{
         "\"\<Daedaelus N2N Lattice (Distributed Control)\>\"", ",", "14"}], 
         "]"}], ",", "Top"}], "]"}]}], "}"}], "}"}], ",", 
   RowBox[{"Spacings", "\[Rule]", "5"}]}], "]"}], "\n", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"Style", "[", 
    RowBox[{
    "\"\<\\nSpanning Tree Count (Resilience Metric)\>\"", ",", "Bold", ",", 
     "20"}], "]"}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"closTrees", "=", 
   RowBox[{"spanningTreeCount", "[", "closGraph", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"meshTrees", "=", 
   RowBox[{"spanningTreeCount", "[", "meshGraph", "]"}]}], ";"}], "\n", 
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<Clos\>\"", ",", "closTrees"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<N2N Lattice\>\"", ",", "meshTrees"}], "}"}]}], "}"}], ",", 
   
   RowBox[{"ChartLabels", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NumberForm", "[", 
       RowBox[{"closTrees", ",", 
        RowBox[{"ExponentFunction", "\[Rule]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"#1", "\[Equal]", "0"}], ",", "Null", ",", "#1"}], "]"}],
            "&"}], ")"}]}]}], "]"}], ",", 
      RowBox[{"NumberForm", "[", 
       RowBox[{"meshTrees", ",", 
        RowBox[{"ExponentFunction", "\[Rule]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"#1", "\[Equal]", "0"}], ",", "Null", ",", "#1"}], "]"}],
            "&"}], ")"}]}]}], "]"}]}], "}"}]}], ",", 
   RowBox[{"ScalingFunctions", "\[Rule]", "\"\<Log\>\""}], ",", 
   RowBox[{
   "PlotLabel", "\[Rule]", 
    "\"\<Number of Unique Paths (Higher is More Resilient)\>\""}], ",", 
   RowBox[{"ChartStyle", "\[Rule]", "\"\<Pastel\>\""}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], "\n", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"Style", "[", 
    RowBox[{
    "\"\<\\nResilience to Edge Failures\>\"", ",", "Bold", ",", "20"}], "]"}],
    "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"maxFailures", "=", 
   RowBox[{
    RowBox[{"EdgeCount", "[", "closGraph", "]"}], "-", 
    RowBox[{"VertexCount", "[", "closGraph", "]"}], "+", "1"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"resilienceClos", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"calculateResilience", "[", 
      RowBox[{"closGraph", ",", "k"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"k", ",", "0", ",", "maxFailures"}], "}"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"resilienceMesh", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"calculateResilience", "[", 
      RowBox[{"meshGraph", ",", "k"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"k", ",", "0", ",", "maxFailures"}], "}"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"resilienceClos", ",", "resilienceMesh"}], "}"}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Clos\>\"", ",", "\"\<N2N Lattice\>\""}], "}"}]}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Edges Removed (Failures)\>\"", ",", "\"\<Network Partitions\>\""}], 
     "}"}]}], ",", 
   RowBox[{
   "PlotLabel", "\[Rule]", "\"\<Network Fragmentation Under Failure\>\""}], 
   ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Thick", ",", "Dashed"}], "}"}]}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}]}], "Code",
 CellChangeTimes->{{3.962893182855464*^9, 3.962893191151026*^9}},
 CellLabel->
  "In[4286]:=",ExpressionUUID->"f4f224b7-47bd-4d57-877d-9fc84f932898"],

Cell[BoxData[
 StyleBox["\<\"\\nNetwork Topology Comparison\"\>",
  StripOnInput->False,
  FontSize->20,
  FontWeight->Bold]], "Print",
 CellChangeTimes->{{3.96289318303321*^9, 3.9628931914968977`*^9}},
 CellLabel->
  "During evaluation of \
In[4286]:=",ExpressionUUID->"1decbd1c-057f-4b16-86b0-044e4f683054"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TemplateBox[{
       GraphicsBox[
        NamespaceBox["NetworkGraphics", 
         DynamicModuleBox[{Typeset`graph = HoldComplete[
             
             Graph[{"Spine1", "Spine2", "Leaf1", "Leaf2", "Leaf3", "Leaf4", 
               "S1_1", "S1_2", "S1_3", "S1_4", "S2_1", "S2_2", "S2_3", "S2_4",
                "S3_1", "S3_2", "S3_3", "S3_4", "S4_1", "S4_2", "S4_3", 
               "S4_4"}, {
              Null, {{1, 3}, {2, 3}, {1, 4}, {2, 4}, {1, 5}, {2, 5}, {1, 6}, {
               2, 6}, {3, 7}, {3, 8}, {3, 9}, {3, 10}, {4, 11}, {4, 12}, {4, 
               13}, {4, 14}, {5, 15}, {5, 16}, {5, 17}, {5, 18}, {6, 19}, {6, 
               20}, {6, 21}, {6, 22}}}]]}, 
          TagBox[
           GraphicsGroupBox[
            GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGAQA2IQzcazMmd9EKPDblYzlXQTRoeujY8XnNrA4PB0zhHv
/+//2z+L5VvLvozLgYG14fT7RYwOxtw/FK/LMjkc+71ZIF7prX3Rty79T6Vv
7dk4UnuuCf23L5LjD/Y++9/+xPmkg6pPOB3ezGH7xHFWwCEm14pjmRuLwzKB
RZc0BAUcJG7OCHNf88t+mc3stA2Mgg7yIjoLz09lcIi5bWhoxcvvoJStpF3N
we6Q8vMnt9VlFocDFw7J+lqssT81P+mGRwy7wxrz1EvHz96yD8r4vzH9xm97
FoVUL+MVF+0vlt6dHyvG6MAABR+el/33Fj9nb1T65kzENWYHh8CEiC/rr9vH
VF2bIuT+xR6mrmqe+W7faQwOB7YnCcgEr7L/unEbz9ZTP+03SVsraEmwOKi8
THW2+M7ncMCXYZrOOwaHuNvTPm2fJuAQfk/0iEvSL/trLSuX88UJOLTEn9u/
P/CrPVeTf7LwZV4HAMtBk+k=
             "], {{
               Directive[
                Opacity[0.7], 
                Hue[0.6, 0.7, 0.5]], 
               Arrowheads[0.], {
                
                ArrowBox[{{1, 3}, {1, 4}, {1, 5}, {1, 6}, {2, 3}, {2, 4}, {2, 
                 5}, {2, 6}, {3, 7}, {3, 8}, {3, 9}, {3, 10}, {4, 11}, {4, 
                 12}, {4, 13}, {4, 14}, {5, 15}, {5, 16}, {5, 17}, {5, 18}, {
                 6, 19}, {6, 20}, {6, 21}, {6, 22}}, 0.03858962501291395]}}, {
              
               Directive[
                Hue[0.6, 0.2, 0.8], 
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.7]]]], 
               DiskBox[1, 0.03858962501291395], 
               DiskBox[2, 0.03858962501291395], 
               DiskBox[3, 0.03858962501291395], 
               DiskBox[4, 0.03858962501291395], 
               DiskBox[5, 0.03858962501291395], 
               DiskBox[6, 0.03858962501291395], 
               DiskBox[7, 0.03858962501291395], 
               DiskBox[8, 0.03858962501291395], 
               DiskBox[9, 0.03858962501291395], 
               DiskBox[10, 0.03858962501291395], 
               DiskBox[11, 0.03858962501291395], 
               DiskBox[12, 0.03858962501291395], 
               DiskBox[13, 0.03858962501291395], 
               DiskBox[14, 0.03858962501291395], 
               DiskBox[15, 0.03858962501291395], 
               DiskBox[16, 0.03858962501291395], 
               DiskBox[17, 0.03858962501291395], 
               DiskBox[18, 0.03858962501291395], 
               DiskBox[19, 0.03858962501291395], 
               DiskBox[20, 0.03858962501291395], 
               DiskBox[21, 0.03858962501291395], 
               DiskBox[22, 0.03858962501291395]}}]], 
           MouseAppearanceTag["NetworkGraphics"]], AllowKernelInitialization -> 
          False]], {
        FormatType -> TraditionalForm, FrameTicks -> None, DefaultBaseStyle -> 
         "NetworkGraphics"}], 
       StyleBox[
       "\"Clos Network (Decentralized Control)\"", 14, StripOnInput -> False]},
      "Labeled",
      DisplayFunction->(GridBox[{{
          ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}, {
          TagBox[
           ItemBox[
            PaneBox[
             TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline},
              BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
           "SkipImageSizeLevel"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
        AutoDelete -> False, 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
        BaselinePosition -> {2, 1}]& ),
      InterpretationFunction->(RowBox[{"Labeled", "[", 
         RowBox[{#, ",", #2, ",", "Top", ",", 
           RowBox[{"{", "}"}]}], "]"}]& )], 
     TemplateBox[{
       GraphicsBox[
        NamespaceBox["NetworkGraphics", 
         DynamicModuleBox[{Typeset`graph = HoldComplete[
             
             Graph[{"N1,1", "N1,2", "N1,3", "N1,4", "N2,1", "N2,2", "N2,3", 
               "N2,4", "N3,1", "N3,2", "N3,3", "N3,4", "N4,1", "N4,2", "N4,3",
                "N4,4"}, {
              Null, {{1, 2}, {2, 3}, {3, 4}, {5, 6}, {6, 7}, {7, 8}, {9, 
               10}, {10, 11}, {11, 12}, {13, 14}, {14, 15}, {15, 16}, {1, 
               5}, {2, 6}, {3, 7}, {4, 8}, {5, 9}, {6, 10}, {7, 11}, {8, 
               12}, {9, 13}, {10, 14}, {11, 15}, {12, 16}}}, {
              GraphLayout -> "GridEmbedding", VertexLabels -> {"Name"}}]]}, 
          TagBox[
           GraphicsGroupBox[{{
              Directive[
               Opacity[0.7], 
               Hue[0.6, 0.7, 0.5]], 
              Arrowheads[0.], {
               ArrowBox[CompressedData["
1:eJxTTMoPSmVmYGCQAGImKIaAD/bYaQYHysQ5HLDLo9O41AvgkIfpw6UeJo/O
J9cduNSju4dUcXT3ceCg0dVz4OCTGk6E1BNyByH16O4jVhwXTWw8EwonhLkA
kZgulQ==
                "], 0.030239520958083826`]}}, {
              Directive[
               Hue[0.6, 0.2, 0.8], 
               EdgeForm[
                Directive[
                 GrayLevel[0], 
                 Opacity[0.7]]]], {
               DiskBox[{1., 1.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N1,1\"", TraditionalForm], 
                Offset[{2, 2}, {1.030239520958084, 1.030239520958084}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
               DiskBox[{1., 2.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N1,2\"", TraditionalForm], 
                Offset[{2, 2}, {1.030239520958084, 2.0302395209580837`}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
               DiskBox[{1., 3.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N1,3\"", TraditionalForm], 
                Offset[{2, 2}, {1.030239520958084, 3.0302395209580837`}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
               DiskBox[{1., 4.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N1,4\"", TraditionalForm], 
                Offset[{2, 2}, {1.030239520958084, 4.030239520958084}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
               DiskBox[{2., 1.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N2,1\"", TraditionalForm], 
                Offset[{2, 2}, {2.0302395209580837`, 1.030239520958084}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
               DiskBox[{2., 2.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N2,2\"", TraditionalForm], 
                Offset[{2, 2}, {2.0302395209580837`, 2.0302395209580837`}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
               DiskBox[{2., 3.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N2,3\"", TraditionalForm], 
                Offset[{2, 2}, {2.0302395209580837`, 3.0302395209580837`}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
               DiskBox[{2., 4.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N2,4\"", TraditionalForm], 
                Offset[{2, 2}, {2.0302395209580837`, 4.030239520958084}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
               DiskBox[{3., 1.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N3,1\"", TraditionalForm], 
                Offset[{2, 2}, {3.0302395209580837`, 1.030239520958084}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
               DiskBox[{3., 2.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N3,2\"", TraditionalForm], 
                Offset[{2, 2}, {3.0302395209580837`, 2.0302395209580837`}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
               DiskBox[{3., 3.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N3,3\"", TraditionalForm], 
                Offset[{2, 2}, {3.0302395209580837`, 3.0302395209580837`}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
               DiskBox[{3., 4.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N3,4\"", TraditionalForm], 
                Offset[{2, 2}, {3.0302395209580837`, 4.030239520958084}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
               DiskBox[{4., 1.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N4,1\"", TraditionalForm], 
                Offset[{2, 2}, {4.030239520958084, 1.030239520958084}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
               DiskBox[{4., 2.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N4,2\"", TraditionalForm], 
                Offset[{2, 2}, {4.030239520958084, 2.0302395209580837`}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
               DiskBox[{4., 3.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N4,3\"", TraditionalForm], 
                Offset[{2, 2}, {4.030239520958084, 3.0302395209580837`}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
               DiskBox[{4., 4.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N4,4\"", TraditionalForm], 
                Offset[{2, 2}, {4.030239520958084, 4.030239520958084}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}}}], 
           MouseAppearanceTag["NetworkGraphics"]], AllowKernelInitialization -> 
          False]], {
        FormatType -> TraditionalForm, FrameTicks -> None, DefaultBaseStyle -> 
         "NetworkGraphics"}], 
       StyleBox[
       "\"Daedaelus N2N Lattice (Distributed Control)\"", 14, StripOnInput -> 
        False]},
      "Labeled",
      DisplayFunction->(GridBox[{{
          ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}, {
          TagBox[
           ItemBox[
            PaneBox[
             TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline},
              BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
           "SkipImageSizeLevel"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
        AutoDelete -> False, 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
        BaselinePosition -> {2, 1}]& ),
      InterpretationFunction->(RowBox[{"Labeled", "[", 
         RowBox[{#, ",", #2, ",", "Top", ",", 
           RowBox[{"{", "}"}]}], "]"}]& )]}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{5}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.962893183073016*^9, 3.9628931915365133`*^9}},
 CellLabel->
  "Out[4296]=",ExpressionUUID->"e8d0eb5c-98fe-4da3-bf74-f48cab003918"],

Cell[BoxData[
 StyleBox["\<\"\\nSpanning Tree Count (Resilience Metric)\"\>",
  StripOnInput->False,
  FontSize->20,
  FontWeight->Bold]], "Print",
 CellChangeTimes->{{3.96289318303321*^9, 3.962893191546647*^9}},
 CellLabel->
  "During evaluation of \
In[4286]:=",ExpressionUUID->"f58c0fa9-b36c-4838-ba1c-efcfd987cb6c"],

Cell[BoxData[
 GraphicsBox[{
   {Opacity[0], 
    PointBox[{{0.3552804078659868, 2.4657359027997265`}, {5.243991260014567, 
     2.4657359027997265`}}]}, {{}, {{{}, {{}, {{}, 
        {RGBColor[0.431296, 0.709773, 0.927077], EdgeForm[{Opacity[
         0.6719999999999999], Thickness[Small]}], 
         TagBox[
          TooltipBox[
           
           TagBox[RectangleBox[{1.7439912600145666, 2.4657359027997265}, {2.64639475600874, 3.4657359027997265},
             
             RoundingRadius->0],
            StatusArea[#, 32]& ,
            TagBoxNote->"32"],
           StyleBox["32", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[32, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{}, 
        {RGBColor[0.431296, 0.709773, 0.927077], EdgeForm[{Opacity[
         0.6719999999999999], Thickness[Small]}], 
         TagBox[
          TooltipBox[
           
           TagBox[RectangleBox[{4.0367807720320465, 2.4657359027997265}, {4.93918426802622, 11.516439284270025},
             
             RoundingRadius->0],
            StatusArea[#, 100352]& ,
            TagBoxNote->"100352"],
           StyleBox["100352", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[100352, {}], 
           "Tooltip"]& ]}}}, {}, {}}}, {}, {}}, {}, {}, {}, {}, 
   StyleBox[
    StyleBox[{
      {Thickness[Tiny], 
       LineBox[{{0.3552804078659868, 2.4657359027997265`}, {5.335669337217771,
         2.4657359027997265`}}], 
       StyleBox[{}, "GraphicsLabel",
        StripOnInput->False]}, 
      StyleBox[{
        {Thickness[Tiny], 
         LineBox[{{0.7439912600145666, 2.4657359027997265`}, 
           Offset[{-1.102182119232618*^-15, -6.}, {0.7439912600145666, 
            2.4657359027997265`}]}], 
         LineBox[{{4.93918426802622, 2.4657359027997265`}, 
           Offset[{-1.102182119232618*^-15, -6.}, {4.93918426802622, 
            2.4657359027997265`}]}], {{}, {}, {
           LineBox[{{1.64639475600874, 2.4657359027997265`}, 
             Offset[{-7.347880794884119*^-16, -4.}, {1.64639475600874, 
              2.4657359027997265`}]}], 
           LineBox[{{1.7439912600145666`, 2.4657359027997265`}, 
             Offset[{-7.347880794884119*^-16, -4.}, {1.7439912600145666`, 
              2.4657359027997265`}]}]}, {}, {}, {
           LineBox[{{3.93918426802622, 2.4657359027997265`}, 
             Offset[{-7.347880794884119*^-16, -4.}, {3.93918426802622, 
              2.4657359027997265`}]}], 
           LineBox[{{4.0367807720320465`, 2.4657359027997265`}, 
             Offset[{-7.347880794884119*^-16, -4.}, {4.0367807720320465`, 
              2.4657359027997265`}]}]}, {
           LineBox[{{2.64639475600874, 2.4657359027997265`}, 
             Offset[{-1.102182119232618*^-15, -6.}, {2.64639475600874, 
              2.4657359027997265`}]}], 
           LineBox[{{3.0367807720320465`, 2.4657359027997265`}, 
             Offset[{-1.102182119232618*^-15, -6.}, {3.0367807720320465`, 
              2.4657359027997265`}]}]}}}, 
        StyleBox[
         {Thickness[Tiny], InsetBox[
           TagBox[
            InterpretationBox[
             StyleBox["\<\"32\"\>",
              ShowStringCharacters->False],
             32,
             Editable->False],
            NumberForm[#, ExponentFunction -> (If[# == 0, Null, #]& )]& ], 
           Offset[{0, -2}, {1.1951930080116533, 2.4657359027997265}], NCache[
           ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]], 
           Automatic, {1, 0}], InsetBox[
           TagBox[
            InterpretationBox[
             StyleBox["\<\"100352\"\>",
              ShowStringCharacters->False],
             100352,
             Editable->False],
            NumberForm[#, ExponentFunction -> (If[# == 0, Null, #]& )]& ], 
           Offset[{0, -2}, {2.1951930080116533, 2.4657359027997265}], NCache[
           ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]], 
           Automatic, {1, 0}], InsetBox[
           TagBox[
            InterpretationBox[
             StyleBox["\<\"32\"\>",
              ShowStringCharacters->False],
             32,
             Editable->False],
            NumberForm[#, ExponentFunction -> (If[# == 0, Null, #]& )]& ], 
           Offset[{0, -2}, {3.4879825200291332, 2.4657359027997265}], NCache[
           ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]], 
           Automatic, {1, 0}], InsetBox[
           TagBox[
            InterpretationBox[
             StyleBox["\<\"100352\"\>",
              ShowStringCharacters->False],
             100352,
             Editable->False],
            NumberForm[#, ExponentFunction -> (If[# == 0, Null, #]& )]& ], 
           Offset[{0, -2}, {4.487982520029133, 2.4657359027997265}], NCache[
           ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]], 
           Automatic, {1, 0}]}, "GraphicsLabel",
         StripOnInput->False]}, "GraphicsTicks",
       StripOnInput->False]},
     Antialiasing->False], "GraphicsAxes",
    StripOnInput->False]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, True},
  AxesLabel->{None, None},
  AxesOrigin->{0.3552804078659868, 2.4657359027997265`},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Identity[
       Part[#, 1]], 
      Exp[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Identity[
       Part[#, 1]], 
      Exp[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{
     Charting`ScaledTicks[{Log, Exp}], 
     Charting`ScaledFrameTicks[{Log, Exp}]}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->Medium,
  PlotLabel->FormBox[
   "\"Number of Unique Paths (Higher is More Resilient)\"", TraditionalForm],
  PlotRange->{{All, All}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->FrontEndValueCache[{None, 
     Charting`ScaledTicks[{Log, Exp}]}, {None, {{2.302585092994046, 
       FormBox["10", TraditionalForm], {0.01, 0.}}, {4.605170185988092, 
       FormBox["100", TraditionalForm], {0.01, 0.}}, {6.907755278982137, 
       FormBox["1000", TraditionalForm], {0.01, 0.}}, {9.210340371976184, 
       FormBox[
        TemplateBox[{"10", "4"}, "Superscript", SyntaxForm -> SuperscriptBox],
         TraditionalForm], {0.01, 0.}}, {11.512925464970229`, 
       FormBox[
        TemplateBox[{"10", "5"}, "Superscript", SyntaxForm -> SuperscriptBox],
         TraditionalForm], {0.01, 0.}}, {0., 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      0.6931471805599453, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      1.0986122886681098`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      1.3862943611198906`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      1.6094379124341003`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      1.791759469228055, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      1.9459101490553132`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      2.0794415416798357`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      2.1972245773362196`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      2.995732273553991, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      3.4011973816621555`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      3.6888794541139363`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      3.912023005428146, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      4.0943445622221, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      4.248495242049359, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      4.382026634673881, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      4.499809670330265, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      5.298317366548036, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      5.703782474656201, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      5.991464547107982, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      6.214608098422191, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      6.396929655216146, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      6.551080335043404, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      6.684611727667927, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      6.802394763324311, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      7.600902459542082, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      8.006367567650246, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      8.294049640102028, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      8.517193191416238, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      8.699514748210191, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      8.85366542803745, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      8.987196820661973, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      9.104979856318357, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      9.903487552536127, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      10.308952660644293`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      10.596634733096073`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      10.819778284410283`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      11.002099841204238`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      11.156250521031495`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      11.289781913656018`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      11.407564949312402`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      12.206072645530174`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      12.611537753638338`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      12.89921982609012, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      13.122363377404328`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      13.304684934198283`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      13.458835614025542`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      13.592367006650065`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      13.710150042306449`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      13.815510557964274`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
       0.}}}}]]], "Output",
 CellChangeTimes->{{3.962893183073016*^9, 3.9628931916763897`*^9}},
 CellLabel->
  "Out[4300]=",ExpressionUUID->"85582dc3-3f1f-4861-adca-6c0aee5487a1"],

Cell[BoxData[
 StyleBox["\<\"\\nResilience to Edge Failures\"\>",
  StripOnInput->False,
  FontSize->20,
  FontWeight->Bold]], "Print",
 CellChangeTimes->{{3.96289318303321*^9, 3.962893191890678*^9}},
 CellLabel->
  "During evaluation of \
In[4286]:=",ExpressionUUID->"82067ebf-de3a-4598-9620-9f8f6b442727"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, 
     InterpretationBox[{
       TagBox[{{{}, {}, 
          TagBox[{
            Hue[0.67, 0.6, 0.6], 
            Directive[
             PointSize[
              NCache[
               Rational[7, 360], 0.019444444444444445`]], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[2], 
             Thickness[Large]], 
            LineBox[{{1., 1.}, {2., 2.}, {3., 2.}, {4., 3.}}]}, 
           Annotation[#, "Charting`Private`Tag#1"]& ], 
          TagBox[{
            Hue[0.9060679774997897, 0.6, 0.6], 
            Directive[
             PointSize[
              NCache[
               Rational[7, 360], 0.019444444444444445`]], 
             RGBColor[0.880722, 0.611041, 0.142051], 
             AbsoluteThickness[2], 
             Dashing[{Small, Small}]], 
            LineBox[{{1., 1.}, {2., 1.}, {3., 1.}, {4., 1.}}]}, 
           Annotation[#, "Charting`Private`Tag#2"]& ]}}, {
        "WolframDynamicHighlight", <|
         "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
       StyleBox[
        DynamicBox[
         (Charting`HighlightActionBox["DynamicHighlight", {}, 
          Slot["HighlightElements"], 
          Slot["LayoutOptions"], 
          Slot["Meta"], 
          Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
             Annotation[{
               Hue[0.67, 0.6, 0.6], 
               Directive[
                PointSize[
                 Rational[7, 360]], 
                RGBColor[0.368417, 0.506779, 0.709798], 
                AbsoluteThickness[2], 
                Thickness[Large]], 
               Line[{{1., 1.}, {2., 2.}, {3., 2.}, {4., 3.}}]}, 
              "Charting`Private`Tag#1"], 
             Annotation[{
               Hue[0.9060679774997897, 0.6, 0.6], 
               Directive[
                PointSize[
                 Rational[7, 360]], 
                RGBColor[0.880722, 0.611041, 0.142051], 
                AbsoluteThickness[2], 
                Dashing[{Small, Small}]], 
               Line[{{1., 1.}, {2., 1.}, {3., 1.}, {4., 1.}}]}, 
              "Charting`Private`Tag#2"]}}, <|
           "HighlightElements" -> <|
             "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
            "LayoutOptions" -> <|
             "PanelPlotLayout" -> <||>, "PlotRange" -> {{0., 4.}, {0, 3.}}, 
              "Frame" -> {{False, False}, {False, False}}, 
              "AxesOrigin" -> {0., 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
              "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
              GoldenRatio^(-1), "DefaultStyle" -> {
                Directive[
                 PointSize[
                  Rational[7, 360]], 
                 RGBColor[0.880722, 0.611041, 0.142051], 
                 AbsoluteThickness[2], 
                 Dashing[{Small, Small}]], 
                Directive[
                 PointSize[
                  Rational[7, 360]], 
                 RGBColor[0.368417, 0.506779, 0.709798], 
                 AbsoluteThickness[2], 
                 Thickness[Large]]}, 
              "HighlightLabelingFunctions" -> <|
               "CoordinatesToolOptions" -> ({
                  Identity[
                   Part[#, 1]], 
                  Identity[
                   Part[#, 2]]}& ), 
                "ScalingFunctions" -> {{Identity, Identity}, {
                  Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
              False|>, 
            "Meta" -> <|
             "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
              "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>]]& )[<|
          "HighlightElements" -> <|
            "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
           "LayoutOptions" -> <|
            "PanelPlotLayout" -> <||>, "PlotRange" -> {{0., 4.}, {0, 3.}}, 
             "Frame" -> {{False, False}, {False, False}}, 
             "AxesOrigin" -> {0., 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
             "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
             GoldenRatio^(-1), "DefaultStyle" -> {
               Directive[
                PointSize[
                 Rational[7, 360]], 
                RGBColor[0.880722, 0.611041, 0.142051], 
                AbsoluteThickness[2], 
                Dashing[{Small, Small}]], 
               Directive[
                PointSize[
                 Rational[7, 360]], 
                RGBColor[0.368417, 0.506779, 0.709798], 
                AbsoluteThickness[2], 
                Thickness[Large]]}, 
             "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                 Identity[
                  Part[#, 1]], 
                 Identity[
                  Part[#, 2]]}& ), 
               "ScalingFunctions" -> {{Identity, Identity}, {
                 Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
             False|>, 
           "Meta" -> <|
            "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
             "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>]], 
        Selectable -> False]}, 
      Annotation[{{{}, {}, 
         Annotation[{
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[
             Rational[7, 360]], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[2], 
            Thickness[Large]], 
           Line[{{1., 1.}, {2., 2.}, {3., 2.}, {4., 3.}}]}, 
          "Charting`Private`Tag#1"], 
         Annotation[{
           Hue[0.9060679774997897, 0.6, 0.6], 
           Directive[
            PointSize[
             Rational[7, 360]], 
            RGBColor[0.880722, 0.611041, 0.142051], 
            AbsoluteThickness[2], 
            Dashing[{Small, Small}]], 
           Line[{{1., 1.}, {2., 1.}, {3., 1.}, {4., 1.}}]}, 
          "Charting`Private`Tag#2"]}}, <|
       "HighlightElements" -> <|
         "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
        "LayoutOptions" -> <|
         "PanelPlotLayout" -> <||>, "PlotRange" -> {{0., 4.}, {0, 3.}}, 
          "Frame" -> {{False, False}, {False, False}}, 
          "AxesOrigin" -> {0., 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
          "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
          GoldenRatio^(-1), "DefaultStyle" -> {
            Directive[
             PointSize[
              Rational[7, 360]], 
             RGBColor[0.880722, 0.611041, 0.142051], 
             AbsoluteThickness[2], 
             Dashing[{Small, Small}]], 
            Directive[
             PointSize[
              Rational[7, 360]], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[2], 
             Thickness[Large]]}, 
          "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
              Identity[
               Part[#, 1]], 
              Identity[
               Part[#, 2]]}& ), 
            "ScalingFunctions" -> {{Identity, Identity}, {
              Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>,
         "Meta" -> <|
         "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
          ListLinePlot, "GroupHighlight" -> False|>|>, 
       "DynamicHighlight"]], {{}, {}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, DisplayFunction -> 
     Identity, AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
     Axes -> {True, True}, AxesLabel -> {
       FormBox[
        TagBox["\"Edges Removed (Failures)\"", HoldForm], TraditionalForm], 
       FormBox[
        TagBox["\"Network Partitions\"", HoldForm], TraditionalForm]}, 
     AxesOrigin -> {0., 0}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], ImageSize -> Medium, 
     Method -> {
      "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
       "DefaultGraphicsInteraction" -> {
        "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
         "Effects" -> {
          "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
           "Droplines" -> {
            "freeformCursorMode" -> True, 
             "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
       "DefaultMeshStyle" -> AbsolutePointSize[6], "DefaultPlotStyle" -> {
         Directive[
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]], 
         Directive[
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[2]], 
         Directive[
          RGBColor[0.560181, 0.691569, 0.194885], 
          AbsoluteThickness[2]], 
         Directive[
          RGBColor[0.922526, 0.385626, 0.209179], 
          AbsoluteThickness[2]], 
         Directive[
          RGBColor[0.528488, 0.470624, 0.701351], 
          AbsoluteThickness[2]], 
         Directive[
          RGBColor[0.772079, 0.431554, 0.102387], 
          AbsoluteThickness[2]], 
         Directive[
          RGBColor[0.363898, 0.618501, 0.782349], 
          AbsoluteThickness[2]], 
         Directive[
          RGBColor[1, 0.75, 0], 
          AbsoluteThickness[2]], 
         Directive[
          RGBColor[0.647624, 0.37816, 0.614037], 
          AbsoluteThickness[2]], 
         Directive[
          RGBColor[0.571589, 0.586483, 0.], 
          AbsoluteThickness[2]], 
         Directive[
          RGBColor[0.915, 0.3325, 0.2125], 
          AbsoluteThickness[2]], 
         Directive[
          RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
          AbsoluteThickness[2]], 
         Directive[
          RGBColor[
          0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
          AbsoluteThickness[2]], 
         Directive[
          RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
          AbsoluteThickness[2]], 
         Directive[
          RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
          AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
       "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> True, 
       "IncludeHighlighting" -> "CurrentSet", "HighlightStyle" -> Automatic, 
       "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, PlotLabel -> 
     FormBox["\"Network Fragmentation Under Failure\"", TraditionalForm], 
     PlotRange -> {{0., 4.}, {0, 3.}}, PlotRangeClipping -> True, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Clos\"", "\"N2N Lattice\""}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2], 
                    Thickness[Large]], {
                    LineBox[{{0, 12.5}, {40, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2], 
                    Thickness[Large]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {40, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2], 
                    Dashing[{Small, Small}]], {
                    LineBox[{{0, 12.5}, {40, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2], 
                    Dashing[{Small, Small}]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {40, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", 
                    FractionBox["7", "360"], "]"}], ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "2", "]"}], ",", 
                   RowBox[{"Thickness", "[", "Large", "]"}]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", 
                    FractionBox["7", "360"], "]"}], ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "2", "]"}], ",", 
                   RowBox[{"Dashing", "[", 
                    RowBox[{"{", 
                    RowBox[{"Small", ",", "Small"}], "}"}], "]"}]}], "]"}]}], 
             "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"True", ",", "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.962893183073016*^9, 3.962893191929173*^9}},
 CellLabel->
  "Out[4305]=",ExpressionUUID->"4ea44012-e9b2-4722-8cc3-7f5843600aa8"]
}, Open  ]]
}, Open  ]],

Cell["\<\
Interpreting the Simulated Hop Counts: Predictability vs. Variability\
\>", "Subtitle",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898307534945*^9}, {
   3.962898368042245*^9, 3.962898369635974*^9}, {3.962898493181312*^9, 
   3.9628984941794252`*^9}, {3.9628987079145727`*^9, 3.962898708877008*^9}, {
   3.962898758976321*^9, 3.962898759719747*^9}},
 FormatType->"TextForm",
 FontSize->18,
 Background->None,ExpressionUUID->"b191f1e6-9374-4150-ae0f-672a2baa9898"],

Cell[CellGroupData[{

Cell[TextData[{
 "The quantitative results from the simulation starkly illustrate the \
different latency characteristics of the two architectures. For the Clos \
network, the calculated `closLatency` between two maximally distant servers \
(`S1-1` and `S4-4`) is 4. This result is not a coincidence but a direct and \
intentional consequence of the spine-leaf design. The path is fixed: `Server \
-> Leaf -> Spine -> Leaf -> Server`. This four-hop journey (counting \
device-to-device links) is consistent for any two servers located in \
different racks. This uniformity is a cornerstone of the spine-leaf value \
proposition, as it provides predictable, non-blocking performance for the \
\[OpenCurlyDoubleQuote]any-to-any\[CloseCurlyDoubleQuote] communication \
patterns prevalent in modern cloud and big data workloads. Application \
developers and orchestrators do not need to worry about network topology when \
placing virtual machines or containers, as communication latency is \
consistent across the entire fabric. \[NonBreakingSpace] \n\nIn contrast, the \
`daedaelusLatency` for the mesh network, calculated between the corner nodes \
`{1,1}` and `{4,4}`, is 6. This represents the Manhattan distance on the grid \
graph: a path that traverses 3 steps horizontally and 3 steps vertically. \
This result highlights a fundamental and opposing characteristic of mesh \
networks: path length is variable and directly dependent on the topological \
distance between the communicating nodes. While communication between the \
most distant nodes is longer than in the Clos fabric, communication between \
adjacent nodes is extremely fast, requiring only a single hop.\n\nThis \
reveals a crucial trade-off between uniformity and locality. A surface-level \
reading of the bar chart, which shows the Clos network having a lower hop \
count, might suggest it has superior latency. However, this conclusion is an \
artifact of the specific \[OpenCurlyDoubleQuote]worst-case\
\[CloseCurlyDoubleQuote] nodes chosen for the measurement. A more nuanced \
analysis reveals that each architecture is optimized for a different type of \
workload. The Clos network is engineered to provide good, uniform latency for \
the general case, effectively averaging out performance across the entire \
fabric. The mesh topology, conversely, provides excellent latency for the \
specific case of local communication, while performance for non-local \
communication degrades with distance. The Daedaelus architecture, with its \
emphasis on direct, switchless, peer-to-peer links, is designed to fully \
exploit this locality advantage. Their claims of lower latency are predicated \
on eliminating the intermediate leaf and spine switch hops that are mandatory \
in a Clos fabric for ",
 StyleBox["all",
  FontSlant->"Italic"],
 " inter-rack traffic. \n\nUltimately, the \[OpenCurlyDoubleQuote]better\
\[CloseCurlyDoubleQuote] architecture from a latency perspective is entirely \
workload-dependent. An application deployed on a Clos fabric is freed from \
the burden of communication-aware placement. In contrast, an application \
running on a mesh fabric can be dramatically optimized by co-locating \
communicating processes on topologically adjacent nodes. This makes the mesh \
an attractive option for workloads with known, stable communication patterns, \
such as those found in high-performance scientific computing, while the Clos \
network remains the dominant choice for the unpredictable and heterogeneous \
traffic of general-purpose cloud environments."
}], "Chapter",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898338257278*^9}, {
   3.962898381402219*^9, 3.96289842166496*^9}, {3.96289849829926*^9, 
   3.962898570547124*^9}, {3.962898605101194*^9, 3.9628986082485447`*^9}, {
   3.962898718588675*^9, 3.962898842457036*^9}},
 FormatType->"TextForm",
 FontSize->14,
 Background->None,ExpressionUUID->"e8cffb12-bc70-4d62-a73c-0b201769e575"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Unprotect", "[", 
   RowBox[{"buildSpanningTree", ",", "healTree"}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"ClearAll", "[", 
   RowBox[{"buildSpanningTree", ",", "healTree"}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"generateHexagonalLattice", "[", "radius_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "basis", ",", "coords", ",", "latticePoints", ",", "neighborOffsets", 
       ",", "adjacency", ",", "edges"}], "}"}], ",", 
     RowBox[{
      RowBox[{"basis", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", 
            SqrtBox["3"]}], ",", 
           RowBox[{"-", "1"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", 
            SqrtBox["3"]}], ",", "1"}], "}"}]}], "}"}]}], ";", 
      RowBox[{"coords", "=", 
       RowBox[{"Select", "[", 
        RowBox[{
         RowBox[{"Tuples", "[", 
          RowBox[{
           RowBox[{"Range", "[", 
            RowBox[{
             RowBox[{"-", "radius"}], ",", "radius"}], "]"}], ",", "2"}], 
          "]"}], ",", 
         RowBox[{
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"i", "=", 
               RowBox[{
               "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}],
               ",", 
              RowBox[{"j", "=", 
               RowBox[{
               "#1", "\[LeftDoubleBracket]", "2", 
                "\[RightDoubleBracket]"}]}]}], "}"}], ",", 
            RowBox[{
             RowBox[{"Abs", "[", 
              RowBox[{"i", "+", "j"}], "]"}], "\[LessEqual]", "radius"}]}], 
           "]"}], "&"}]}], "]"}]}], ";", 
      RowBox[{"latticePoints", "=", 
       RowBox[{"coords", ".", "basis"}]}], ";", 
      RowBox[{"neighborOffsets", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"-", "1"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", 
           RowBox[{"-", "1"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}]}], ";", 
      RowBox[{"adjacency", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"c", "=", "coord"}], "}"}], ",", 
           RowBox[{"c", "\[Rule]", 
            RowBox[{"Select", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"c", "+", "#1"}], "&"}], ")"}], "/@", 
               "neighborOffsets"}], ",", 
              RowBox[{
               RowBox[{"MemberQ", "[", 
                RowBox[{"coords", ",", "#1"}], "]"}], "&"}]}], "]"}]}]}], 
          "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"coord", ",", "coords"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"edges", "=", 
       RowBox[{"UndirectedEdge", "@@@", 
        RowBox[{"DeleteDuplicates", "[", 
         RowBox[{"Sort", "/@", 
          RowBox[{"Flatten", "[", 
           RowBox[{
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"coord", "\[Rule]", "#1"}], "&"}], ")"}], "/@", 
               RowBox[{"(", 
                RowBox[{"coord", "/.", "\[VeryThinSpace]", "adjacency"}], 
                ")"}]}], ",", 
              RowBox[{"{", 
               RowBox[{"coord", ",", "coords"}], "}"}]}], "]"}], ",", "1"}], 
           "]"}]}], "]"}]}]}], ";", 
      RowBox[{"Association", "[", 
       RowBox[{
        RowBox[{"\"\<Graph\>\"", "\[Rule]", 
         RowBox[{"Graph", "[", 
          RowBox[{"coords", ",", "edges", ",", 
           RowBox[{"VertexCoordinates", "\[Rule]", 
            RowBox[{"Thread", "[", 
             RowBox[{"coords", "\[Rule]", "latticePoints"}], "]"}]}]}], 
          "]"}]}], ",", 
        RowBox[{"\"\<Coordinates\>\"", "\[Rule]", "coords"}], ",", 
        RowBox[{"\"\<Layout\>\"", "\[Rule]", "latticePoints"}]}], "]"}]}]}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"buildSpanningTree", "[", 
    RowBox[{"graph_", ",", "root_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"reapResult", ",", "edges"}], "}"}], ",", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"VertexQ", "[", 
          RowBox[{"graph", ",", "root"}], "]"}]}], ",", 
        RowBox[{"Return", "[", 
         RowBox[{"Graph", "[", 
          RowBox[{
           RowBox[{"{", "}"}], ",", " ", 
           RowBox[{"{", "}"}]}], "]"}], "]"}]}], "]"}], ";", 
      RowBox[{"reapResult", "=", 
       RowBox[{"Reap", "[", 
        RowBox[{"BreadthFirstScan", "[", 
         RowBox[{"graph", ",", "root", ",", 
          RowBox[{"\"\<FrontierEdge\>\"", "\[Rule]", "Sow"}]}], "]"}], 
        "]"}]}], ";", 
      RowBox[{"edges", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "reapResult", "]"}], ">", "1"}], ",", 
         RowBox[{"reapResult", "\[LeftDoubleBracket]", 
          RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], ",", 
         RowBox[{"{", "}"}]}], "]"}]}], ";", 
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"VertexList", "[", "graph", "]"}], ",", "edges", ",", 
        RowBox[{"VertexCoordinates", "\[Rule]", 
         RowBox[{"GraphEmbedding", "[", "graph", "]"}]}]}], "]"}]}]}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"healTree", "[", 
    RowBox[{"tree_", ",", "failedNodes_", ",", "physicalGraph_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "liveTree", ",", "orphans", ",", "healingEdges", ",", "newTree", ",", 
       "connectedCompRoot"}], "}"}], ",", 
     RowBox[{
      RowBox[{"liveTree", "=", 
       RowBox[{"VertexDelete", "[", 
        RowBox[{"tree", ",", "failedNodes"}], "]"}]}], ";", 
      RowBox[{"connectedCompRoot", "=", 
       RowBox[{"First", "[", 
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{
           RowBox[{"ConnectedComponents", "[", "liveTree", "]"}], ",", 
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{"#1", ",", 
              RowBox[{
               RowBox[{"VertexList", "[", "tree", "]"}], 
               "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
             "]"}], "&"}]}], "]"}], ",", 
         RowBox[{"{", "}"}]}], "]"}]}], ";", 
      RowBox[{"orphans", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{
         RowBox[{"VertexList", "[", "liveTree", "]"}], ",", 
         "connectedCompRoot"}], "]"}]}], ";", 
      RowBox[{"healingEdges", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Reap", "[", 
           RowBox[{
            RowBox[{"Function", "[", 
             RowBox[{"orphan", ",", 
              RowBox[{"Module", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                 "physicalNeighbors", ",", "potentialParents", ",", 
                  "newParent"}], "}"}], ",", 
                RowBox[{
                 RowBox[{"physicalNeighbors", "=", 
                  RowBox[{"Complement", "[", 
                   RowBox[{
                    RowBox[{"AdjacencyList", "[", 
                    RowBox[{"physicalGraph", ",", "orphan"}], "]"}], ",", 
                    "failedNodes"}], "]"}]}], ";", 
                 RowBox[{"potentialParents", "=", 
                  RowBox[{
                  "physicalNeighbors", "\[Intersection]", 
                   "connectedCompRoot"}]}], ";", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Length", "[", "potentialParents", "]"}], ">", 
                    "0"}], ",", 
                   RowBox[{
                    RowBox[{"newParent", "=", 
                    RowBox[{"First", "[", "potentialParents", "]"}]}], ";", 
                    RowBox[{"Sow", "[", 
                    RowBox[{"newParent", "\[Rule]", "orphan"}], "]"}]}]}], 
                  "]"}], ";"}]}], "]"}]}], "]"}], "/@", "orphans"}], "]"}], 
          "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",", "1"}], 
        "]"}]}], ";", 
      RowBox[{"newTree", "=", 
       RowBox[{"EdgeAdd", "[", 
        RowBox[{"liveTree", ",", 
         RowBox[{"UndirectedEdge", "@@@", "healingEdges"}]}], "]"}]}], ";", 
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"VertexList", "[", "newTree", "]"}], ",", 
        RowBox[{"EdgeList", "[", "newTree", "]"}], ",", 
        RowBox[{"VertexCoordinates", "\[Rule]", 
         RowBox[{"GraphEmbedding", "[", "physicalGraph", "]"}]}]}], "]"}]}]}],
     "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"radius", "=", "4"}], "}"}], ",", 
    RowBox[{
     RowBox[{"hexData", "=", 
      RowBox[{"generateHexagonalLattice", "[", "radius", "]"}]}], ";"}]}], 
   "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"physicalGraph", "=", 
   RowBox[{"hexData", "[", "\"\<Graph\>\"", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"coords", "=", 
   RowBox[{"hexData", "[", "\"\<Coordinates\>\"", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"layout", "=", 
   RowBox[{"hexData", "[", "\"\<Layout\>\"", "]"}]}], ";"}], "\n", 
 RowBox[{"DynamicModule", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"rootNode", "=", 
      RowBox[{"First", "[", "coords", "]"}]}], ",", 
     RowBox[{"failedNodes", "=", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{"currentTree", "=", 
      RowBox[{"buildSpanningTree", "[", 
       RowBox[{"physicalGraph", ",", 
        RowBox[{"First", "[", "coords", "]"}]}], "]"}]}]}], "}"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"updateVisualization", "[", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "initialTree", "}"}], ",", 
       RowBox[{
        RowBox[{"initialTree", "=", 
         RowBox[{"buildSpanningTree", "[", 
          RowBox[{"physicalGraph", ",", "rootNode"}], "]"}]}], ";", 
        RowBox[{"currentTree", "=", 
         RowBox[{"healTree", "[", 
          RowBox[{"initialTree", ",", "failedNodes", ",", "physicalGraph"}], 
          "]"}]}], ";"}]}], "]"}]}], ";", 
    RowBox[{"Column", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Pane", "[", 
         RowBox[{
          RowBox[{"Grid", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"Style", "[", 
                RowBox[{
                "\"\<D\[AE]d\[AE]lus N2N Lattice: Self-Healing Trees\>\"", 
                 ",", "Bold", ",", "20", ",", 
                 RowBox[{"FontFamily", "\[Rule]", "\"\<Helvetica\>\""}]}], 
                "]"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"Style", "[", 
                RowBox[{
                "\"\<This simulation demonstrates resilience using only local \
information. Each node builds a logical tree (its Local Observer View) on the \
physical graph.\>\"", ",", "12", ",", 
                 RowBox[{"GrayLevel", "[", "0.2", "]"}]}], "]"}], "}"}], ",", 
              
              RowBox[{"{", 
               RowBox[{"Item", "[", 
                RowBox[{
                 RowBox[{"Column", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Left-Click a cell to select a new Tree Root.\>\"", 
                    ",", "12"}], "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    "\"\<Ctrl + Left-Click a cell to simulate its \
failure/recovery.\>\"", ",", "12"}], "]"}]}], "}"}], "]"}], ",", 
                 RowBox[{"Alignment", "\[Rule]", "Left"}]}], "]"}], "}"}]}], 
             "}"}], ",", 
            RowBox[{"Spacings", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"1", ",", "1.5"}], "}"}]}]}], "]"}], ",", 
          RowBox[{"ImageMargins", "\[Rule]", "10"}]}], "]"}], ",", 
        RowBox[{"Dynamic", "[", 
         RowBox[{
          RowBox[{"Show", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Graph", "[", 
               RowBox[{"physicalGraph", ",", 
                RowBox[{"EdgeStyle", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"GrayLevel", "[", "0.8", "]"}], ",", "Thin"}], 
                  "}"}]}], ",", 
                RowBox[{"VertexSize", "\[Rule]", "0"}]}], "]"}], ",", 
              RowBox[{"Graphics", "[", 
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{"With", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"node", "=", 
                    RowBox[{
                    "coords", "\[LeftDoubleBracket]", "i", 
                    "\[RightDoubleBracket]"}]}], ",", 
                    RowBox[{"pos", "=", 
                    RowBox[{
                    "layout", "\[LeftDoubleBracket]", "i", 
                    "\[RightDoubleBracket]"}]}]}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"node", "\[Equal]", "rootNode"}], ",", "Orange", 
                    ",", 
                    RowBox[{"MemberQ", "[", 
                    RowBox[{"failedNodes", ",", "node"}], "]"}], ",", "Black",
                     ",", "True", ",", "LightGray"}], "]"}], ",", 
                    RowBox[{"EdgeForm", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"GrayLevel", "[", "0.3", "]"}], ",", "Thin"}], 
                    "}"}], "]"}], ",", 
                    RowBox[{"EventHandler", "[", 
                    RowBox[{
                    RowBox[{"RegularPolygon", "[", 
                    RowBox[{"pos", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}], ",", "6"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"\<MouseClicked\>\"", "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"CurrentValue", "[", "\"\<ControlKey\>\"", "]"}], 
                    ",", 
                    RowBox[{"failedNodes", "=", 
                    RowBox[{"SymmetricDifference", "[", 
                    RowBox[{"failedNodes", ",", 
                    RowBox[{"{", "node", "}"}]}], "]"}]}], ",", 
                    RowBox[{"rootNode", "=", "node"}]}], "]"}], ";", 
                    RowBox[{"updateVisualization", "[", "]"}], ";"}], ")"}]}],
                     "}"}], ",", 
                    RowBox[{"PassEventsDown", "\[Rule]", "True"}]}], "]"}]}], 
                    "}"}]}], "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"i", ",", 
                   RowBox[{"Length", "[", "coords", "]"}]}], "}"}]}], "]"}], 
               "]"}], ",", 
              RowBox[{"Graph", "[", 
               RowBox[{"currentTree", ",", 
                RowBox[{"EdgeStyle", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Darker", "[", "Red", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "3", "]"}]}], "}"}]}], 
                ",", 
                RowBox[{"EdgeShapeFunction", "\[Rule]", 
                 RowBox[{"GraphElementData", "[", 
                  RowBox[{"{", 
                   RowBox[{"\"\<Arrow\>\"", ",", 
                    RowBox[{"\"\<ArrowSize\>\"", "\[Rule]", "0.02"}], ",", 
                    RowBox[{"\"\<ArrowPositions\>\"", "\[Rule]", "0.6"}]}], 
                   "}"}], "]"}]}], ",", 
                RowBox[{"VertexSize", "\[Rule]", "0"}]}], "]"}]}], "}"}], ",", 
            RowBox[{"ImageSize", "\[Rule]", "800"}], ",", 
            RowBox[{"PlotLabel", "\[Rule]", 
             RowBox[{"Style", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                "StringTemplate", "[", 
                 "\"\<Logical Tree rooted at `` | Failed Nodes: ``\>\"", 
                 "]"}], "[", 
                RowBox[{"rootNode", ",", 
                 RowBox[{"Length", "[", "failedNodes", "]"}]}], "]"}], ",", 
               "14", ",", 
               RowBox[{"FontFamily", "\[Rule]", "\"\<Helvetica\>\""}]}], 
              "]"}]}], ",", 
            RowBox[{"BaseStyle", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"Antialiasing", "\[Rule]", "True"}], "}"}]}]}], "]"}], 
          ",", 
          RowBox[{"TrackedSymbols", "\[RuleDelayed]", 
           RowBox[{"{", 
            RowBox[{"rootNode", ",", "failedNodes", ",", "currentTree"}], 
            "}"}]}]}], "]"}]}], "}"}], ",", 
      RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}]}]}], "]"}]}], "Code",\

 CellChangeTimes->{{3.962897612949005*^9, 3.962897616953916*^9}},
 CellLabel->
  "In[5725]:=",ExpressionUUID->"23aecd6e-c1d8-4fe7-ba08-d00ed5493708"],

Cell[BoxData[
 DynamicModuleBox[{DaedaelusMeshCore`Private`rootNode$$ = {-4, 0}, 
  DaedaelusMeshCore`Private`failedNodes$$ = {}, 
  DaedaelusMeshCore`Private`currentTree$$ = Graph[CompressedData["
1:eJxdkYEJQzEIRI1mkQ7SJTpCB/jdH2psQt+BfEEeJF7Uy+P9eV1uZs+dh9+q
MjigzgPOzax/JPVJfVKf1Cf1a1NZ0Dgf0GHAo1OPalqFcT+gw4BHb20nzbqa
1loM6DDg5E6eaNfVeo/2htJhNG/ljXbVzOrpTeto5b08XW1HzRjo5u2P5L28
lCc/q8HRWA==
   "], {Null, {{1, 7}, {1, 2}, {1, 6}, {7, 14}, {7, 8}, {7, 13}, {2, 3}, {6, 
    12}, {14, 22}, {14, 15}, {14, 21}, {8, 9}, {13, 20}, {3, 4}, {12, 19}, {
    22, 31}, {22, 23}, {22, 30}, {15, 16}, {21, 29}, {9, 10}, {20, 28}, {4, 
    5}, {19, 27}, {31, 40}, {31, 32}, {31, 39}, {23, 24}, {30, 38}, {16, 
    17}, {29, 37}, {10, 11}, {28, 36}, {40, 48}, {40, 41}, {40, 47}, {32, 
    33}, {39, 46}, {24, 25}, {38, 45}, {17, 18}, {37, 44}, {48, 55}, {48, 
    49}, {48, 54}, {41, 42}, {47, 53}, {33, 34}, {46, 52}, {25, 26}, {45, 
    51}, {55, 61}, {55, 56}, {55, 60}, {49, 50}, {54, 59}, {42, 43}, {53, 
    58}, {34, 35}, {52, 57}}}, {
   VertexCoordinates -> {{4 3^Rational[1, 2], 4}, {3 3^Rational[1, 2], 5}, {
      2 3^Rational[1, 2], 6}, {3^Rational[1, 2], 7}, {0, 8}, {
      4 3^Rational[1, 2], 2}, {3 3^Rational[1, 2], 3}, {
      2 3^Rational[1, 2], 4}, {3^Rational[1, 2], 5}, {0, 
      6}, {-3^Rational[1, 2], 7}, {4 3^Rational[1, 2], 0}, {
      3 3^Rational[1, 2], 1}, {2 3^Rational[1, 2], 2}, {
      3^Rational[1, 2], 3}, {0, 
      4}, {-3^Rational[1, 2], 5}, {(-2) 3^Rational[1, 2], 6}, {
      4 3^Rational[1, 2], -2}, {3 3^Rational[1, 2], -1}, {
      2 3^Rational[1, 2], 0}, {3^Rational[1, 2], 1}, {0, 
      2}, {-3^Rational[1, 2], 3}, {(-2) 3^Rational[1, 2], 4}, {(-3) 
       3^Rational[1, 2], 5}, {4 3^Rational[1, 2], -4}, {
      3 3^Rational[1, 2], -3}, {2 3^Rational[1, 2], -2}, {
      3^Rational[1, 2], -1}, {0, 
      0}, {-3^Rational[1, 2], 1}, {(-2) 3^Rational[1, 2], 2}, {(-3) 
       3^Rational[1, 2], 3}, {(-4) 3^Rational[1, 2], 4}, {
      3 3^Rational[1, 2], -5}, {2 3^Rational[1, 2], -4}, {
      3^Rational[1, 2], -3}, {
      0, -2}, {-3^Rational[1, 2], -1}, {(-2) 3^Rational[1, 2], 0}, {(-3) 
       3^Rational[1, 2], 1}, {(-4) 3^Rational[1, 2], 2}, {
      2 3^Rational[1, 2], -6}, {3^Rational[1, 2], -5}, {
      0, -4}, {-3^Rational[1, 2], -3}, {(-2) 3^Rational[1, 2], -2}, {(-3) 
       3^Rational[1, 2], -1}, {(-4) 3^Rational[1, 2], 0}, {
      3^Rational[1, 2], -7}, {
      0, -6}, {-3^Rational[1, 2], -5}, {(-2) 3^Rational[1, 2], -4}, {(-3) 
       3^Rational[1, 2], -3}, {(-4) 3^Rational[1, 2], -2}, {
      0, -8}, {-3^Rational[1, 2], -7}, {(-2) 3^Rational[1, 2], -6}, {(-3) 
       3^Rational[1, 2], -5}, {(-4) 3^Rational[1, 2], -4}}}]}, 
  TagBox[GridBox[{
     {
      PaneBox[
       TagBox[GridBox[{
          {
           
           StyleBox["\<\"D\[AE]d\[AE]lus N2N Lattice: Self-Healing Trees\"\>",
            
            StripOnInput->False,
            FontFamily->"Helvetica",
            FontSize->20,
            FontWeight->Bold]},
          {
           
           StyleBox["\<\"This simulation demonstrates resilience using only \
local information. Each node builds a logical tree (its Local Observer View) \
on the physical graph.\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0.2],
            FrontFaceColor->GrayLevel[0.2],
            BackFaceColor->GrayLevel[0.2],
            GraphicsColor->GrayLevel[0.2],
            FontSize->12,
            FontColor->GrayLevel[0.2]]},
          {
           ItemBox[
            TagBox[GridBox[{
               {
                
                StyleBox["\<\"Left-Click a cell to select a new Tree \
Root.\"\>",
                 StripOnInput->False,
                 FontSize->12]},
               {
                
                StyleBox["\<\"Ctrl + Left-Click a cell to simulate its \
failure/recovery.\"\>",
                 StripOnInput->False,
                 FontSize->12]}
              },
              DefaultBaseStyle->"Column",
              GridBoxAlignment->{"Columns" -> {{Left}}},
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
             "Column"],
            Alignment->Left,
            StripOnInput->False]}
         },
         AutoDelete->False,
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
         GridBoxSpacings->{"Columns" -> {{1}}, "Rows" -> {{1.5}}}],
        "Grid"],
       ImageMargins->10]},
     {
      DynamicBox[ToBoxes[
        Show[{
          Graph[DaedaelusMeshCore`Private`physicalGraph, EdgeStyle -> {
             GrayLevel[0.8], Thin}, VertexSize -> 0], 
          Graphics[
           Table[
            
            With[{DaedaelusMeshCore`Private`node$ = 
              Part[DaedaelusMeshCore`Private`coords, 
                DaedaelusMeshCore`Private`i], DaedaelusMeshCore`Private`pos$ = 
              Part[DaedaelusMeshCore`Private`layout, 
                DaedaelusMeshCore`Private`i]}, {
              Which[
              DaedaelusMeshCore`Private`node$ == 
               DaedaelusMeshCore`Private`rootNode$$, Orange, 
               MemberQ[
               DaedaelusMeshCore`Private`failedNodes$$, 
                DaedaelusMeshCore`Private`node$], Black, True, LightGray], 
              EdgeForm[{
                GrayLevel[0.3], Thin}], 
              EventHandler[
               RegularPolygon[DaedaelusMeshCore`Private`pos$, {1, 0}, 6], {
               "MouseClicked" :> (If[
                   CurrentValue["ControlKey"], 
                   DaedaelusMeshCore`Private`failedNodes$$ = 
                   SymmetricDifference[
                    DaedaelusMeshCore`Private`failedNodes$$, {
                    DaedaelusMeshCore`Private`node$}], 
                   DaedaelusMeshCore`Private`rootNode$$ = 
                   DaedaelusMeshCore`Private`node$]; 
                 DaedaelusMeshCore`Private`updateVisualization[]; Null)}, 
               PassEventsDown -> True]}], {DaedaelusMeshCore`Private`i, 
             Length[DaedaelusMeshCore`Private`coords]}]], 
          Graph[DaedaelusMeshCore`Private`currentTree$$, EdgeStyle -> {
             Darker[Red], 
             AbsoluteThickness[3]}, EdgeShapeFunction -> 
           DaedaelusMeshCore`Private`GraphElementData[{
             "Arrow", "ArrowSize" -> 0.02, "ArrowPositions" -> 0.6}], 
           VertexSize -> 0]}, ImageSize -> 800, PlotLabel -> Style[
           StringTemplate["Logical Tree rooted at `` | Failed Nodes: ``"][
           DaedaelusMeshCore`Private`rootNode$$, 
            Length[DaedaelusMeshCore`Private`failedNodes$$]], 14, FontFamily -> 
           "Helvetica"], BaseStyle -> {Antialiasing -> True}], StandardForm],
       ImageSizeCache->{1000., {561., 569.}},
       TrackedSymbols:>{
        DaedaelusMeshCore`Private`rootNode$$, 
         DaedaelusMeshCore`Private`failedNodes$$, 
         DaedaelusMeshCore`Private`currentTree$$}]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{{3.962897613628111*^9, 3.962897617286759*^9}, 
   3.962897869097959*^9},
 CellLabel->
  "Out[5734]=",ExpressionUUID->"254190b8-a59a-4fa1-be85-ee39c1346ffc"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Path Diversity and Routability: A Combinatorial Perspective", "Title",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, 3.962898640977153*^9, {3.962898888923689*^9, 
   3.962898889645359*^9}},
 FormatType->"TextForm",
 FontSize->24,
 Background->None,ExpressionUUID->"751b5c7f-0ba2-4268-bdd5-a4738ba7d05c"],

Cell[CellGroupData[{

Cell["\<\
While latency provides one lens through which to evaluate network fabrics, \
path diversity offers another, revealing the richness of connectivity and the \
potential for advanced routing and resilience. This section explores the most \
dramatic finding of the simulation: the orders-of-magnitude difference in \
path diversity between the Clos and mesh topologies, as quantified by the \
number of unique spanning trees. It begins by reframing the concept of a \
spanning tree from a simple loop-prevention tool to a powerful combinatorial \
metric of redundancy. It then introduces the algebraic theorem used to \
compute this metric and interprets the simulation\[CloseCurlyQuote]s starkly \
contrasting results, connecting the abstract mathematical counts to the \
practical capabilities for load balancing and adaptive routing.\
\>", "Chapter",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898338257278*^9}, {
   3.962898381402219*^9, 3.96289842166496*^9}, {3.96289849829926*^9, 
   3.962898570547124*^9}, {3.962898605101194*^9, 3.9628986082485447`*^9}, {
   3.962898718588675*^9, 3.962898842457036*^9}, {3.96289889781201*^9, 
   3.962898902167201*^9}},
 FormatType->"TextForm",
 FontSize->14,
 Background->None,ExpressionUUID->"6e18d5f4-784d-442b-8482-aecf7d8d5112"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"generateClosNetwork", "[", 
    RowBox[{"numRacks_", ",", "serversPerRack_", ",", "numSpines_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"servers", ",", "tors", ",", "spines", ",", "edges"}], "}"}], 
     ",", 
     RowBox[{
      RowBox[{"servers", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"\"\<S\>\"", "<>", 
          RowBox[{"ToString", "[", "r", "]"}], "<>", "\"\<,\>\"", "<>", 
          RowBox[{"ToString", "[", "s", "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"r", ",", "1", ",", "numRacks"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"s", ",", "1", ",", "serversPerRack"}], "}"}]}], "]"}]}], 
      ";", 
      RowBox[{"tors", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"\"\<T\>\"", "<>", 
          RowBox[{"ToString", "[", "r", "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"r", ",", "1", ",", "numRacks"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"spines", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"\"\<SP\>\"", "<>", 
          RowBox[{"ToString", "[", "s", "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"s", ",", "1", ",", "numSpines"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"edges", "=", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"servers", "\[LeftDoubleBracket]", 
              RowBox[{"r", ",", "s"}], "\[RightDoubleBracket]"}], 
             "\[TwoWayRule]", 
             RowBox[{
             "tors", "\[LeftDoubleBracket]", "r", "\[RightDoubleBracket]"}]}],
             ",", 
            RowBox[{"{", 
             RowBox[{"r", ",", "1", ",", "numRacks"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"s", ",", "1", ",", "serversPerRack"}], "}"}]}], "]"}], 
          "]"}], ",", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
             "tors", "\[LeftDoubleBracket]", "r", "\[RightDoubleBracket]"}], 
             "\[TwoWayRule]", 
             RowBox[{
             "spines", "\[LeftDoubleBracket]", "s", 
              "\[RightDoubleBracket]"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"r", ",", "1", ",", "numRacks"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"s", ",", "1", ",", "numSpines"}], "}"}]}], "]"}], 
          "]"}]}], "]"}]}], ";", 
      RowBox[{"Graph", "[", 
       RowBox[{
        RowBox[{"Flatten", "[", 
         RowBox[{"Join", "[", 
          RowBox[{"servers", ",", "tors", ",", "spines"}], "]"}], "]"}], ",", 
        "edges", ",", 
        RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}], ",", 
        RowBox[{"ImagePadding", "\[Rule]", "10"}], ",", 
        RowBox[{"GraphLayout", "\[Rule]", "\"\<LayeredEmbedding\>\""}]}], 
       "]"}]}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"generateMeshNetwork", "[", 
    RowBox[{"rows_", ",", "cols_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"nodes", ",", "edges"}], "}"}], ",", 
     RowBox[{
      RowBox[{"nodes", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"\"\<N\>\"", "<>", 
           RowBox[{"ToString", "[", "r", "]"}], "<>", "\"\<,\>\"", "<>", 
           RowBox[{"ToString", "[", "c", "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"r", ",", "1", ",", "rows"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"c", ",", "1", ",", "cols"}], "}"}]}], "]"}], "]"}]}], ";", 
      RowBox[{"edges", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"\"\<N\>\"", "<>", 
              RowBox[{"ToString", "[", "r", "]"}], "<>", "\"\<,\>\"", "<>", 
              RowBox[{"ToString", "[", "c", "]"}]}], "\[TwoWayRule]", 
             RowBox[{"\"\<N\>\"", "<>", 
              RowBox[{"ToString", "[", "r", "]"}], "<>", "\"\<,\>\"", "<>", 
              RowBox[{"ToString", "[", 
               RowBox[{"c", "+", "1"}], "]"}]}]}], ",", 
            RowBox[{"{", 
             RowBox[{"r", ",", "1", ",", "rows"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"c", ",", "1", ",", 
              RowBox[{"cols", "-", "1"}]}], "}"}]}], "]"}], ",", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"\"\<N\>\"", "<>", 
              RowBox[{"ToString", "[", "r", "]"}], "<>", "\"\<,\>\"", "<>", 
              RowBox[{"ToString", "[", "c", "]"}]}], "\[TwoWayRule]", 
             RowBox[{"\"\<N\>\"", "<>", 
              RowBox[{"ToString", "[", 
               RowBox[{"r", "+", "1"}], "]"}], "<>", "\"\<,\>\"", "<>", 
              RowBox[{"ToString", "[", "c", "]"}]}]}], ",", 
            RowBox[{"{", 
             RowBox[{"r", ",", "1", ",", 
              RowBox[{"rows", "-", "1"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"c", ",", "1", ",", "cols"}], "}"}]}], "]"}]}], "]"}], 
        "]"}]}], ";", 
      RowBox[{"Graph", "[", 
       RowBox[{"nodes", ",", "edges", ",", 
        RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}], ",", 
        RowBox[{"ImagePadding", "\[Rule]", "10"}], ",", 
        RowBox[{"GraphLayout", "\[Rule]", "\"\<GridEmbedding\>\""}]}], 
       "]"}]}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"clos", "=", 
   RowBox[{"generateClosNetwork", "[", 
    RowBox[{"4", ",", "4", ",", "2"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"mesh", "=", 
   RowBox[{"generateMeshNetwork", "[", 
    RowBox[{"4", ",", "4"}], "]"}]}], ";"}], "\n", 
 RowBox[{"Grid", "[", 
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Labeled", "[", 
      RowBox[{"clos", ",", "\"\<Clos Network\>\"", ",", "Top"}], "]"}], ",", 
     RowBox[{"Labeled", "[", 
      RowBox[{"mesh", ",", "\"\<Mesh Network\>\"", ",", "Top"}], "]"}]}], 
    "}"}], "}"}], "]"}]}], "Code",
 CellChangeTimes->{{3.962897625954385*^9, 3.962897628816534*^9}, 
   3.962897864184226*^9},
 CellLabel->
  "In[5720]:=",ExpressionUUID->"c9ba91db-be3e-44fa-90e7-687ae1722972"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TemplateBox[{
       RowBox[{"\[LeftAssociation]", 
         RowBox[{"\"Graph\"", "\[Rule]", 
           GraphicsBox[
            NamespaceBox["NetworkGraphics", 
             DynamicModuleBox[{Typeset`graph = HoldComplete[
                 
                 Graph[{"Spine1", "Spine2", "Leaf1", "Leaf2", "Leaf3", 
                   "Leaf4", "S1_1", "S1_2", "S1_3", "S1_4", "S2_1", "S2_2", 
                   "S2_3", "S2_4", "S3_1", "S3_2", "S3_3", "S3_4", "S4_1", 
                   "S4_2", "S4_3", "S4_4"}, {
                  Null, {{1, 3}, {2, 3}, {1, 4}, {2, 4}, {1, 5}, {2, 5}, {1, 
                   6}, {2, 6}, {3, 7}, {3, 8}, {3, 9}, {3, 10}, {4, 11}, {4, 
                   12}, {4, 13}, {4, 14}, {5, 15}, {5, 16}, {5, 17}, {5, 
                   18}, {6, 19}, {6, 20}, {6, 21}, {6, 22}}}]]}, 
              TagBox[
               GraphicsGroupBox[
                GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGAQA2IQzcazMmd9EKPDblYzlXQTRoeujY8XnNrA4PB0zhHv
/+//2z+L5VvLvozLgYG14fT7RYwOxtw/FK/LMjkc+71ZIF7prX3Rty79T6Vv
7dk4UnuuCf23L5LjD/Y++9/+xPmkg6pPOB3ezGH7xHFWwCEm14pjmRuLwzKB
RZc0BAUcJG7OCHNf88t+mc3stA2Mgg7yIjoLz09lcIi5bWhoxcvvoJStpF3N
we6Q8vMnt9VlFocDFw7J+lqssT81P+mGRwy7wxrz1EvHz96yD8r4vzH9xm97
FoVUL+MVF+0vlt6dHyvG6MAABR+el/33Fj9nb1T65kzENWYHh8CEiC/rr9vH
VF2bIuT+xR6mrmqe+W7faQwOB7YnCcgEr7L/unEbz9ZTP+03SVsraEmwOKi8
THW2+M7ncMCXYZrOOwaHuNvTPm2fJuAQfk/0iEvSL/trLSuX88UJOLTEn9u/
P/CrPVeTf7LwZV4HAMtBk+k=
                 "], {{
                   Directive[
                    Opacity[0.7], 
                    Hue[0.6, 0.7, 0.5]], 
                   Arrowheads[0.], {
                    
                    ArrowBox[{{1, 3}, {1, 4}, {1, 5}, {1, 6}, {2, 3}, {2, 
                    4}, {2, 5}, {2, 6}, {3, 7}, {3, 8}, {3, 9}, {3, 10}, {4, 
                    11}, {4, 12}, {4, 13}, {4, 14}, {5, 15}, {5, 16}, {5, 
                    17}, {5, 18}, {6, 19}, {6, 20}, {6, 21}, {6, 22}}, 
                    0.03858962501291395]}}, {
                   Directive[
                    Hue[0.6, 0.2, 0.8], 
                    EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.7]]]], 
                   DiskBox[1, 0.03858962501291395], 
                   DiskBox[2, 0.03858962501291395], 
                   DiskBox[3, 0.03858962501291395], 
                   DiskBox[4, 0.03858962501291395], 
                   DiskBox[5, 0.03858962501291395], 
                   DiskBox[6, 0.03858962501291395], 
                   DiskBox[7, 0.03858962501291395], 
                   DiskBox[8, 0.03858962501291395], 
                   DiskBox[9, 0.03858962501291395], 
                   DiskBox[10, 0.03858962501291395], 
                   DiskBox[11, 0.03858962501291395], 
                   DiskBox[12, 0.03858962501291395], 
                   DiskBox[13, 0.03858962501291395], 
                   DiskBox[14, 0.03858962501291395], 
                   DiskBox[15, 0.03858962501291395], 
                   DiskBox[16, 0.03858962501291395], 
                   DiskBox[17, 0.03858962501291395], 
                   DiskBox[18, 0.03858962501291395], 
                   DiskBox[19, 0.03858962501291395], 
                   DiskBox[20, 0.03858962501291395], 
                   DiskBox[21, 0.03858962501291395], 
                   DiskBox[22, 0.03858962501291395]}}]], 
               MouseAppearanceTag["NetworkGraphics"]], 
              AllowKernelInitialization -> False]], {
            FormatType -> TraditionalForm, FrameTicks -> None, 
             DefaultBaseStyle -> "NetworkGraphics"}]}], 
         "\[RightAssociation]"}], "\"Clos Network\""},
      "Labeled",
      DisplayFunction->(GridBox[{{
          ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}, {
          TagBox[
           ItemBox[
            PaneBox[
             TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline},
              BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
           "SkipImageSizeLevel"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
        AutoDelete -> False, 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
        BaselinePosition -> {2, 1}]& ),
      InterpretationFunction->(RowBox[{"Labeled", "[", 
         RowBox[{#, ",", #2, ",", "Top", ",", 
           RowBox[{"{", "}"}]}], "]"}]& )], 
     TemplateBox[{
       RowBox[{"\[LeftAssociation]", 
         RowBox[{"\"Graph\"", "\[Rule]", 
           GraphicsBox[
            NamespaceBox["NetworkGraphics", 
             DynamicModuleBox[{Typeset`graph = HoldComplete[
                 
                 Graph[{"N1,1", "N1,2", "N1,3", "N1,4", "N2,1", "N2,2", 
                   "N2,3", "N2,4", "N3,1", "N3,2", "N3,3", "N3,4", "N4,1", 
                   "N4,2", "N4,3", "N4,4"}, {
                  Null, {{1, 2}, {2, 3}, {3, 4}, {5, 6}, {6, 7}, {7, 8}, {9, 
                   10}, {10, 11}, {11, 12}, {13, 14}, {14, 15}, {15, 16}, {1, 
                   5}, {2, 6}, {3, 7}, {4, 8}, {5, 9}, {6, 10}, {7, 11}, {8, 
                   12}, {9, 13}, {10, 14}, {11, 15}, {12, 16}}}, {
                  GraphLayout -> "GridEmbedding", 
                   VertexLabels -> {"Name"}}]]}, 
              TagBox[
               GraphicsGroupBox[{{
                  Directive[
                   Opacity[0.7], 
                   Hue[0.6, 0.7, 0.5]], 
                  Arrowheads[0.], {
                   ArrowBox[CompressedData["
1:eJxTTMoPSmVmYGCQAGImKIaAD/bYaQYHysQ5HLDLo9O41AvgkIfpw6UeJo/O
J9cduNSju4dUcXT3ceCg0dVz4OCTGk6E1BNyByH16O4jVhwXTWw8EwonhLkA
kZgulQ==
                    "], 0.030239520958083826`]}}, {
                  Directive[
                   Hue[0.6, 0.2, 0.8], 
                   EdgeForm[
                    Directive[
                    GrayLevel[0], 
                    Opacity[0.7]]]], {
                   DiskBox[{1., 1.}, 0.030239520958083826`], 
                   InsetBox[
                    FormBox["\"N1,1\"", TraditionalForm], 
                    Offset[{2, 2}, {1.030239520958084, 1.030239520958084}], 
                    ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
                   DiskBox[{1., 2.}, 0.030239520958083826`], 
                   InsetBox[
                    FormBox["\"N1,2\"", TraditionalForm], 
                    Offset[{2, 2}, {1.030239520958084, 2.0302395209580837`}], 
                    
                    ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
                   DiskBox[{1., 3.}, 0.030239520958083826`], 
                   InsetBox[
                    FormBox["\"N1,3\"", TraditionalForm], 
                    Offset[{2, 2}, {1.030239520958084, 3.0302395209580837`}], 
                    
                    ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
                   DiskBox[{1., 4.}, 0.030239520958083826`], 
                   InsetBox[
                    FormBox["\"N1,4\"", TraditionalForm], 
                    Offset[{2, 2}, {1.030239520958084, 4.030239520958084}], 
                    ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
                   DiskBox[{2., 1.}, 0.030239520958083826`], 
                   InsetBox[
                    FormBox["\"N2,1\"", TraditionalForm], 
                    Offset[{2, 2}, {2.0302395209580837`, 1.030239520958084}], 
                    
                    ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
                   DiskBox[{2., 2.}, 0.030239520958083826`], 
                   InsetBox[
                    FormBox["\"N2,2\"", TraditionalForm], 
                    
                    Offset[{2, 2}, {2.0302395209580837`, 
                    2.0302395209580837`}], 
                    ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
                   DiskBox[{2., 3.}, 0.030239520958083826`], 
                   InsetBox[
                    FormBox["\"N2,3\"", TraditionalForm], 
                    
                    Offset[{2, 2}, {2.0302395209580837`, 
                    3.0302395209580837`}], 
                    ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
                   DiskBox[{2., 4.}, 0.030239520958083826`], 
                   InsetBox[
                    FormBox["\"N2,4\"", TraditionalForm], 
                    Offset[{2, 2}, {2.0302395209580837`, 4.030239520958084}], 
                    
                    ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
                   DiskBox[{3., 1.}, 0.030239520958083826`], 
                   InsetBox[
                    FormBox["\"N3,1\"", TraditionalForm], 
                    Offset[{2, 2}, {3.0302395209580837`, 1.030239520958084}], 
                    
                    ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
                   DiskBox[{3., 2.}, 0.030239520958083826`], 
                   InsetBox[
                    FormBox["\"N3,2\"", TraditionalForm], 
                    
                    Offset[{2, 2}, {3.0302395209580837`, 
                    2.0302395209580837`}], 
                    ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
                   DiskBox[{3., 3.}, 0.030239520958083826`], 
                   InsetBox[
                    FormBox["\"N3,3\"", TraditionalForm], 
                    
                    Offset[{2, 2}, {3.0302395209580837`, 
                    3.0302395209580837`}], 
                    ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
                   DiskBox[{3., 4.}, 0.030239520958083826`], 
                   InsetBox[
                    FormBox["\"N3,4\"", TraditionalForm], 
                    Offset[{2, 2}, {3.0302395209580837`, 4.030239520958084}], 
                    
                    ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
                   DiskBox[{4., 1.}, 0.030239520958083826`], 
                   InsetBox[
                    FormBox["\"N4,1\"", TraditionalForm], 
                    Offset[{2, 2}, {4.030239520958084, 1.030239520958084}], 
                    ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
                   DiskBox[{4., 2.}, 0.030239520958083826`], 
                   InsetBox[
                    FormBox["\"N4,2\"", TraditionalForm], 
                    Offset[{2, 2}, {4.030239520958084, 2.0302395209580837`}], 
                    
                    ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
                   DiskBox[{4., 3.}, 0.030239520958083826`], 
                   InsetBox[
                    FormBox["\"N4,3\"", TraditionalForm], 
                    Offset[{2, 2}, {4.030239520958084, 3.0302395209580837`}], 
                    
                    ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
                   DiskBox[{4., 4.}, 0.030239520958083826`], 
                   InsetBox[
                    FormBox["\"N4,4\"", TraditionalForm], 
                    Offset[{2, 2}, {4.030239520958084, 4.030239520958084}], 
                    ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}}}], 
               MouseAppearanceTag["NetworkGraphics"]], 
              AllowKernelInitialization -> False]], {
            FormatType -> TraditionalForm, FrameTicks -> None, 
             DefaultBaseStyle -> "NetworkGraphics"}]}], 
         "\[RightAssociation]"}], "\"Mesh Network\""},
      "Labeled",
      DisplayFunction->(GridBox[{{
          ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}, {
          TagBox[
           ItemBox[
            PaneBox[
             TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline},
              BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
           "SkipImageSizeLevel"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
        AutoDelete -> False, 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
        BaselinePosition -> {2, 1}]& ),
      InterpretationFunction->(RowBox[{"Labeled", "[", 
         RowBox[{#, ",", #2, ",", "Top", ",", 
           RowBox[{"{", "}"}]}], "]"}]& )]}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.9628976266311617`*^9, 3.962897629159225*^9}, 
   3.962897864697432*^9},
 CellLabel->
  "Out[5724]=",ExpressionUUID->"cc4fd69f-0a99-4ad7-8b4e-96f4ea05549f"]
}, Open  ]]
}, Open  ]],

Cell["\<\
Spanning Trees: From Loop Prevention to a Metric of Redundancy\
\>", "Subtitle",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898307534945*^9}, {
   3.962898368042245*^9, 3.962898369635974*^9}, {3.962898493181312*^9, 
   3.9628984941794252`*^9}, {3.9628987079145727`*^9, 3.962898708877008*^9}, {
   3.962898758976321*^9, 3.962898759719747*^9}, {3.96289891712922*^9, 
   3.96289891771443*^9}},
 FormatType->"TextForm",
 FontSize->18,
 Background->None,ExpressionUUID->"894fe6f4-d853-49ab-9bf3-f3c06e46355c"],

Cell[CellGroupData[{

Cell[TextData[{
 "In the context of traditional Layer 2 networking, the term \
\[OpenCurlyDoubleQuote]spanning tree\[CloseCurlyDoubleQuote] is almost \
synonymous with the Spanning Tree Protocol (STP). A spanning tree is formally \
defined as a subgraph of a connected, undirected graph that includes all the \
vertices of the original graph and is a tree\[LongDash]that is, it has no \
cycles. The primary function of STP and its modern variants (like RSTP and \
MSTP) is to prevent broadcast storms and MAC address table instability in \
networks with redundant physical links. It achieves this by logically ",
 StyleBox["pruning",
  FontSlant->"Italic"],
 " the physical topology, disabling redundant paths to create a single, \
active, loop-free tree. From this perspective, multiple paths are a potential \
problem to be managed and constrained. \[NonBreakingSpace] \n\nThis report, \
however, adopts a different, combinatorial perspective. Instead of focusing \
on the single active tree chosen by a protocol like STP, we consider the \
total number of distinct spanning trees that can be formed within a given \
network graph. This count serves as a powerful and sophisticated metric for \
the graph\[CloseCurlyQuote]s overall connectivity, redundancy, and path \
diversity. A graph that can form a vast number of unique spanning trees \
possesses a rich set of potential loop-free paths connecting all of its \
nodes. This richness is a critical resource that can be exploited by more \
advanced, Layer 3 routing protocols for dynamic load balancing, fault \
tolerance, and adaptive routing. A higher spanning tree count indicates a \
greater number of ways the network can route traffic, providing more options \
to bypass congestion or link failures. \[NonBreakingSpace] "
}], "Chapter",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898338257278*^9}, {
   3.962898381402219*^9, 3.96289842166496*^9}, {3.96289849829926*^9, 
   3.962898570547124*^9}, {3.962898605101194*^9, 3.9628986082485447`*^9}, {
   3.962898718588675*^9, 3.962898842457036*^9}, {3.96289889781201*^9, 
   3.9628989433571777`*^9}},
 FormatType->"TextForm",
 FontSize->14,
 Background->None,ExpressionUUID->"117a6cbe-d82b-4ca2-9291-baa4e756399c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"stateEncode", "[", "s_List", "]"}], ":=", 
   RowBox[{"FromDigits", "[", 
    RowBox[{"s", ",", "4"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"stateDecode", "[", "n_Integer", "]"}], ":=", 
   RowBox[{"IntegerDigits", "[", 
    RowBox[{"n", ",", "4", ",", "4"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"isWall", "[", "s_List", "]"}], ":=", 
   RowBox[{
    RowBox[{"s", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
    "\[Equal]", "1"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"isReceiver", "[", "s_List", "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"s", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
     "\[Equal]", "2"}], "||", 
    RowBox[{
     RowBox[{"s", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
     "\[Equal]", "3"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"isSpecial", "[", "s_List", "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"s", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
     "\[GreaterEqual]", "1"}], "||", 
    RowBox[{
     RowBox[{"s", "\[LeftDoubleBracket]", "4", "\[RightDoubleBracket]"}], 
     "\[Equal]", "1"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"hasPacket", "[", "s_List", "]"}], ":=", 
   RowBox[{
    RowBox[{"s", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
    "\[Equal]", "1"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"hasPosAck", "[", "s_List", "]"}], ":=", 
   RowBox[{
    RowBox[{"s", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
    "\[Equal]", "1"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"hasNegAck", "[", "s_List", "]"}], ":=", 
   RowBox[{
    RowBox[{"s", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
    "\[Equal]", "2"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"hasAck", "[", "s_List", "]"}], ":=", 
   RowBox[{
    RowBox[{"s", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
    "\[GreaterEqual]", "1"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"isHold", "[", "s_List", "]"}], ":=", 
   RowBox[{
    RowBox[{"s", "\[LeftDoubleBracket]", "4", "\[RightDoubleBracket]"}], 
    "\[Equal]", "1"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"packetGlyph", "[", "pos_", "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Opacity", "[", ".9", "]"}], ",", 
     RowBox[{"RGBColor", "[", 
      RowBox[{".2", ",", ".4", ",", ".8"}], "]"}], ",", 
     RowBox[{"Rotate", "[", 
      RowBox[{
       RowBox[{"Rectangle", "[", 
        RowBox[{
         RowBox[{"pos", "+", 
          RowBox[{"{", 
           RowBox[{".1", ",", ".3"}], "}"}]}], ",", 
         RowBox[{"pos", "+", 
          RowBox[{"{", 
           RowBox[{".9", ",", ".7"}], "}"}]}]}], "]"}], ",", 
       RowBox[{
        RowBox[{"-", "45"}], " ", "\[Degree]"}], ",", 
       RowBox[{"pos", "+", 
        RowBox[{"{", 
         RowBox[{".5", ",", ".5"}], "}"}]}]}], "]"}]}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ackGlyph", "[", "pos_", "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Opacity", "[", ".9", "]"}], ",", "Orange", ",", 
     RowBox[{"Rotate", "[", 
      RowBox[{
       RowBox[{"Rectangle", "[", 
        RowBox[{
         RowBox[{"pos", "+", 
          RowBox[{"{", 
           RowBox[{".1", ",", ".3"}], "}"}]}], ",", 
         RowBox[{"pos", "+", 
          RowBox[{"{", 
           RowBox[{".9", ",", ".7"}], "}"}]}]}], "]"}], ",", 
       RowBox[{"45", " ", "\[Degree]"}], ",", 
       RowBox[{"pos", "+", 
        RowBox[{"{", 
         RowBox[{".5", ",", ".5"}], "}"}]}]}], "]"}]}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"nackGlyph", "[", "pos_", "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Opacity", "[", ".9", "]"}], ",", "Red", ",", 
     RowBox[{"Rotate", "[", 
      RowBox[{
       RowBox[{"Rectangle", "[", 
        RowBox[{
         RowBox[{"pos", "+", 
          RowBox[{"{", 
           RowBox[{".1", ",", ".3"}], "}"}]}], ",", 
         RowBox[{"pos", "+", 
          RowBox[{"{", 
           RowBox[{".9", ",", ".7"}], "}"}]}]}], "]"}], ",", 
       RowBox[{"45", " ", "\[Degree]"}], ",", 
       RowBox[{"pos", "+", 
        RowBox[{"{", 
         RowBox[{".5", ",", ".5"}], "}"}]}]}], "]"}]}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"wallGlyph", "[", "pos_", "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{"Black", ",", 
     RowBox[{"Rectangle", "[", 
      RowBox[{"pos", ",", 
       RowBox[{"pos", "+", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}]}]}], "]"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"errGlyph", "[", "pos_", "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"RGBColor", "[", 
      RowBox[{".8", ",", "0", ",", "0"}], "]"}], ",", 
     RowBox[{"Rectangle", "[", 
      RowBox[{"pos", ",", 
       RowBox[{"pos", "+", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}]}]}], "]"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"numberToGraphics", "[", 
    RowBox[{"num_", ",", "w_", ",", "h_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"state", "=", 
        RowBox[{"stateDecode", "[", "num", "]"}]}], ",", 
       RowBox[{"pos", "=", 
        RowBox[{"{", 
         RowBox[{"w", ",", 
          RowBox[{"-", "h"}]}], "}"}]}], ",", 
       RowBox[{"gfx", "=", 
        RowBox[{"{", "}"}]}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
          "state", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
          "\[Equal]", "1"}], "||", 
         RowBox[{
          RowBox[{
          "state", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
          "\[Equal]", "2"}]}], ",", 
        RowBox[{"gfx", "=", 
         RowBox[{"Append", "[", 
          RowBox[{"gfx", ",", 
           RowBox[{"wallGlyph", "[", "pos", "]"}]}], "]"}]}]}], "]"}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
         "state", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         "\[Equal]", "3"}], ",", 
        RowBox[{"gfx", "=", 
         RowBox[{"Append", "[", 
          RowBox[{"gfx", ",", 
           RowBox[{"errGlyph", "[", "pos", "]"}]}], "]"}]}]}], "]"}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
         "state", "\[LeftDoubleBracket]", "4", "\[RightDoubleBracket]"}], 
         "\[Equal]", "1"}], ",", 
        RowBox[{"gfx", "=", 
         RowBox[{"Append", "[", 
          RowBox[{"gfx", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Opacity", "[", ".4", "]"}], ",", "Gray", ",", 
             RowBox[{"Rectangle", "[", 
              RowBox[{"pos", ",", 
               RowBox[{"pos", "+", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "1"}], "}"}]}]}], "]"}]}], "}"}]}], 
          "]"}]}]}], "]"}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
         "state", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
         "\[Equal]", "1"}], ",", 
        RowBox[{"gfx", "=", 
         RowBox[{"Append", "[", 
          RowBox[{"gfx", ",", 
           RowBox[{"packetGlyph", "[", "pos", "]"}]}], "]"}]}]}], "]"}], ";", 
      
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
         "state", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
         "\[Equal]", "1"}], ",", 
        RowBox[{"gfx", "=", 
         RowBox[{"Append", "[", 
          RowBox[{"gfx", ",", 
           RowBox[{"ackGlyph", "[", "pos", "]"}]}], "]"}]}]}], "]"}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
         "state", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
         "\[Equal]", "2"}], ",", 
        RowBox[{"gfx", "=", 
         RowBox[{"Append", "[", 
          RowBox[{"gfx", ",", 
           RowBox[{"nackGlyph", "[", "pos", "]"}]}], "]"}]}]}], "]"}], ";", 
      RowBox[{"Flatten", "[", "gfx", "]"}]}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"OutputGraphic", "[", "arr_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"h", ",", "w"}], "}"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"h", ",", "w"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "arr", "]"}]}], ";", 
      RowBox[{"Graphics", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"EdgeForm", "[", 
             RowBox[{"GrayLevel", "[", ".9", "]"}], "]"}], ",", 
            RowBox[{"FaceForm", "[", "]"}], ",", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"Rectangle", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"c", ",", 
                  RowBox[{"-", "r"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"c", "+", "1"}], ",", 
                  RowBox[{
                   RowBox[{"-", "r"}], "-", "1"}]}], "}"}]}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"c", ",", "0", ",", 
                RowBox[{"w", "-", "1"}]}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"r", ",", "0", ",", 
                RowBox[{"h", "-", "1"}]}], "}"}]}], "]"}]}], "}"}], ",", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"numberToGraphics", "[", 
             RowBox[{
              RowBox[{"arr", "\[LeftDoubleBracket]", 
               RowBox[{"r", ",", "c"}], "\[RightDoubleBracket]"}], ",", 
              RowBox[{"c", "-", "1"}], ",", 
              RowBox[{"r", "-", "1"}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"c", ",", "1", ",", "w"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"r", ",", "1", ",", "h"}], "}"}]}], "]"}]}], "}"}], ",", 
        
        RowBox[{"ImageSize", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"450", ",", "350"}], "}"}]}], ",", 
        RowBox[{"PlotRange", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "w"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "h"}], ",", "0"}], "}"}]}], "}"}]}], ",", 
        RowBox[{"PlotRangePadding", "\[Rule]", ".2"}], ",", 
        RowBox[{"AspectRatio", "\[Rule]", "1"}]}], "]"}]}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"handlePacket", "[", 
    RowBox[{"left_", ",", "centre_", ",", "right_", ",", "newState_"}], "]"}],
    ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"s", "=", "newState"}], "}"}], ",", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"hasNegAck", "[", "right", "]"}], "||", 
         RowBox[{"hasNegAck", "[", "centre", "]"}]}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"s", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}],
           "=", "0"}], ";", 
         RowBox[{"Return", "[", "s", "]"}]}]}], "]"}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"hasPacket", "[", "left", "]"}], "&&", 
         RowBox[{"!", 
          RowBox[{"hasPacket", "[", "centre", "]"}]}], "&&", 
         RowBox[{"!", 
          RowBox[{"isHold", "[", "centre", "]"}]}], "&&", 
         RowBox[{"!", 
          RowBox[{"isHold", "[", "left", "]"}]}]}], ",", 
        RowBox[{
         RowBox[{"s", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
         "=", "1"}]}], "]"}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"hasPacket", "[", "centre", "]"}], "&&", 
         RowBox[{"!", 
          RowBox[{"hasPacket", "[", "right", "]"}]}], "&&", 
         RowBox[{"!", 
          RowBox[{"isHold", "[", "right", "]"}]}]}], ",", 
        RowBox[{
         RowBox[{"s", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
         "=", "0"}]}], "]"}], ";", "s"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"handleAck", "[", 
    RowBox[{"left_", ",", "centre_", ",", "right_", ",", "newState_"}], "]"}],
    ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"s", "=", "newState"}], "}"}], ",", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"hasAck", "[", "right", "]"}], "&&", 
         RowBox[{"!", 
          RowBox[{"hasAck", "[", "centre", "]"}]}], "&&", 
         RowBox[{"!", 
          RowBox[{"isHold", "[", "right", "]"}]}], "&&", 
         RowBox[{"!", 
          RowBox[{"isHold", "[", "centre", "]"}]}]}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"s", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}],
           "=", 
          RowBox[{
          "right", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], 
         ";", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"hasPacket", "[", "s", "]"}], "&&", 
            RowBox[{"hasNegAck", "[", "right", "]"}]}], ",", 
           RowBox[{
            RowBox[{
            "s", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "=", 
            "0"}]}], "]"}], ";"}]}], "]"}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"hasAck", "[", "centre", "]"}], "&&", 
         RowBox[{"!", 
          RowBox[{"hasAck", "[", "left", "]"}]}], "&&", 
         RowBox[{"!", 
          RowBox[{"isHold", "[", "left", "]"}]}]}], ",", 
        RowBox[{
         RowBox[{"s", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
         "=", "0"}]}], "]"}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"isReceiver", "[", "right", "]"}], "&&", 
         RowBox[{"hasPacket", "[", "centre", "]"}]}], ",", 
        RowBox[{
         RowBox[{"s", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
         "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
            "right", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
            "\[Equal]", "2"}], ",", "1", ",", "2"}], "]"}]}]}], "]"}], ";", 
      "s"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"caRule", "=", 
   RowBox[{"Function", "[", 
    RowBox[{
     RowBox[{"{", "nb", "}"}], ",", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"l", ",", "c", ",", "r", ",", "newState"}], "}"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"l", ",", "c", ",", "r"}], "}"}], "=", 
         RowBox[{"stateDecode", "/@", "nb"}]}], ";", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"isSpecial", "[", "c", "]"}], ",", 
          RowBox[{"stateEncode", "[", "c", "]"}], ",", 
          RowBox[{
           RowBox[{"newState", "=", "c"}], ";", 
           RowBox[{"newState", "=", 
            RowBox[{"handlePacket", "[", 
             RowBox[{"l", ",", "c", ",", "r", ",", "newState"}], "]"}]}], ";", 
           RowBox[{"newState", "=", 
            RowBox[{"handleAck", "[", 
             RowBox[{"l", ",", "c", ",", "r", ",", "newState"}], "]"}]}], ";", 
           RowBox[{"stateEncode", "[", "newState", "]"}]}]}], "]"}]}]}], 
      "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"wallS", "=", 
   RowBox[{"stateEncode", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"packetS", "=", 
   RowBox[{"stateEncode", "[", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"receiverOK", "=", 
   RowBox[{"stateEncode", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "0", ",", "0", ",", "0"}], "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"receiverErr", "=", 
   RowBox[{"stateEncode", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "0", ",", "0", ",", "0"}], "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"holdS", "=", 
   RowBox[{"stateEncode", "[", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"runSim", "[", 
    RowBox[{"width_", ",", "steps_", ",", "holds_List", ",", "recvErr_"}], 
    "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"t", "=", "1"}], ",", "state", ",", 
       RowBox[{"output", "=", 
        RowBox[{"{", "}"}]}], ",", "startErr", ",", "endErr"}], "}"}], ",", 
     RowBox[{
      RowBox[{"state", "=", 
       RowBox[{"ConstantArray", "[", 
        RowBox[{"0", ",", 
         RowBox[{"width", "+", "2"}]}], "]"}]}], ";", 
      RowBox[{
       RowBox[{
       "state", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "=", 
       "wallS"}], ";", 
      RowBox[{
       RowBox[{"state", "\[LeftDoubleBracket]", 
        RowBox[{"-", "1"}], "\[RightDoubleBracket]"}], "=", "receiverOK"}], 
      ";", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"startErr", ",", "endErr"}], "}"}], "=", "recvErr"}], ";", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{"t", "\[LessEqual]", "steps"}], ",", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"EvenQ", "[", "t", "]"}], "&&", 
            RowBox[{"!", 
             RowBox[{"hasPacket", "[", 
              RowBox[{"stateDecode", "[", 
               RowBox[{
               "state", "\[LeftDoubleBracket]", "2", 
                "\[RightDoubleBracket]"}], "]"}], "]"}]}]}], ",", 
           RowBox[{
            RowBox[{
            "state", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "+=",
             "packetS"}]}], "]"}], ";", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"startErr", "\[LessEqual]", "t", "<", "endErr"}], ",", 
           RowBox[{
            RowBox[{"state", "\[LeftDoubleBracket]", 
             RowBox[{"-", "1"}], "\[RightDoubleBracket]"}], "=", 
            "receiverErr"}], ",", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"state", "\[LeftDoubleBracket]", 
               RowBox[{"-", "1"}], "\[RightDoubleBracket]"}], "===", 
              "receiverErr"}], ",", 
             RowBox[{
              RowBox[{"state", "\[LeftDoubleBracket]", 
               RowBox[{"-", "1"}], "\[RightDoubleBracket]"}], "=", 
              "receiverOK"}]}], "]"}]}], "]"}], ";", 
         RowBox[{"Do", "[", 
          RowBox[{
           RowBox[{"With", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"pos", "=", 
                RowBox[{
                "holdSpec", "\[LeftDoubleBracket]", "1", 
                 "\[RightDoubleBracket]"}]}], ",", 
               RowBox[{"holdStart", "=", 
                RowBox[{
                "holdSpec", "\[LeftDoubleBracket]", "2", 
                 "\[RightDoubleBracket]"}]}], ",", 
               RowBox[{"holdEnd", "=", 
                RowBox[{
                "holdSpec", "\[LeftDoubleBracket]", "3", 
                 "\[RightDoubleBracket]"}]}]}], "}"}], ",", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"holdStart", "\[LessEqual]", "t", "<", "holdEnd"}], 
               ",", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"!", 
                  RowBox[{"isHold", "[", 
                   RowBox[{"stateDecode", "[", 
                    RowBox[{
                    "state", "\[LeftDoubleBracket]", "pos", 
                    "\[RightDoubleBracket]"}], "]"}], "]"}]}], ",", 
                 RowBox[{
                  RowBox[{
                  "state", "\[LeftDoubleBracket]", "pos", 
                   "\[RightDoubleBracket]"}], "+=", "holdS"}]}], "]"}], ",", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"isHold", "[", 
                  RowBox[{"stateDecode", "[", 
                   RowBox[{
                   "state", "\[LeftDoubleBracket]", "pos", 
                    "\[RightDoubleBracket]"}], "]"}], "]"}], ",", 
                 RowBox[{
                  RowBox[{
                  "state", "\[LeftDoubleBracket]", "pos", 
                   "\[RightDoubleBracket]"}], "-=", "holdS"}]}], "]"}]}], 
              "]"}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"holdSpec", ",", "holds"}], "}"}]}], "]"}], ";", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"output", ",", "state"}], "]"}], ";", 
         RowBox[{"state", "=", 
          RowBox[{"CellularAutomaton", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"caRule", ",", 
              RowBox[{"{", "}"}], ",", "1"}], "}"}], ",", "state"}], "]"}]}], 
         ";", 
         RowBox[{"t", "++"}]}]}], "]"}], ";", "output"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Column", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Style", "[", 
        RowBox[{
        "\"\<Daedalus Network Automaton\>\"", ",", "18", ",", "Bold"}], "]"}],
        ",", 
       RowBox[{"Style", "[", 
        RowBox[{
        "\"\<One-dimensional resilient link \[LongDash] local rules only\>\"",
          ",", "12", ",", "Gray"}], "]"}], ",", 
       RowBox[{"OutputGraphic", "[", 
        RowBox[{"runSim", "[", 
         RowBox[{"width", ",", "100", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"h1pos", ",", "h1start", ",", "h1end"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"h2pos", ",", "h2start", ",", "h2end"}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"errStart", ",", "errEnd"}], "}"}]}], "]"}], "]"}]}], 
      "}"}], ",", 
     RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"width", ",", "25", ",", "\"\<Link Width\>\""}], "}"}], ",", 
     "10", ",", "40", ",", "1", ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
   "Delimiter", ",", 
   RowBox[{"Style", "[", 
    RowBox[{"\"\<Receiver Error (Neg-ACK burst)\>\"", ",", "Bold"}], "]"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"errStart", ",", "20", ",", "\"\<Error Start Time\>\""}], "}"}],
      ",", "1", ",", "100", ",", "1", ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"errEnd", ",", "30", ",", "\"\<Error End Time\>\""}], "}"}], 
     ",", 
     RowBox[{"Dynamic", "[", 
      RowBox[{"errStart", "+", "1"}], "]"}], ",", "100", ",", "1", ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
   "Delimiter", ",", 
   RowBox[{"Style", "[", 
    RowBox[{"\"\<Stalled Node 1\>\"", ",", "Bold"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"h1pos", ",", "5", ",", "\"\<Position\>\""}], "}"}], ",", "2", 
     ",", 
     RowBox[{"Dynamic", "[", "width", "]"}], ",", "1", ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"h1start", ",", "40", ",", "\"\<Start Time\>\""}], "}"}], ",", 
     "1", ",", "100", ",", "1", ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"h1end", ",", "60", ",", "\"\<End Time\>\""}], "}"}], ",", 
     RowBox[{"Dynamic", "[", 
      RowBox[{"h1start", "+", "1"}], "]"}], ",", "101", ",", "1", ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
   "Delimiter", ",", 
   RowBox[{"Style", "[", 
    RowBox[{"\"\<Stalled Node 2\>\"", ",", "Bold"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"h2pos", ",", "15", ",", "\"\<Position\>\""}], "}"}], ",", "2", 
     ",", 
     RowBox[{"Dynamic", "[", "width", "]"}], ",", "1", ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"h2start", ",", "65", ",", "\"\<Start Time\>\""}], "}"}], ",", 
     "1", ",", "100", ",", "1", ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"h2end", ",", "85", ",", "\"\<End Time\>\""}], "}"}], ",", 
     RowBox[{"Dynamic", "[", 
      RowBox[{"h2start", "+", "1"}], "]"}], ",", "101", ",", "1", ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"ControlPlacement", "\[Rule]", "Left"}], ",", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "]"}]}], "Code",
 CellChangeTimes->{{3.9628977109991283`*^9, 3.962897711005006*^9}, 
   3.962897858144843*^9},
 CellLabel->
  "In[5692]:=",ExpressionUUID->"f0d595f4-1411-4142-95c0-78e51f9c0756"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{DaedaelusMeshCore`Private`errEnd$$ = 30, 
    DaedaelusMeshCore`Private`errStart$$ = 20, 
    DaedaelusMeshCore`Private`h1end$$ = 60, 
    DaedaelusMeshCore`Private`h1pos$$ = 5, 
    DaedaelusMeshCore`Private`h1start$$ = 40, 
    DaedaelusMeshCore`Private`h2end$$ = 85, 
    DaedaelusMeshCore`Private`h2pos$$ = 15, 
    DaedaelusMeshCore`Private`h2start$$ = 65, 
    DaedaelusMeshCore`Private`width$$ = 25, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[DaedaelusMeshCore`Private`width$$], 25, "Link Width"}, 10, 40, 1, 
      ControlType -> Manipulator}, {
      Hold[
       Style["Receiver Error (Neg-ACK burst)", Bold]], 
      Manipulate`Dump`ThisIsNotAControl, ControlType -> None}, {{
       Hold[DaedaelusMeshCore`Private`errStart$$], 20, "Error Start Time"}, 1,
       100, 1, ControlType -> Manipulator}, {{
       Hold[DaedaelusMeshCore`Private`errEnd$$], 30, "Error End Time"}, 
      Dynamic[DaedaelusMeshCore`Private`errStart$$ + 1], 100, 1, ControlType -> 
      Manipulator}, {
      Hold[
       Style["Stalled Node 1", Bold]], Manipulate`Dump`ThisIsNotAControl, 
      ControlType -> None}, {{
       Hold[DaedaelusMeshCore`Private`h1pos$$], 5, "Position"}, 2, 
      Dynamic[DaedaelusMeshCore`Private`width$$], 1, ControlType -> 
      Manipulator}, {{
       Hold[DaedaelusMeshCore`Private`h1start$$], 40, "Start Time"}, 1, 100, 
      1, ControlType -> Manipulator}, {{
       Hold[DaedaelusMeshCore`Private`h1end$$], 60, "End Time"}, 
      Dynamic[DaedaelusMeshCore`Private`h1start$$ + 1], 101, 1, ControlType -> 
      Manipulator}, {
      Hold[
       Style["Stalled Node 2", Bold]], Manipulate`Dump`ThisIsNotAControl, 
      ControlType -> None}, {{
       Hold[DaedaelusMeshCore`Private`h2pos$$], 15, "Position"}, 2, 
      Dynamic[DaedaelusMeshCore`Private`width$$], 1, ControlType -> 
      Manipulator}, {{
       Hold[DaedaelusMeshCore`Private`h2start$$], 65, "Start Time"}, 1, 100, 
      1, ControlType -> Manipulator}, {{
       Hold[DaedaelusMeshCore`Private`h2end$$], 85, "End Time"}, 
      Dynamic[DaedaelusMeshCore`Private`h2start$$ + 1], 101, 1, ControlType -> 
      Manipulator}}, Typeset`size$$ = {
    563., {244.17974853515625`, 253.82025146484375`}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {
       DaedaelusMeshCore`Private`errEnd$$ = 30, 
        DaedaelusMeshCore`Private`errStart$$ = 20, 
        DaedaelusMeshCore`Private`h1end$$ = 60, 
        DaedaelusMeshCore`Private`h1pos$$ = 5, 
        DaedaelusMeshCore`Private`h1start$$ = 40, 
        DaedaelusMeshCore`Private`h2end$$ = 85, 
        DaedaelusMeshCore`Private`h2pos$$ = 15, 
        DaedaelusMeshCore`Private`h2start$$ = 65, 
        DaedaelusMeshCore`Private`width$$ = 25}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Column[{
         Style["Daedalus Network Automaton", 18, Bold], 
         Style[
         "One-dimensional resilient link \[LongDash] local rules only", 12, 
          Gray], 
         DaedaelusMeshCore`Private`OutputGraphic[
          DaedaelusMeshCore`Private`runSim[
          DaedaelusMeshCore`Private`width$$, 
           100, {{DaedaelusMeshCore`Private`h1pos$$, 
             DaedaelusMeshCore`Private`h1start$$, 
             DaedaelusMeshCore`Private`h1end$$}, {
            DaedaelusMeshCore`Private`h2pos$$, 
             DaedaelusMeshCore`Private`h2start$$, 
             DaedaelusMeshCore`Private`h2end$$}}, {
           DaedaelusMeshCore`Private`errStart$$, 
            DaedaelusMeshCore`Private`errEnd$$}]]}, Alignment -> Center], 
      "Specifications" :> {{{
         DaedaelusMeshCore`Private`width$$, 25, "Link Width"}, 10, 40, 1, 
         Appearance -> "Labeled"}, Delimiter, 
        Style[
        "Receiver Error (Neg-ACK burst)", Bold], {{
         DaedaelusMeshCore`Private`errStart$$, 20, "Error Start Time"}, 1, 
         100, 1, Appearance -> "Labeled"}, {{
         DaedaelusMeshCore`Private`errEnd$$, 30, "Error End Time"}, 
         Dynamic[DaedaelusMeshCore`Private`errStart$$ + 1], 100, 1, 
         Appearance -> "Labeled"}, Delimiter, 
        Style[
        "Stalled Node 1", Bold], {{
         DaedaelusMeshCore`Private`h1pos$$, 5, "Position"}, 2, 
         Dynamic[DaedaelusMeshCore`Private`width$$], 1, Appearance -> 
         "Labeled"}, {{DaedaelusMeshCore`Private`h1start$$, 40, "Start Time"},
          1, 100, 1, Appearance -> "Labeled"}, {{
         DaedaelusMeshCore`Private`h1end$$, 60, "End Time"}, 
         Dynamic[DaedaelusMeshCore`Private`h1start$$ + 1], 101, 1, Appearance -> 
         "Labeled"}, Delimiter, 
        Style[
        "Stalled Node 2", Bold], {{
         DaedaelusMeshCore`Private`h2pos$$, 15, "Position"}, 2, 
         Dynamic[DaedaelusMeshCore`Private`width$$], 1, Appearance -> 
         "Labeled"}, {{DaedaelusMeshCore`Private`h2start$$, 65, "Start Time"},
          1, 100, 1, Appearance -> "Labeled"}, {{
         DaedaelusMeshCore`Private`h2end$$, 85, "End Time"}, 
         Dynamic[DaedaelusMeshCore`Private`h2start$$ + 1], 101, 1, Appearance -> 
         "Labeled"}}, "Options" :> {ControlPlacement -> Left}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{1023., {280., 289.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({DaedaelusMeshCore`Private`OutputGraphic[
         Pattern[DaedaelusMeshCore`Private`arr, 
          Blank[]]] := 
       Module[{DaedaelusMeshCore`Private`h, 
          DaedaelusMeshCore`Private`w}, {
           DaedaelusMeshCore`Private`h, DaedaelusMeshCore`Private`w} = 
          Dimensions[DaedaelusMeshCore`Private`arr]; Graphics[{{
             EdgeForm[
              GrayLevel[0.9]], 
             FaceForm[], 
             Table[
              
              Rectangle[{
               DaedaelusMeshCore`Private`c, -DaedaelusMeshCore`Private`r}, {
               DaedaelusMeshCore`Private`c + 1, -DaedaelusMeshCore`Private`r - 
                1}], {DaedaelusMeshCore`Private`c, 0, 
               DaedaelusMeshCore`Private`w - 1}, {
              DaedaelusMeshCore`Private`r, 0, DaedaelusMeshCore`Private`h - 
               1}]}, 
            Table[
             DaedaelusMeshCore`Private`numberToGraphics[
              Part[
              DaedaelusMeshCore`Private`arr, DaedaelusMeshCore`Private`r, 
               DaedaelusMeshCore`Private`c], DaedaelusMeshCore`Private`c - 1, 
              DaedaelusMeshCore`Private`r - 1], {
             DaedaelusMeshCore`Private`c, 1, DaedaelusMeshCore`Private`w}, {
             DaedaelusMeshCore`Private`r, 1, DaedaelusMeshCore`Private`h}]}, 
           ImageSize -> {450, 350}, 
           PlotRange -> {{
             0, DaedaelusMeshCore`Private`w}, {-DaedaelusMeshCore`Private`h, 
              0}}, PlotRangePadding -> 0.2, AspectRatio -> 1]], 
       DaedaelusMeshCore`Private`numberToGraphics[
         Pattern[DaedaelusMeshCore`Private`num, 
          Blank[]], 
         Pattern[DaedaelusMeshCore`Private`w, 
          Blank[]], 
         Pattern[DaedaelusMeshCore`Private`h, 
          Blank[]]] := 
       Module[{DaedaelusMeshCore`Private`state = 
          DaedaelusMeshCore`Private`stateDecode[
           DaedaelusMeshCore`Private`num], 
          DaedaelusMeshCore`Private`pos = {
           DaedaelusMeshCore`Private`w, -DaedaelusMeshCore`Private`h}, 
          DaedaelusMeshCore`Private`gfx = {}}, If[
           Or[
           Part[DaedaelusMeshCore`Private`state, 1] == 1, 
            Part[DaedaelusMeshCore`Private`state, 1] == 2], 
           DaedaelusMeshCore`Private`gfx = 
           Append[DaedaelusMeshCore`Private`gfx, 
             DaedaelusMeshCore`Private`wallGlyph[
             DaedaelusMeshCore`Private`pos]]]; 
         If[Part[DaedaelusMeshCore`Private`state, 1] == 3, 
           DaedaelusMeshCore`Private`gfx = 
           Append[DaedaelusMeshCore`Private`gfx, 
             DaedaelusMeshCore`Private`errGlyph[
             DaedaelusMeshCore`Private`pos]]]; 
         If[Part[DaedaelusMeshCore`Private`state, 4] == 1, 
           DaedaelusMeshCore`Private`gfx = 
           Append[DaedaelusMeshCore`Private`gfx, {
              Opacity[0.4], Gray, 
              Rectangle[
              DaedaelusMeshCore`Private`pos, 
               DaedaelusMeshCore`Private`pos + {1, 1}]}]]; 
         If[Part[DaedaelusMeshCore`Private`state, 2] == 1, 
           DaedaelusMeshCore`Private`gfx = 
           Append[DaedaelusMeshCore`Private`gfx, 
             DaedaelusMeshCore`Private`packetGlyph[
             DaedaelusMeshCore`Private`pos]]]; 
         If[Part[DaedaelusMeshCore`Private`state, 3] == 1, 
           DaedaelusMeshCore`Private`gfx = 
           Append[DaedaelusMeshCore`Private`gfx, 
             DaedaelusMeshCore`Private`ackGlyph[
             DaedaelusMeshCore`Private`pos]]]; 
         If[Part[DaedaelusMeshCore`Private`state, 3] == 2, 
           DaedaelusMeshCore`Private`gfx = 
           Append[DaedaelusMeshCore`Private`gfx, 
             DaedaelusMeshCore`Private`nackGlyph[
             DaedaelusMeshCore`Private`pos]]]; 
         Flatten[DaedaelusMeshCore`Private`gfx]], 
       DaedaelusMeshCore`Private`stateDecode[
         Pattern[DaedaelusMeshCore`Private`n, 
          Blank[Integer]]] := 
       IntegerDigits[DaedaelusMeshCore`Private`n, 4, 4], 
       DaedaelusMeshCore`Private`wallGlyph[
         Pattern[DaedaelusMeshCore`Private`pos, 
          Blank[]]] := {Black, 
         Rectangle[
         DaedaelusMeshCore`Private`pos, 
          DaedaelusMeshCore`Private`pos + {1, 1}]}, 
       DaedaelusMeshCore`Private`errGlyph[
         Pattern[DaedaelusMeshCore`Private`pos, 
          Blank[]]] := {
         RGBColor[0.8, 0, 0], 
         Rectangle[
         DaedaelusMeshCore`Private`pos, 
          DaedaelusMeshCore`Private`pos + {1, 1}]}, 
       DaedaelusMeshCore`Private`packetGlyph[
         Pattern[DaedaelusMeshCore`Private`pos, 
          Blank[]]] := {
         Opacity[0.9], 
         RGBColor[0.2, 0.4, 0.8], 
         Rotate[
          Rectangle[
          DaedaelusMeshCore`Private`pos + {0.1, 0.3}, 
           DaedaelusMeshCore`Private`pos + {0.9, 0.7}], (-45) Degree, 
          DaedaelusMeshCore`Private`pos + {0.5, 0.5}]}, 
       DaedaelusMeshCore`Private`ackGlyph[
         Pattern[DaedaelusMeshCore`Private`pos, 
          Blank[]]] := {
         Opacity[0.9], Orange, 
         Rotate[
          Rectangle[
          DaedaelusMeshCore`Private`pos + {0.1, 0.3}, 
           DaedaelusMeshCore`Private`pos + {0.9, 0.7}], 45 Degree, 
          DaedaelusMeshCore`Private`pos + {0.5, 0.5}]}, 
       DaedaelusMeshCore`Private`nackGlyph[
         Pattern[DaedaelusMeshCore`Private`pos, 
          Blank[]]] := {
         Opacity[0.9], Red, 
         Rotate[
          Rectangle[
          DaedaelusMeshCore`Private`pos + {0.1, 0.3}, 
           DaedaelusMeshCore`Private`pos + {0.9, 0.7}], 45 Degree, 
          DaedaelusMeshCore`Private`pos + {0.5, 0.5}]}, 
       DaedaelusMeshCore`Private`runSim[
         Pattern[DaedaelusMeshCore`Private`width, 
          Blank[]], 
         Pattern[DaedaelusMeshCore`Private`steps, 
          Blank[]], 
         Pattern[DaedaelusMeshCore`Private`holds, 
          Blank[List]], 
         Pattern[DaedaelusMeshCore`Private`recvErr, 
          Blank[]]] := 
       Module[{DaedaelusMeshCore`Private`t = 1, 
          DaedaelusMeshCore`Private`state, 
          DaedaelusMeshCore`Private`output = {}, 
          DaedaelusMeshCore`Private`startErr, 
          DaedaelusMeshCore`Private`endErr}, 
         DaedaelusMeshCore`Private`state = 
          ConstantArray[0, DaedaelusMeshCore`Private`width + 2]; 
         Part[DaedaelusMeshCore`Private`state, 1] = 
          DaedaelusMeshCore`Private`wallS; 
         Part[DaedaelusMeshCore`Private`state, -1] = 
          DaedaelusMeshCore`Private`receiverOK; {
           DaedaelusMeshCore`Private`startErr, 
            DaedaelusMeshCore`Private`endErr} = 
          DaedaelusMeshCore`Private`recvErr; 
         While[DaedaelusMeshCore`Private`t <= DaedaelusMeshCore`Private`steps,
            If[
             And[
              EvenQ[DaedaelusMeshCore`Private`t], 
              Not[
               DaedaelusMeshCore`Private`hasPacket[
                DaedaelusMeshCore`Private`stateDecode[
                 Part[DaedaelusMeshCore`Private`state, 2]]]]], 
             AddTo[
              Part[DaedaelusMeshCore`Private`state, 2], 
              DaedaelusMeshCore`Private`packetS]]; If[
             Inequality[
             DaedaelusMeshCore`Private`startErr, LessEqual, 
              DaedaelusMeshCore`Private`t, Less, 
              DaedaelusMeshCore`Private`endErr], 
             Part[DaedaelusMeshCore`Private`state, -1] = 
             DaedaelusMeshCore`Private`receiverErr, 
             If[
             Part[DaedaelusMeshCore`Private`state, -1] === 
              DaedaelusMeshCore`Private`receiverErr, 
              Part[DaedaelusMeshCore`Private`state, -1] = 
              DaedaelusMeshCore`Private`receiverOK]]; Do[
             
             With[{DaedaelusMeshCore`Private`pos = 
               Part[DaedaelusMeshCore`Private`holdSpec, 1], 
               DaedaelusMeshCore`Private`holdStart = 
               Part[DaedaelusMeshCore`Private`holdSpec, 2], 
               DaedaelusMeshCore`Private`holdEnd = 
               Part[DaedaelusMeshCore`Private`holdSpec, 3]}, 
              If[
               Inequality[
               DaedaelusMeshCore`Private`holdStart, LessEqual, 
                DaedaelusMeshCore`Private`t, Less, 
                DaedaelusMeshCore`Private`holdEnd], 
               If[
                Not[
                 DaedaelusMeshCore`Private`isHold[
                  DaedaelusMeshCore`Private`stateDecode[
                   Part[
                   DaedaelusMeshCore`Private`state, 
                    DaedaelusMeshCore`Private`pos]]]], 
                AddTo[
                 Part[
                 DaedaelusMeshCore`Private`state, 
                  DaedaelusMeshCore`Private`pos], 
                 DaedaelusMeshCore`Private`holdS]], 
               If[
                DaedaelusMeshCore`Private`isHold[
                 DaedaelusMeshCore`Private`stateDecode[
                  Part[
                  DaedaelusMeshCore`Private`state, 
                   DaedaelusMeshCore`Private`pos]]], 
                SubtractFrom[
                 Part[
                 DaedaelusMeshCore`Private`state, 
                  DaedaelusMeshCore`Private`pos], 
                 DaedaelusMeshCore`Private`holdS]]]], {
             DaedaelusMeshCore`Private`holdSpec, 
              DaedaelusMeshCore`Private`holds}]; 
           AppendTo[
            DaedaelusMeshCore`Private`output, 
             DaedaelusMeshCore`Private`state]; 
           DaedaelusMeshCore`Private`state = 
            CellularAutomaton[{DaedaelusMeshCore`Private`caRule, {}, 1}, 
              DaedaelusMeshCore`Private`state]; 
           Increment[DaedaelusMeshCore`Private`t]]; 
         DaedaelusMeshCore`Private`output], DaedaelusMeshCore`Private`runSim[
         Pattern[DaedaelusMeshCore`Private`width, 
          Blank[]], 
         Pattern[DaedaelusMeshCore`Private`steps, 
          Blank[]], 
         Pattern[DaedaelusMeshCore`Private`holds, 
          Blank[]], 
         Pattern[DaedaelusMeshCore`Private`recvErr, 
          Blank[]]] := 
       Module[{DaedaelusMeshCore`Private`t = 1, DaedaelusMeshCore`Private`st, 
          DaedaelusMeshCore`Private`out = {}, DaedaelusMeshCore`Private`col, 
          DaedaelusMeshCore`Private`t0, DaedaelusMeshCore`Private`t1}, 
         DaedaelusMeshCore`Private`st = 
          ConstantArray[0, DaedaelusMeshCore`Private`width + 2]; 
         Part[DaedaelusMeshCore`Private`st, 1] = 
          DaedaelusMeshCore`Private`wallS; 
         Part[DaedaelusMeshCore`Private`st, -1] = 
          DaedaelusMeshCore`Private`receiverS; 
         While[DaedaelusMeshCore`Private`t <= DaedaelusMeshCore`Private`steps,
            If[
             And[
              EvenQ[DaedaelusMeshCore`Private`t], 
              Not[
               DaedaelusMeshCore`Private`hasPacket[
                DaedaelusMeshCore`Private`stateDecode[
                 Part[DaedaelusMeshCore`Private`st, 2]]]]], 
             AddTo[
              Part[DaedaelusMeshCore`Private`st, 2], 
              DaedaelusMeshCore`Private`packetS]]; {
             DaedaelusMeshCore`Private`t0, DaedaelusMeshCore`Private`t1} = 
            DaedaelusMeshCore`Private`recvErr; If[
             Inequality[
             DaedaelusMeshCore`Private`t0, LessEqual, 
              DaedaelusMeshCore`Private`t, Less, 
              DaedaelusMeshCore`Private`t1], 
             Part[DaedaelusMeshCore`Private`st, -1] = 
             DaedaelusMeshCore`Private`errorS, 
             If[
             Part[DaedaelusMeshCore`Private`st, -1] === 
              DaedaelusMeshCore`Private`errorS, 
              Part[DaedaelusMeshCore`Private`st, -1] = 
              DaedaelusMeshCore`Private`receiverS]]; 
           Do[{DaedaelusMeshCore`Private`col, DaedaelusMeshCore`Private`t0, 
                DaedaelusMeshCore`Private`t1} = DaedaelusMeshCore`Private`h; 
             If[
               Inequality[
               DaedaelusMeshCore`Private`t0, LessEqual, 
                DaedaelusMeshCore`Private`t, Less, 
                DaedaelusMeshCore`Private`t1], 
               If[
                Not[
                 DaedaelusMeshCore`Private`isHold[
                  DaedaelusMeshCore`Private`stateDecode[
                   Part[
                   DaedaelusMeshCore`Private`st, 
                    DaedaelusMeshCore`Private`col]]]], 
                AddTo[
                 Part[
                 DaedaelusMeshCore`Private`st, DaedaelusMeshCore`Private`col],
                  DaedaelusMeshCore`Private`holdS]], 
               If[
                DaedaelusMeshCore`Private`isHold[
                 DaedaelusMeshCore`Private`stateDecode[
                  Part[
                  DaedaelusMeshCore`Private`st, 
                   DaedaelusMeshCore`Private`col]]], 
                SubtractFrom[
                 Part[
                 DaedaelusMeshCore`Private`st, DaedaelusMeshCore`Private`col],
                  DaedaelusMeshCore`Private`holdS]]], {
             DaedaelusMeshCore`Private`h, DaedaelusMeshCore`Private`holds}]; 
           AppendTo[
            DaedaelusMeshCore`Private`out, DaedaelusMeshCore`Private`st]; 
           DaedaelusMeshCore`Private`st = 
            CellularAutomaton[{DaedaelusMeshCore`Private`caRule, {}, 1}][
             DaedaelusMeshCore`Private`st]; 
           Increment[DaedaelusMeshCore`Private`t]]; 
         DaedaelusMeshCore`Private`out], DaedaelusMeshCore`Private`wallS = 64,
        DaedaelusMeshCore`Private`receiverOK = 128, 
       DaedaelusMeshCore`Private`hasPacket[
         Pattern[DaedaelusMeshCore`Private`s, 
          Blank[List]]] := Part[DaedaelusMeshCore`Private`s, 2] == 1, 
       DaedaelusMeshCore`Private`hasPacket[
         Pattern[DaedaelusMeshCore`Private`s, 
          Blank[]]] := Part[DaedaelusMeshCore`Private`s, 2] == 1, 
       DaedaelusMeshCore`Private`packetS = 16, 
       DaedaelusMeshCore`Private`receiverErr = 192, 
       DaedaelusMeshCore`Private`isHold[
         Pattern[DaedaelusMeshCore`Private`s, 
          Blank[List]]] := Part[DaedaelusMeshCore`Private`s, 4] == 1, 
       DaedaelusMeshCore`Private`isHold[
         Pattern[DaedaelusMeshCore`Private`s, 
          Blank[]]] := Part[DaedaelusMeshCore`Private`s, 4] == 1, 
       DaedaelusMeshCore`Private`holdS = 1, DaedaelusMeshCore`Private`caRule = 
       Function[{DaedaelusMeshCore`Private`nb}, 
         Module[{
          DaedaelusMeshCore`Private`l, DaedaelusMeshCore`Private`c, 
           DaedaelusMeshCore`Private`r, 
           DaedaelusMeshCore`Private`newState}, {
            DaedaelusMeshCore`Private`l, DaedaelusMeshCore`Private`c, 
             DaedaelusMeshCore`Private`r} = 
           Map[DaedaelusMeshCore`Private`stateDecode, 
             DaedaelusMeshCore`Private`nb]; If[
            DaedaelusMeshCore`Private`isSpecial[DaedaelusMeshCore`Private`c], 
            
            DaedaelusMeshCore`Private`stateEncode[
            DaedaelusMeshCore`Private`c], 
            DaedaelusMeshCore`Private`newState = DaedaelusMeshCore`Private`c; 
            DaedaelusMeshCore`Private`newState = 
             DaedaelusMeshCore`Private`handlePacket[
              DaedaelusMeshCore`Private`l, DaedaelusMeshCore`Private`c, 
               DaedaelusMeshCore`Private`r, 
               DaedaelusMeshCore`Private`newState]; 
            DaedaelusMeshCore`Private`newState = 
             DaedaelusMeshCore`Private`handleAck[
              DaedaelusMeshCore`Private`l, DaedaelusMeshCore`Private`c, 
               DaedaelusMeshCore`Private`r, 
               DaedaelusMeshCore`Private`newState]; 
            DaedaelusMeshCore`Private`stateEncode[
             DaedaelusMeshCore`Private`newState]]]], 
       DaedaelusMeshCore`Private`isSpecial[
         Pattern[DaedaelusMeshCore`Private`s, 
          Blank[List]]] := 
       Or[Part[DaedaelusMeshCore`Private`s, 1] >= 1, 
         Part[DaedaelusMeshCore`Private`s, 4] == 1], 
       DaedaelusMeshCore`Private`isSpecial[
         Pattern[DaedaelusMeshCore`Private`s, 
          Blank[]]] := 
       Or[Part[DaedaelusMeshCore`Private`s, 1] >= 1, 
         Part[DaedaelusMeshCore`Private`s, 4] == 1], 
       DaedaelusMeshCore`Private`stateEncode[
         Pattern[DaedaelusMeshCore`Private`s, 
          Blank[List]]] := FromDigits[DaedaelusMeshCore`Private`s, 4], 
       DaedaelusMeshCore`Private`handlePacket[
         Pattern[DaedaelusMeshCore`Private`left, 
          Blank[]], 
         Pattern[DaedaelusMeshCore`Private`centre, 
          Blank[]], 
         Pattern[DaedaelusMeshCore`Private`right, 
          Blank[]], 
         Pattern[DaedaelusMeshCore`Private`newState, 
          Blank[]]] := 
       Module[{DaedaelusMeshCore`Private`s = 
          DaedaelusMeshCore`Private`newState}, If[
           Or[
            DaedaelusMeshCore`Private`hasNegAck[
            DaedaelusMeshCore`Private`right], 
            DaedaelusMeshCore`Private`hasNegAck[
            DaedaelusMeshCore`Private`centre]], 
           Part[DaedaelusMeshCore`Private`s, 2] = 0; 
           Return[DaedaelusMeshCore`Private`s]]; If[
           And[
            DaedaelusMeshCore`Private`hasPacket[
            DaedaelusMeshCore`Private`left], 
            Not[
             DaedaelusMeshCore`Private`hasPacket[
             DaedaelusMeshCore`Private`centre]], 
            Not[
             DaedaelusMeshCore`Private`isHold[
             DaedaelusMeshCore`Private`centre]], 
            Not[
             DaedaelusMeshCore`Private`isHold[
             DaedaelusMeshCore`Private`left]]], 
           Part[DaedaelusMeshCore`Private`s, 2] = 1]; If[
           And[
            DaedaelusMeshCore`Private`hasPacket[
            DaedaelusMeshCore`Private`centre], 
            Not[
             DaedaelusMeshCore`Private`hasPacket[
             DaedaelusMeshCore`Private`right]], 
            Not[
             DaedaelusMeshCore`Private`isHold[
             DaedaelusMeshCore`Private`right]]], 
           Part[DaedaelusMeshCore`Private`s, 2] = 0]; 
         DaedaelusMeshCore`Private`s], DaedaelusMeshCore`Private`hasNegAck[
         Pattern[DaedaelusMeshCore`Private`s, 
          Blank[List]]] := Part[DaedaelusMeshCore`Private`s, 3] == 2, 
       DaedaelusMeshCore`Private`hasNegAck[
         Pattern[DaedaelusMeshCore`Private`s, 
          Blank[]]] := Part[DaedaelusMeshCore`Private`s, 3] == 2, 
       DaedaelusMeshCore`Private`handleAck[
         Pattern[DaedaelusMeshCore`Private`left, 
          Blank[]], 
         Pattern[DaedaelusMeshCore`Private`centre, 
          Blank[]], 
         Pattern[DaedaelusMeshCore`Private`right, 
          Blank[]], 
         Pattern[DaedaelusMeshCore`Private`newState, 
          Blank[]]] := 
       Module[{DaedaelusMeshCore`Private`s = 
          DaedaelusMeshCore`Private`newState}, If[
           And[
            DaedaelusMeshCore`Private`hasAck[DaedaelusMeshCore`Private`right], 
            Not[
             DaedaelusMeshCore`Private`hasAck[
             DaedaelusMeshCore`Private`centre]], 
            Not[
             DaedaelusMeshCore`Private`isHold[
             DaedaelusMeshCore`Private`right]], 
            Not[
             DaedaelusMeshCore`Private`isHold[
             DaedaelusMeshCore`Private`centre]]], 
           Part[DaedaelusMeshCore`Private`s, 3] = 
            Part[DaedaelusMeshCore`Private`right, 3]; If[
             And[
              DaedaelusMeshCore`Private`hasPacket[
              DaedaelusMeshCore`Private`s], 
              DaedaelusMeshCore`Private`hasNegAck[
              DaedaelusMeshCore`Private`right]], 
             Part[DaedaelusMeshCore`Private`s, 2] = 0]; Null]; If[
           And[
            DaedaelusMeshCore`Private`hasAck[
            DaedaelusMeshCore`Private`centre], 
            Not[
             DaedaelusMeshCore`Private`hasAck[
             DaedaelusMeshCore`Private`left]], 
            Not[
             DaedaelusMeshCore`Private`isHold[
             DaedaelusMeshCore`Private`left]]], 
           Part[DaedaelusMeshCore`Private`s, 3] = 0]; If[
           And[
            DaedaelusMeshCore`Private`isReceiver[
            DaedaelusMeshCore`Private`right], 
            DaedaelusMeshCore`Private`hasPacket[
            DaedaelusMeshCore`Private`centre]], 
           Part[DaedaelusMeshCore`Private`s, 3] = 
           If[Part[DaedaelusMeshCore`Private`right, 1] == 2, 1, 2]]; 
         DaedaelusMeshCore`Private`s], DaedaelusMeshCore`Private`hasAck[
         Pattern[DaedaelusMeshCore`Private`s, 
          Blank[List]]] := Part[DaedaelusMeshCore`Private`s, 3] >= 1, 
       DaedaelusMeshCore`Private`hasAck[
         Pattern[DaedaelusMeshCore`Private`s, 
          Blank[]]] := Part[DaedaelusMeshCore`Private`s, 3] >= 1, 
       DaedaelusMeshCore`Private`isReceiver[
         Pattern[DaedaelusMeshCore`Private`s, 
          Blank[List]]] := 
       Or[Part[DaedaelusMeshCore`Private`s, 1] == 2, 
         Part[DaedaelusMeshCore`Private`s, 1] == 3], 
       DaedaelusMeshCore`Private`isReceiver[
         Pattern[DaedaelusMeshCore`Private`s, 
          Blank[]]] := 
       Or[Part[DaedaelusMeshCore`Private`s, 1] == 2, 
         Part[DaedaelusMeshCore`Private`s, 1] == 3], 
       DaedaelusMeshCore`Private`receiverS = 128, 
       DaedaelusMeshCore`Private`errorS = 192}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.96289771165311*^9, 3.962897858459638*^9},
 CellLabel->
  "Out[5719]=",ExpressionUUID->"f541c4e9-de6e-4892-8a9a-234169d12145"]
}, Open  ]]
}, Open  ]],

Cell["\<\
Kirchhoff\[CloseCurlyQuote]s Matrix-Tree Theorem: The Algebraic Key to \
Network Topology\
\>", "Subtitle",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898307534945*^9}, {
   3.962898368042245*^9, 3.962898369635974*^9}, {3.962898493181312*^9, 
   3.9628984941794252`*^9}, {3.9628987079145727`*^9, 3.962898708877008*^9}, {
   3.962898758976321*^9, 3.962898759719747*^9}, {3.96289891712922*^9, 
   3.96289891771443*^9}, {3.962898961511298*^9, 3.962898962156911*^9}},
 FormatType->"TextForm",
 FontSize->18,
 Background->None,ExpressionUUID->"d19896db-f3ef-47d5-b85c-88f2b90eadfb"],

Cell[CellGroupData[{

Cell[TextData[{
 "Calculating the number of spanning trees by brute-force enumeration is \
computationally infeasible for all but the smallest graphs. Fortunately, a \
powerful result from algebraic graph theory, known as the Matrix-Tree \
Theorem, provides an elegant and efficient method for this calculation. First \
developed by Gustav Kirchhoff in 1847 in his study of electrical circuits, \
the theorem establishes a deep connection between a graph\[CloseCurlyQuote]s \
topological structure and the properties of a matrix derived from it. \
\[NonBreakingSpace] \n\nThe theorem states that the number of spanning trees \
in a connected, undirected graph is equal to the value of any cofactor of the \
graph\[CloseCurlyQuote]s Laplacian matrix. The Laplacian matrix, ",
 StyleBox["L",
  FontSlant->"Italic"],
 ", is a specific mathematical representation of the graph. It is defined as \
the difference between the degree matrix, ",
 StyleBox["D",
  FontSlant->"Italic"],
 ", and the adjacency matrix, ",
 StyleBox["A: L=D\[Minus]A. ",
  FontSlant->"Italic"],
 "\[NonBreakingSpace] "
}], "Chapter",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898338257278*^9}, {
   3.962898381402219*^9, 3.96289842166496*^9}, {3.96289849829926*^9, 
   3.962898570547124*^9}, {3.962898605101194*^9, 3.9628986082485447`*^9}, {
   3.962898718588675*^9, 3.962898842457036*^9}, {3.96289889781201*^9, 
   3.9628989798655977`*^9}, {3.962899016408059*^9, 3.962899016568543*^9}},
 FormatType->"TextForm",
 FontSize->14,
 Background->None,ExpressionUUID->"368bde94-5457-458b-bf0f-31d83e1b3632"],

Cell[TextData[{
 "The ",
 StyleBox["degree matrix",
  FontWeight->"Bold"],
 " ",
 StyleBox["D",
  FontSlant->"Italic"],
 " is a diagonal matrix where the entry ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["D", "ii"], TraditionalForm]],
  FormatType->TraditionalForm,
  FontSlant->"Italic",ExpressionUUID->
  "c4a81e58-8901-4d12-9f9b-d211698332e0"],
 StyleBox[" ",
  FontSlant->"Italic"],
 "is the degree of vertex ",
 StyleBox["i",
  FontSlant->"Italic"],
 " (i.e., the number of edges connected to it)."
}], "Item",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898338257278*^9}, {
   3.962898381402219*^9, 3.96289842166496*^9}, {3.96289849829926*^9, 
   3.962898570547124*^9}, {3.962898605101194*^9, 3.9628986082485447`*^9}, {
   3.962898718588675*^9, 3.962898842457036*^9}, {3.96289889781201*^9, 
   3.9628989798655977`*^9}, {3.962899016408059*^9, 3.962899047078679*^9}, {
   3.9628991286628942`*^9, 3.962899153911305*^9}},
 FormatType->"TextForm",
 FontSize->14,
 Background->None,ExpressionUUID->"6726d0b9-dcb2-49b7-8fcc-58e0df425591"],

Cell[TextData[{
 "The ",
 StyleBox["adjacency matrix",
  FontWeight->"Bold"],
 " ",
 StyleBox["A",
  FontSlant->"Italic"],
 " is a matrix where the entry ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["A", "ij"], TraditionalForm]],
  FormatType->TraditionalForm,
  FontSlant->"Italic",ExpressionUUID->
  "a99c5ea2-2cf6-4a02-aff6-3b4b87794f22"],
 " is 1 if an edge exists between vertex ",
 StyleBox["i",
  FontSlant->"Italic"],
 " and vertex ",
 StyleBox["j",
  FontSlant->"Italic"],
 ", and 0 otherwise."
}], "Item",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898338257278*^9}, {
   3.962898381402219*^9, 3.96289842166496*^9}, {3.96289849829926*^9, 
   3.962898570547124*^9}, {3.962898605101194*^9, 3.9628986082485447`*^9}, {
   3.962898718588675*^9, 3.962898842457036*^9}, {3.96289889781201*^9, 
   3.9628989798655977`*^9}, {3.962899016408059*^9, 3.962899047078679*^9}, {
   3.9628991286628942`*^9, 3.9628991797956038`*^9}},
 FormatType->"TextForm",
 FontSize->14,
 Background->None,ExpressionUUID->"9e6981d0-dbea-4381-90d3-d67318caebb8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "The resulting Laplacian matrix ",
 StyleBox["L",
  FontSlant->"Italic"],
 " has diagonal entries ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["L", "ii"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "d06e5347-956f-4067-bf63-5e2c1ca4c3a4"],
 " equal to the degree of vertex ",
 StyleBox["i",
  FontSlant->"Italic"],
 ", and off-diagonal entries ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["L", "ij"], TraditionalForm]],
  FormatType->TraditionalForm,
  FontSlant->"Italic",ExpressionUUID->
  "229cea84-afef-4850-9064-17ff92cc513f"],
 " equal to -1 if an edge connects vertices ",
 StyleBox["i",
  FontSlant->"Italic"],
 " and ",
 StyleBox["j",
  FontSlant->"Italic"],
 ", and 0 otherwise. To find the number of spanning trees, one can remove any \
single row and any single column from ",
 StyleBox["L",
  FontSlant->"Italic"],
 " to create a smaller submatrix, and then calculate the determinant of that \
submatrix. The absolute value of this determinant is the number of spanning \
trees. The `MatrixTreeCount` function used in the simulation is a direct \
computational implementation of this theorem, providing a theoretically sound \
method for quantifying the path diversity of the two network fabrics."
}], "Chapter",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898338257278*^9}, {
   3.962898381402219*^9, 3.96289842166496*^9}, {3.96289849829926*^9, 
   3.962898570547124*^9}, {3.962898605101194*^9, 3.9628986082485447`*^9}, {
   3.962898718588675*^9, 3.962898842457036*^9}, {3.96289889781201*^9, 
   3.9628989798655977`*^9}, {3.962899016408059*^9, 3.962899016568543*^9}, {
   3.96289921107825*^9, 3.962899306587953*^9}},
 FormatType->"TextForm",
 FontSize->14,
 Background->None,ExpressionUUID->"4d18d7a7-7c34-4191-b958-7348f512f535"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"states", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<L0\>\"", ",", "\"\<L1\>\""}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"transitionRules", "=", 
   RowBox[{"Association", "[", 
    RowBox[{
     RowBox[{"\"\<L0\>\"", "\[Rule]", "\"\<L1\>\""}], ",", 
     RowBox[{"\"\<L1\>\"", "\[Rule]", "\"\<L0\>\""}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"createFSM", "[", "]"}], ":=", 
   RowBox[{"Association", "[", 
    RowBox[{
     RowBox[{"\"\<Inbound\>\"", "\[Rule]", "None"}], ",", 
     RowBox[{"\"\<Outbound\>\"", "\[Rule]", "None"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"stepFSM", "[", "fsm_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"f", "=", "fsm"}], "}"}], ",", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", "\"\<Inbound\>\"", "]"}], "=!=", "None"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"f", "[", "\"\<Outbound\>\"", "]"}], "=", 
          RowBox[{"transitionRules", "[", 
           RowBox[{"f", "[", "\"\<Inbound\>\"", "]"}], "]"}]}], ";", 
         RowBox[{
          RowBox[{"f", "[", "\"\<Inbound\>\"", "]"}], "=", "None"}], ";"}]}], 
       "]"}], ";", "f"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"systemFSMStates", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<A_in\>\"", ",", "\"\<A_c\>\"", ",", "\"\<B_in\>\"", ",", 
     "\"\<B_c\>\""}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"systemFSMRules", "=", 
   RowBox[{"Association", "[", 
    RowBox[{
     RowBox[{"\"\<A_in\>\"", "\[Rule]", "\"\<A_c\>\""}], ",", 
     RowBox[{"\"\<A_c\>\"", "\[Rule]", "\"\<B_in\>\""}], ",", 
     RowBox[{"\"\<B_in\>\"", "\[Rule]", "\"\<B_c\>\""}], ",", 
     RowBox[{"\"\<B_c\>\"", "\[Rule]", "\"\<A_in\>\""}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"stepSystem", "[", 
    RowBox[{"{", 
     RowBox[{"fsmA_", ",", "fsmB_", ",", "systemState_"}], "}"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"nextA", "=", "fsmA"}], ",", 
       RowBox[{"nextB", "=", "fsmB"}], ",", "nextState"}], "}"}], ",", 
     RowBox[{
      RowBox[{"Switch", "[", 
       RowBox[{"systemState", ",", "\"\<A_in\>\"", ",", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"nextA", "[", "\"\<Inbound\>\"", "]"}], "===", "None"}], 
           ",", 
           RowBox[{
            RowBox[{"nextA", "[", "\"\<Inbound\>\"", "]"}], "=", 
            "\"\<L0\>\""}]}], "]"}], ";", 
         RowBox[{"nextA", "=", 
          RowBox[{"stepFSM", "[", "nextA", "]"}]}], ";"}], ",", "\"\<A_c\>\"",
         ",", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"nextA", "[", "\"\<Outbound\>\"", "]"}], "=!=", "None"}], 
           ",", 
           RowBox[{
            RowBox[{
             RowBox[{"nextB", "[", "\"\<Inbound\>\"", "]"}], "=", 
             RowBox[{"nextA", "[", "\"\<Outbound\>\"", "]"}]}], ";", 
            RowBox[{
             RowBox[{"nextA", "[", "\"\<Outbound\>\"", "]"}], "=", "None"}], 
            ";"}]}], "]"}], ";"}], ",", "\"\<B_in\>\"", ",", 
        RowBox[{
         RowBox[{"nextB", "=", 
          RowBox[{"stepFSM", "[", "nextB", "]"}]}], ";"}], ",", "\"\<B_c\>\"",
         ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"nextB", "[", "\"\<Outbound\>\"", "]"}], "=!=", "None"}], 
          ",", 
          RowBox[{
           RowBox[{
            RowBox[{"nextA", "[", "\"\<Inbound\>\"", "]"}], "=", 
            RowBox[{"nextB", "[", "\"\<Outbound\>\"", "]"}]}], ";", 
           RowBox[{
            RowBox[{"nextB", "[", "\"\<Outbound\>\"", "]"}], "=", "None"}], 
           ";"}]}], "]"}]}], "]"}], ";", 
      RowBox[{"nextState", "=", 
       RowBox[{"systemFSMRules", "[", "systemState", "]"}]}], ";", 
      RowBox[{"{", 
       RowBox[{"nextA", ",", "nextB", ",", "nextState"}], "}"}]}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"renderSystem", "[", 
    RowBox[{"{", 
     RowBox[{"fsmA_", ",", "fsmB_", ",", "systemState_"}], "}"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"gfx", "=", 
       RowBox[{"{", "}"}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"AppendTo", "[", 
       RowBox[{"gfx", ",", 
        RowBox[{"{", 
         RowBox[{"LightGray", ",", 
          RowBox[{"EdgeForm", "[", "Black", "]"}], ",", 
          RowBox[{"Rectangle", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0", ",", "0"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "2"}], "}"}]}], "]"}], ",", 
          RowBox[{"Rectangle", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"2", ",", "0"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"3", ",", "2"}], "}"}]}], "]"}]}], "}"}]}], "]"}], ";", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"gfx", ",", 
        RowBox[{"{", 
         RowBox[{"Black", ",", 
          RowBox[{"Arrow", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"1", ",", "0.5"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"2", ",", "0.5"}], "}"}]}], "}"}], "]"}], ",", 
          RowBox[{"Arrow", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"2", ",", "1.5"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "1.5"}], "}"}]}], "}"}], "]"}]}], "}"}]}], 
       "]"}], ";", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"token", "=", 
          RowBox[{"fsmA", "[", "\"\<Inbound\>\"", "]"}]}], "}"}], ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"token", "=!=", "None"}], ",", 
          RowBox[{
           RowBox[{"AppendTo", "[", 
            RowBox[{"gfx", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"token", "\[Equal]", "\"\<L0\>\""}], ",", "Red", ",",
                  "Blue"}], "]"}], ",", 
               RowBox[{"Disk", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"0.5", ",", "1.5"}], "}"}], ",", "0.1"}], "]"}]}], 
              "}"}]}], "]"}], ";"}]}], "]"}]}], "]"}], ";", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"token", "=", 
          RowBox[{"fsmA", "[", "\"\<Outbound\>\"", "]"}]}], "}"}], ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"token", "=!=", "None"}], ",", 
          RowBox[{
           RowBox[{"AppendTo", "[", 
            RowBox[{"gfx", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"token", "\[Equal]", "\"\<L0\>\""}], ",", "Red", ",",
                  "Blue"}], "]"}], ",", 
               RowBox[{"Disk", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"0.5", ",", "0.5"}], "}"}], ",", "0.1"}], "]"}]}], 
              "}"}]}], "]"}], ";"}]}], "]"}]}], "]"}], ";", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"token", "=", 
          RowBox[{"fsmB", "[", "\"\<Inbound\>\"", "]"}]}], "}"}], ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"token", "=!=", "None"}], ",", 
          RowBox[{
           RowBox[{"AppendTo", "[", 
            RowBox[{"gfx", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"token", "\[Equal]", "\"\<L0\>\""}], ",", "Red", ",",
                  "Blue"}], "]"}], ",", 
               RowBox[{"Disk", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"2.5", ",", "0.5"}], "}"}], ",", "0.1"}], "]"}]}], 
              "}"}]}], "]"}], ";"}]}], "]"}]}], "]"}], ";", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"token", "=", 
          RowBox[{"fsmB", "[", "\"\<Outbound\>\"", "]"}]}], "}"}], ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"token", "=!=", "None"}], ",", 
          RowBox[{
           RowBox[{"AppendTo", "[", 
            RowBox[{"gfx", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"token", "\[Equal]", "\"\<L0\>\""}], ",", "Red", ",",
                  "Blue"}], "]"}], ",", 
               RowBox[{"Disk", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"2.5", ",", "1.5"}], "}"}], ",", "0.1"}], "]"}]}], 
              "}"}]}], "]"}], ";"}]}], "]"}]}], "]"}], ";", 
      RowBox[{"Graphics", "[", 
       RowBox[{"gfx", ",", 
        RowBox[{"ImageSize", "\[Rule]", "200"}]}], "]"}]}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"fsmA", "=", 
   RowBox[{"createFSM", "[", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"fsmB", "=", 
   RowBox[{"createFSM", "[", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"initialState", "=", "\"\<A_in\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{"evolution", "=", 
   RowBox[{"NestList", "[", 
    RowBox[{"stepSystem", ",", 
     RowBox[{"{", 
      RowBox[{"fsmA", ",", "fsmB", ",", "initialState"}], "}"}], ",", "5"}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{"ListAnimate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"renderSystem", "[", "#1", "]"}], "&"}], ")"}], "/@", 
    "evolution"}], ",", 
   RowBox[{"AnimationRunning", "\[Rule]", "False"}]}], "]"}]}], "Code",
 CellChangeTimes->{{3.9628977539416237`*^9, 3.962897753947918*^9}, 
   3.962897855323957*^9},
 CellLabel->
  "In[5679]:=",ExpressionUUID->"c7d6fc34-80e8-49d2-a394-cb648bebaf48"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{DaedaelusMeshCore`Private`i602$$ = 1, Typeset`show$$ = 
    True, Typeset`bookmarkList$$ = {
    "\"min\"" :> {DaedaelusMeshCore`Private`i602$$ = 1}, 
     "\"max\"" :> {DaedaelusMeshCore`Private`i602$$ = 6}}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[DaedaelusMeshCore`Private`i602$$], 1, ""}, 1, 6, 1, ControlType -> 
      Animator}}, Typeset`size$$ = Automatic, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = True}, 
    PaneBox[
     PanelBox[GridBox[{
        {
         ItemBox[
          ItemBox[
           TagBox[
            StyleBox[GridBox[{
               {"\<\"\"\>", 
                
                AnimatorBox[Dynamic[DaedaelusMeshCore`Private`i602$$], {1, 6, 
                 1},
                 AnimationRate->Automatic,
                 AnimationRunTime->0.,
                 AnimationRunning->False,
                 
                 AppearanceElements->{
                  "ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
                   "DirectionButton"},
                 AutoAction->False,
                 DisplayAllSteps->True]}
              },
              AutoDelete->False,
              
              GridBoxAlignment->{
               "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "ListAnimateLabel",
             StripOnInput->False],
            {"ControlArea", Top}],
           Alignment->{Automatic, Inherited},
           StripOnInput->False],
          Background->None,
          StripOnInput->False]},
        {
         ItemBox[
          TagBox[
           StyleBox[
            PaneBox[
             TagBox[
              PaneSelectorBox[{1->
               GraphicsBox[{
                 {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
                  RectangleBox[{0, 0}, {1, 2}], RectangleBox[{2, 0}, {3, 2}]}, 
                 {GrayLevel[0], ArrowBox[{{1, 0.5}, {2, 0.5}}], 
                  ArrowBox[{{2, 1.5}, {1, 1.5}}]}},
                ImageSize->200], 2->
               GraphicsBox[{
                 {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
                  RectangleBox[{0, 0}, {1, 2}], RectangleBox[{2, 0}, {3, 2}]}, 
                 {GrayLevel[0], ArrowBox[{{1, 0.5}, {2, 0.5}}], 
                  ArrowBox[{{2, 1.5}, {1, 1.5}}]}, 
                 {RGBColor[0, 0, 1], DiskBox[{0.5, 0.5}, 0.1]}},
                ImageSize->200], 3->
               GraphicsBox[{
                 {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
                  RectangleBox[{0, 0}, {1, 2}], RectangleBox[{2, 0}, {3, 2}]}, 
                 {GrayLevel[0], ArrowBox[{{1, 0.5}, {2, 0.5}}], 
                  ArrowBox[{{2, 1.5}, {1, 1.5}}]}, 
                 {RGBColor[0, 0, 1], DiskBox[{2.5, 0.5}, 0.1]}},
                ImageSize->200], 4->
               GraphicsBox[{
                 {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
                  RectangleBox[{0, 0}, {1, 2}], RectangleBox[{2, 0}, {3, 2}]}, 
                 {GrayLevel[0], ArrowBox[{{1, 0.5}, {2, 0.5}}], 
                  ArrowBox[{{2, 1.5}, {1, 1.5}}]}, 
                 {RGBColor[1, 0, 0], DiskBox[{2.5, 1.5}, 0.1]}},
                ImageSize->200], 5->
               GraphicsBox[{
                 {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
                  RectangleBox[{0, 0}, {1, 2}], RectangleBox[{2, 0}, {3, 2}]}, 
                 {GrayLevel[0], ArrowBox[{{1, 0.5}, {2, 0.5}}], 
                  ArrowBox[{{2, 1.5}, {1, 1.5}}]}, 
                 {RGBColor[1, 0, 0], DiskBox[{0.5, 1.5}, 0.1]}},
                ImageSize->200], 6->
               GraphicsBox[{
                 {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
                  RectangleBox[{0, 0}, {1, 2}], RectangleBox[{2, 0}, {3, 2}]}, 
                 {GrayLevel[0], ArrowBox[{{1, 0.5}, {2, 0.5}}], 
                  ArrowBox[{{2, 1.5}, {1, 1.5}}]}, 
                 {RGBColor[0, 0, 1], DiskBox[{0.5, 0.5}, 0.1]}},
                ImageSize->200]}, Dynamic[DaedaelusMeshCore`Private`i602$$],
               Alignment->Automatic,
               BaseStyle->"ListAnimateCore",
               ImageSize->All,
               TransitionDirection->Horizontal,
               TransitionDuration->0.5,
               TransitionEffect->Automatic],
              Identity,
              Editable->True,
              Selectable->True],
             ImageMargins->10],
            Deployed->False,
            StripOnInput->False,
            ScriptLevel->0,
            GraphicsBoxOptions->{PreserveImageOptions->True},
            Graphics3DBoxOptions->{PreserveImageOptions->True}],
           Identity,
           Editable->False,
           Selectable->False],
          Alignment->{Left, Center},
          Background->GrayLevel[1],
          Frame->1,
          FrameStyle->GrayLevel[0, 0.2],
          ItemSize->Automatic,
          StripOnInput->False]}
       },
       AutoDelete->False,
       GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
       GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
       
       GridBoxSpacings->{"Columns" -> {
           Offset[0.7], {
            Offset[0.5599999999999999]}, 
           Offset[0.7]}, "Rows" -> {
           Offset[0.4], {
            Offset[0.8]}, 
           Offset[0.4]}}],
      DefaultBaseStyle->{},
      FrameMargins->{{5, 5}, {5, 5}}],
     BaselinePosition->Automatic,
     ImageMargins->0],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "ListAnimate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.962897754553296*^9, 3.962897855581889*^9},
 CellLabel->
  "Out[5691]=",ExpressionUUID->"7d0d18ca-d8cb-4f5d-aeae-24e0bf704781"]
}, Open  ]]
}, Open  ]],

Cell["The Chasm in Path Diversity: Interpreting the Simulation", "Subtitle",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898307534945*^9}, {
   3.962898368042245*^9, 3.962898369635974*^9}, {3.962898493181312*^9, 
   3.9628984941794252`*^9}, {3.9628987079145727`*^9, 3.962898708877008*^9}, {
   3.962898758976321*^9, 3.962898759719747*^9}, {3.96289891712922*^9, 
   3.96289891771443*^9}, {3.962898961511298*^9, 3.962898962156911*^9}, {
   3.9628993202881403`*^9, 3.9628993208552933`*^9}},
 FormatType->"TextForm",
 FontSize->18,
 Background->None,ExpressionUUID->"eb4d267f-f013-4cf1-b551-ca617b94b02b"],

Cell[CellGroupData[{

Cell["\<\
The simulation results for path diversity reveal a difference not of degree, \
but of kind. The `closSpanningTrees` value is a modest, computable number, \
while the `daedaelusSpanningTrees` value is astronomically large, reflecting \
the fundamentally different structural constraints of the two topologies.

For the Clos network, the number of possible spanning trees is severely \
limited by its rigid, hierarchical structure. Any valid spanning tree must \
adhere to a strict pattern: each server node must connect to its parent leaf \
switch, and the leaf switches must then be connected together in a tree \
structure via the spine switches. The limited number of spine switches and \
the rule that leaves can only connect to spines act as a combinatorial \
bottleneck, drastically constraining the number of ways a valid, \
all-encompassing tree can be formed.

Conversely, the mesh network, with its dense, regular, and non-hierarchical \
grid of connections, offers an exponential number of ways to construct a \
spanning tree. At nearly every node, there are multiple choices for which \
edges to include in the tree, and each choice branches into a new family of \
possibilities. This immense combinatorial freedom results in a spanning tree \
count that is many orders of magnitude greater than that of the Clos network \
of a similar size.

This quantitative chasm is the mathematical manifestation of the \
architectural philosophies discussed earlier. The Clos architecture is \
designed to provide a small number of well-defined, predictable, high-speed \
paths. Its resilience and load-balancing capabilities are based on protocols \
like ECMP, which intelligently distribute traffic across this limited set of \
equal-cost routes. While effective for its intended purpose, this approach is \
not highly adaptive. The mesh architecture, in contrast, provides a vast sea \
of potential paths. This enormous underlying path diversity is the essential \
prerequisite for more sophisticated and adaptive routing schemes. Research \
into related topologies, such as the flattened butterfly, has shown that this \
diversity allows for non-minimal adaptive routing, which can gracefully \
handle adversarial traffic patterns that would cripple a network with less \
diverse routing options. \[NonBreakingSpace] 

This directly supports the Daedaelus vision of an \
\[OpenCurlyDoubleQuote]unbreakable network\[CloseCurlyDoubleQuote]. Their \
goal of being able to locally and instantly re-route traffic around a failed \
link is predicated on the existence of this rich local connectivity. When a \
link fails in a mesh, there are numerous alternative paths immediately \
available at the point of failure, allowing for a local repair without \
requiring a global network re-convergence event. Therefore, the spanning tree \
count should be seen as a powerful leading indicator of a network\
\[CloseCurlyQuote]s potential for dynamic, adaptive behavior. While the Clos \
network is highly optimized for performance under benign conditions, the mesh \
architecture is structurally far superior for maintaining connectivity and \
performance in the face of unexpected failures and malicious traffic \
patterns. \[NonBreakingSpace] \
\>", "Chapter",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898338257278*^9}, {
   3.962898381402219*^9, 3.96289842166496*^9}, {3.96289849829926*^9, 
   3.962898570547124*^9}, {3.962898605101194*^9, 3.9628986082485447`*^9}, {
   3.962898718588675*^9, 3.962898842457036*^9}, {3.96289889781201*^9, 
   3.9628989798655977`*^9}, {3.962899016408059*^9, 3.962899016568543*^9}, {
   3.96289921107825*^9, 3.962899364566122*^9}},
 FormatType->"TextForm",
 FontSize->14,
 Background->None,ExpressionUUID->"8c963e3b-8f84-4f0d-9377-f9324451706e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"stateEncode", "[", "s_List", "]"}], ":=", 
   RowBox[{"FromDigits", "[", 
    RowBox[{"s", ",", "4"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"stateDecode", "[", "n_Integer", "]"}], ":=", 
   RowBox[{"IntegerDigits", "[", 
    RowBox[{"n", ",", "4", ",", "4"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"isWall", "[", "s_List", "]"}], ":=", 
   RowBox[{
    RowBox[{"s", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
    "\[Equal]", "1"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"isReceiver", "[", "s_List", "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"s", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
     "\[Equal]", "2"}], "||", 
    RowBox[{
     RowBox[{"s", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
     "\[Equal]", "3"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"hasPacket", "[", "s_List", "]"}], ":=", 
   RowBox[{
    RowBox[{"s", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
    "\[Equal]", "1"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"hasPosAck", "[", "s_List", "]"}], ":=", 
   RowBox[{
    RowBox[{"s", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
    "\[Equal]", "1"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"hasNegAck", "[", "s_List", "]"}], ":=", 
   RowBox[{
    RowBox[{"s", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
    "\[Equal]", "2"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"hasAck", "[", "s_List", "]"}], ":=", 
   RowBox[{
    RowBox[{"s", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
    "\[GreaterEqual]", "1"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"isHold", "[", "s_List", "]"}], ":=", 
   RowBox[{
    RowBox[{"s", "\[LeftDoubleBracket]", "4", "\[RightDoubleBracket]"}], 
    "\[Equal]", "1"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"packetGlyph", "[", "pos_", "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Opacity", "[", ".9", "]"}], ",", 
     RowBox[{"RGBColor", "[", 
      RowBox[{".2", ",", ".4", ",", ".8"}], "]"}], ",", 
     RowBox[{"Rotate", "[", 
      RowBox[{
       RowBox[{"Rectangle", "[", 
        RowBox[{
         RowBox[{"pos", "+", 
          RowBox[{"{", 
           RowBox[{".1", ",", ".3"}], "}"}]}], ",", 
         RowBox[{"pos", "+", 
          RowBox[{"{", 
           RowBox[{".9", ",", ".7"}], "}"}]}]}], "]"}], ",", 
       RowBox[{
        RowBox[{"-", "45"}], " ", "\[Degree]"}], ",", 
       RowBox[{"pos", "+", 
        RowBox[{"{", 
         RowBox[{".5", ",", ".5"}], "}"}]}]}], "]"}]}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ackGlyph", "[", "pos_", "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Opacity", "[", ".9", "]"}], ",", "Orange", ",", 
     RowBox[{"Rotate", "[", 
      RowBox[{
       RowBox[{"Rectangle", "[", 
        RowBox[{
         RowBox[{"pos", "+", 
          RowBox[{"{", 
           RowBox[{".1", ",", ".3"}], "}"}]}], ",", 
         RowBox[{"pos", "+", 
          RowBox[{"{", 
           RowBox[{".9", ",", ".7"}], "}"}]}]}], "]"}], ",", 
       RowBox[{"45", " ", "\[Degree]"}], ",", 
       RowBox[{"pos", "+", 
        RowBox[{"{", 
         RowBox[{".5", ",", ".5"}], "}"}]}]}], "]"}]}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"nackGlyph", "[", "pos_", "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Opacity", "[", ".9", "]"}], ",", "Red", ",", 
     RowBox[{"Rotate", "[", 
      RowBox[{
       RowBox[{"Rectangle", "[", 
        RowBox[{
         RowBox[{"pos", "+", 
          RowBox[{"{", 
           RowBox[{".1", ",", ".3"}], "}"}]}], ",", 
         RowBox[{"pos", "+", 
          RowBox[{"{", 
           RowBox[{".9", ",", ".7"}], "}"}]}]}], "]"}], ",", 
       RowBox[{"45", " ", "\[Degree]"}], ",", 
       RowBox[{"pos", "+", 
        RowBox[{"{", 
         RowBox[{".5", ",", ".5"}], "}"}]}]}], "]"}]}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"wallGlyph", "[", "pos_", "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{"Black", ",", 
     RowBox[{"Rectangle", "[", "pos", "]"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"errGlyph", "[", "pos_", "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"RGBColor", "[", 
      RowBox[{".8", ",", "0", ",", "0"}], "]"}], ",", 
     RowBox[{"Rectangle", "[", "pos", "]"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"numberToGraphics", "[", 
    RowBox[{"num_", ",", "w_", ",", "h_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"state", "=", 
        RowBox[{"stateDecode", "[", "num", "]"}]}], ",", 
       RowBox[{"pos", "=", 
        RowBox[{"{", 
         RowBox[{"w", ",", 
          RowBox[{"-", "h"}]}], "}"}]}], ",", 
       RowBox[{"gfx", "=", 
        RowBox[{"{", "}"}]}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"Which", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
          "state", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
          "\[Equal]", "1"}], "||", 
         RowBox[{
          RowBox[{
          "state", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
          "\[Equal]", "2"}]}], ",", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"gfx", ",", 
          RowBox[{"wallGlyph", "[", "pos", "]"}]}], "]"}], ",", 
        RowBox[{
         RowBox[{
         "state", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         "\[Equal]", "3"}], ",", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"gfx", ",", 
          RowBox[{"errGlyph", "[", "pos", "]"}]}], "]"}]}], "]"}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
         "state", "\[LeftDoubleBracket]", "4", "\[RightDoubleBracket]"}], 
         "\[Equal]", "1"}], ",", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"gfx", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Opacity", "[", ".4", "]"}], ",", "Gray", ",", 
            RowBox[{"Rectangle", "[", "pos", "]"}]}], "}"}]}], "]"}]}], "]"}],
       ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
         "state", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
         "\[Equal]", "1"}], ",", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"gfx", ",", 
          RowBox[{"packetGlyph", "[", "pos", "]"}]}], "]"}]}], "]"}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
         "state", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
         "\[Equal]", "1"}], ",", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"gfx", ",", 
          RowBox[{"ackGlyph", "[", "pos", "]"}]}], "]"}]}], "]"}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
         "state", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
         "\[Equal]", "2"}], ",", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"gfx", ",", 
          RowBox[{"nackGlyph", "[", "pos", "]"}]}], "]"}]}], "]"}], ";", 
      RowBox[{"Flatten", "[", "gfx", "]"}]}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"OutputGraphic", "[", "arr_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"h", ",", "w"}], "}"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"h", ",", "w"}], "}"}], "=", 
       RowBox[{"Dimensions", "[", "arr", "]"}]}], ";", 
      RowBox[{"Graphics", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"EdgeForm", "[", 
             RowBox[{"GrayLevel", "[", ".9", "]"}], "]"}], ",", 
            RowBox[{"FaceForm", "[", "]"}], ",", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"Rectangle", "[", 
               RowBox[{"{", 
                RowBox[{"c", ",", 
                 RowBox[{"-", "r"}]}], "}"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"c", ",", "w"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"r", ",", "h"}], "}"}]}], "]"}]}], "}"}], ",", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"numberToGraphics", "[", 
             RowBox[{
              RowBox[{"arr", "\[LeftDoubleBracket]", 
               RowBox[{"r", ",", "c"}], "\[RightDoubleBracket]"}], ",", "c", 
              ",", "r"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"c", ",", "w"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"r", ",", "h"}], "}"}]}], "]"}]}], "}"}], ",", 
        RowBox[{"ImageSize", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"450", ",", "350"}], "}"}]}], ",", 
        RowBox[{"PlotRange", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"w", "+", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "h"}], ",", "1"}], "}"}]}], "}"}]}], ",", 
        RowBox[{"PlotRangePadding", "\[Rule]", ".2"}], ",", 
        RowBox[{"AspectRatio", "\[Rule]", "Automatic"}]}], "]"}]}]}], "]"}]}],
   ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"handlePacket", "[", 
    RowBox[{"left_", ",", "center_", ",", "right_", ",", "newState_"}], "]"}],
    ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"s", "=", "newState"}], "}"}], ",", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"hasNegAck", "[", "right", "]"}], "||", 
         RowBox[{"hasNegAck", "[", "center", "]"}]}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"s", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}],
           "=", "0"}], ";", 
         RowBox[{"Return", "[", "s", "]"}]}]}], "]"}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"hasPacket", "[", "left", "]"}], "&&", 
         RowBox[{"!", 
          RowBox[{"hasPacket", "[", "center", "]"}]}], "&&", 
         RowBox[{"!", 
          RowBox[{"isHold", "[", "center", "]"}]}], "&&", 
         RowBox[{"!", 
          RowBox[{"isHold", "[", "left", "]"}]}]}], ",", 
        RowBox[{
         RowBox[{"s", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
         "=", "1"}]}], "]"}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"hasPacket", "[", "center", "]"}], "&&", 
         RowBox[{"!", 
          RowBox[{"hasPacket", "[", "right", "]"}]}], "&&", 
         RowBox[{"!", 
          RowBox[{"isHold", "[", "right", "]"}]}]}], ",", 
        RowBox[{
         RowBox[{"s", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
         "=", "0"}]}], "]"}], ";", "s"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"handleAck", "[", 
    RowBox[{"left_", ",", "center_", ",", "right_", ",", "newState_"}], "]"}],
    ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"s", "=", "newState"}], "}"}], ",", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"hasAck", "[", "right", "]"}], "&&", 
         RowBox[{"!", 
          RowBox[{"hasAck", "[", "center", "]"}]}], "&&", 
         RowBox[{"!", 
          RowBox[{"isHold", "[", "right", "]"}]}], "&&", 
         RowBox[{"!", 
          RowBox[{"isHold", "[", "center", "]"}]}]}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"s", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}],
           "=", 
          RowBox[{
          "right", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], 
         ";", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"hasPacket", "[", "s", "]"}], "&&", 
            RowBox[{"hasNegAck", "[", "right", "]"}]}], ",", 
           RowBox[{
            RowBox[{
            "s", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "=", 
            "0"}]}], "]"}]}]}], "]"}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"hasAck", "[", "center", "]"}], "&&", 
         RowBox[{"!", 
          RowBox[{"hasAck", "[", "left", "]"}]}], "&&", 
         RowBox[{"!", 
          RowBox[{"isHold", "[", "left", "]"}]}]}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"s", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}],
           "=", "0"}], ";"}]}], "]"}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"isReceiver", "[", "right", "]"}], "&&", 
         RowBox[{"hasPacket", "[", "center", "]"}]}], ",", 
        RowBox[{
         RowBox[{"s", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
         "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
            "right", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
            "\[Equal]", "2"}], ",", "1", ",", "2"}], "]"}]}]}], "]"}], ";", 
      "s"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"caRule", "=", 
   RowBox[{"Function", "[", 
    RowBox[{
     RowBox[{"{", "nb", "}"}], ",", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"l", ",", "c", ",", "r", ",", "newState"}], "}"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"l", ",", "c", ",", "r"}], "}"}], "=", 
         RowBox[{"stateDecode", "/@", "nb"}]}], ";", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
            "c", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
            "\[GreaterEqual]", "1"}], "||", 
           RowBox[{
            RowBox[{
            "c", "\[LeftDoubleBracket]", "4", "\[RightDoubleBracket]"}], 
            "\[Equal]", "1"}]}], ",", 
          RowBox[{"stateEncode", "[", "c", "]"}], ",", 
          RowBox[{
           RowBox[{"newState", "=", "c"}], ";", 
           RowBox[{"newState", "=", 
            RowBox[{"handlePacket", "[", 
             RowBox[{"l", ",", "c", ",", "r", ",", "newState"}], "]"}]}], ";", 
           RowBox[{"newState", "=", 
            RowBox[{"handleAck", "[", 
             RowBox[{"l", ",", "c", ",", "r", ",", "newState"}], "]"}]}], ";", 
           RowBox[{"stateEncode", "[", "newState", "]"}]}]}], "]"}]}]}], 
      "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"wallS", "=", 
   RowBox[{"stateEncode", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"receiverS", "=", 
   RowBox[{"stateEncode", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "0", ",", "0", ",", "0"}], "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"errorS", "=", 
   RowBox[{"stateEncode", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "0", ",", "0", ",", "0"}], "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"holdS", "=", 
   RowBox[{"stateEncode", "[", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"packetS", "=", 
   RowBox[{"stateEncode", "[", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1", ",", "0", ",", "0"}], "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"runSim", "[", 
    RowBox[{"width_", ",", "steps_", ",", "holds_List", ",", "recvErr_List"}],
     "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"t", "=", "1"}], ",", 
       RowBox[{"state", "=", 
        RowBox[{"ConstantArray", "[", 
         RowBox[{"0", ",", 
          RowBox[{"width", "+", "2"}]}], "]"}]}], ",", 
       RowBox[{"output", "=", 
        RowBox[{"{", "}"}]}], ",", "hSpec"}], "}"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{
       "state", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "=", 
       "wallS"}], ";", 
      RowBox[{
       RowBox[{"state", "\[LeftDoubleBracket]", 
        RowBox[{"-", "1"}], "\[RightDoubleBracket]"}], "=", "receiverS"}], 
      ";", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{"t", "\[LessEqual]", "steps"}], ",", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"EvenQ", "[", "t", "]"}], "&&", 
            RowBox[{"!", 
             RowBox[{"hasPacket", "[", 
              RowBox[{"stateDecode", "[", 
               RowBox[{
               "state", "\[LeftDoubleBracket]", "2", 
                "\[RightDoubleBracket]"}], "]"}], "]"}]}]}], ",", 
           RowBox[{
            RowBox[{
            "state", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "+=",
             "packetS"}]}], "]"}], ";", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"t", "\[GreaterEqual]", 
             RowBox[{
             "recvErr", "\[LeftDoubleBracket]", "1", 
              "\[RightDoubleBracket]"}]}], "&&", 
            RowBox[{"t", "<", 
             RowBox[{
             "recvErr", "\[LeftDoubleBracket]", "2", 
              "\[RightDoubleBracket]"}]}]}], ",", 
           RowBox[{
            RowBox[{"state", "\[LeftDoubleBracket]", 
             RowBox[{"-", "1"}], "\[RightDoubleBracket]"}], "=", "errorS"}], 
           ",", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"state", "\[LeftDoubleBracket]", 
                RowBox[{"-", "1"}], "\[RightDoubleBracket]"}], "===", 
               "errorS"}], "&&", 
              RowBox[{"t", "\[Equal]", 
               RowBox[{
               "recvErr", "\[LeftDoubleBracket]", "2", 
                "\[RightDoubleBracket]"}]}]}], ",", 
             RowBox[{
              RowBox[{"state", "\[LeftDoubleBracket]", 
               RowBox[{"-", "1"}], "\[RightDoubleBracket]"}], "=", 
              "receiverS"}]}], "]"}]}], "]"}], ";", 
         RowBox[{"Do", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"hSpec", "=", "hold"}], ";", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"t", "\[GreaterEqual]", 
                RowBox[{
                "hSpec", "\[LeftDoubleBracket]", "2", 
                 "\[RightDoubleBracket]"}]}], "&&", 
               RowBox[{"t", "<", 
                RowBox[{
                "hSpec", "\[LeftDoubleBracket]", "3", 
                 "\[RightDoubleBracket]"}]}]}], ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"!", 
                 RowBox[{"isHold", "[", 
                  RowBox[{"stateDecode", "[", 
                   RowBox[{"state", "\[LeftDoubleBracket]", 
                    RowBox[{
                    "hSpec", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "\[RightDoubleBracket]"}], 
                   "]"}], "]"}]}], ",", 
                RowBox[{
                 RowBox[{"state", "\[LeftDoubleBracket]", 
                  RowBox[{
                  "hSpec", "\[LeftDoubleBracket]", "1", 
                   "\[RightDoubleBracket]"}], "\[RightDoubleBracket]"}], "+=",
                  "holdS"}]}], "]"}], ",", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"t", "\[Equal]", 
                  RowBox[{
                  "hSpec", "\[LeftDoubleBracket]", "3", 
                   "\[RightDoubleBracket]"}]}], "&&", 
                 RowBox[{"isHold", "[", 
                  RowBox[{"stateDecode", "[", 
                   RowBox[{"state", "\[LeftDoubleBracket]", 
                    RowBox[{
                    "hSpec", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], "\[RightDoubleBracket]"}], 
                   "]"}], "]"}]}], ",", 
                RowBox[{
                 RowBox[{"state", "\[LeftDoubleBracket]", 
                  RowBox[{
                  "hSpec", "\[LeftDoubleBracket]", "1", 
                   "\[RightDoubleBracket]"}], "\[RightDoubleBracket]"}], "-=",
                  "holdS"}]}], "]"}]}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"hold", ",", "holds"}], "}"}]}], "]"}], ";", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"output", ",", "state"}], "]"}], ";", 
         RowBox[{"state", "=", 
          RowBox[{
           RowBox[{"CellularAutomaton", "[", 
            RowBox[{"{", 
             RowBox[{"caRule", ",", 
              RowBox[{"{", "}"}], ",", "1"}], "}"}], "]"}], "[", "state", 
           "]"}]}], ";", 
         RowBox[{"t", "++"}]}]}], "]"}], ";", "output"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Column", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Style", "[", 
        RowBox[{
        "\"\<Daedalus Network Automaton\>\"", ",", "18", ",", "Bold"}], "]"}],
        ",", 
       RowBox[{"Style", "[", 
        RowBox[{
        "\"\<One-dimensional resilient link \[LongDash] local rules only\>\"",
          ",", "12", ",", "Gray"}], "]"}], ",", 
       RowBox[{"OutputGraphic", "[", 
        RowBox[{"runSim", "[", 
         RowBox[{"width", ",", "100", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"h1pos", ",", "h1start", ",", "h1end"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"h2pos", ",", "h2start", ",", "h2end"}], "}"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{"errStart", ",", "errEnd"}], "}"}]}], "]"}], "]"}]}], 
      "}"}], ",", 
     RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"width", ",", "25", ",", "\"\<Link Width\>\""}], "}"}], ",", 
     "10", ",", "40", ",", "1", ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
   "Delimiter", ",", 
   RowBox[{"Style", "[", 
    RowBox[{"\"\<Receiver Error (Neg-ACK burst)\>\"", ",", "Bold"}], "]"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"errStart", ",", "20", ",", "\"\<Error Start Time\>\""}], "}"}],
      ",", "1", ",", "100", ",", "1", ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"errEnd", ",", "30", ",", "\"\<Error End Time\>\""}], "}"}], 
     ",", 
     RowBox[{"Dynamic", "[", 
      RowBox[{"errStart", "+", "1"}], "]"}], ",", "100", ",", "1", ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
   "Delimiter", ",", 
   RowBox[{"Style", "[", 
    RowBox[{"\"\<Stalled Node 1\>\"", ",", "Bold"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"h1pos", ",", "5", ",", "\"\<Position\>\""}], "}"}], ",", "2", 
     ",", 
     RowBox[{"Dynamic", "[", "width", "]"}], ",", "1", ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"h1start", ",", "40", ",", "\"\<Start Time\>\""}], "}"}], ",", 
     "1", ",", "100", ",", "1", ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"h1end", ",", "60", ",", "\"\<End Time\>\""}], "}"}], ",", 
     RowBox[{"Dynamic", "[", 
      RowBox[{"h1start", "+", "1"}], "]"}], ",", "101", ",", "1", ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
   "Delimiter", ",", 
   RowBox[{"Style", "[", 
    RowBox[{"\"\<Stalled Node 2\>\"", ",", "Bold"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"h2pos", ",", "15", ",", "\"\<Position\>\""}], "}"}], ",", "2", 
     ",", 
     RowBox[{"Dynamic", "[", "width", "]"}], ",", "1", ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"h2start", ",", "65", ",", "\"\<Start Time\>\""}], "}"}], ",", 
     "1", ",", "100", ",", "1", ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"h2end", ",", "85", ",", "\"\<End Time\>\""}], "}"}], ",", 
     RowBox[{"Dynamic", "[", 
      RowBox[{"h2start", "+", "1"}], "]"}], ",", "101", ",", "1", ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"ControlPlacement", "\[Rule]", "Left"}], ",", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "]"}]}], "Code",
 CellChangeTimes->{{3.962897928825592*^9, 3.9628979288320704`*^9}, 
   3.9628980719636106`*^9},
 CellLabel->
  "In[5868]:=",ExpressionUUID->"5e915184-2940-47e2-868c-b41bd20c6cfd"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{DaedaelusMeshCore`Private`errEnd$$ = 30, 
    DaedaelusMeshCore`Private`errStart$$ = 20, 
    DaedaelusMeshCore`Private`h1end$$ = 60, 
    DaedaelusMeshCore`Private`h1pos$$ = 5, 
    DaedaelusMeshCore`Private`h1start$$ = 40, 
    DaedaelusMeshCore`Private`h2end$$ = 85, 
    DaedaelusMeshCore`Private`h2pos$$ = 15, 
    DaedaelusMeshCore`Private`h2start$$ = 65, 
    DaedaelusMeshCore`Private`width$$ = 25, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[DaedaelusMeshCore`Private`width$$], 25, "Link Width"}, 10, 40, 1, 
      ControlType -> Manipulator}, {
      Hold[
       Style["Receiver Error (Neg-ACK burst)", Bold]], 
      Manipulate`Dump`ThisIsNotAControl, ControlType -> None}, {{
       Hold[DaedaelusMeshCore`Private`errStart$$], 20, "Error Start Time"}, 1,
       100, 1, ControlType -> Manipulator}, {{
       Hold[DaedaelusMeshCore`Private`errEnd$$], 30, "Error End Time"}, 
      Dynamic[DaedaelusMeshCore`Private`errStart$$ + 1], 100, 1, ControlType -> 
      Manipulator}, {
      Hold[
       Style["Stalled Node 1", Bold]], Manipulate`Dump`ThisIsNotAControl, 
      ControlType -> None}, {{
       Hold[DaedaelusMeshCore`Private`h1pos$$], 5, "Position"}, 2, 
      Dynamic[DaedaelusMeshCore`Private`width$$], 1, ControlType -> 
      Manipulator}, {{
       Hold[DaedaelusMeshCore`Private`h1start$$], 40, "Start Time"}, 1, 100, 
      1, ControlType -> Manipulator}, {{
       Hold[DaedaelusMeshCore`Private`h1end$$], 60, "End Time"}, 
      Dynamic[DaedaelusMeshCore`Private`h1start$$ + 1], 101, 1, ControlType -> 
      Manipulator}, {
      Hold[
       Style["Stalled Node 2", Bold]], Manipulate`Dump`ThisIsNotAControl, 
      ControlType -> None}, {{
       Hold[DaedaelusMeshCore`Private`h2pos$$], 15, "Position"}, 2, 
      Dynamic[DaedaelusMeshCore`Private`width$$], 1, ControlType -> 
      Manipulator}, {{
       Hold[DaedaelusMeshCore`Private`h2start$$], 65, "Start Time"}, 1, 100, 
      1, ControlType -> Manipulator}, {{
       Hold[DaedaelusMeshCore`Private`h2end$$], 85, "End Time"}, 
      Dynamic[DaedaelusMeshCore`Private`h2start$$ + 1], 101, 1, ControlType -> 
      Manipulator}}, Typeset`size$$ = {
    563., {244.17974853515625`, 253.82025146484375`}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {
       DaedaelusMeshCore`Private`errEnd$$ = 30, 
        DaedaelusMeshCore`Private`errStart$$ = 20, 
        DaedaelusMeshCore`Private`h1end$$ = 60, 
        DaedaelusMeshCore`Private`h1pos$$ = 5, 
        DaedaelusMeshCore`Private`h1start$$ = 40, 
        DaedaelusMeshCore`Private`h2end$$ = 85, 
        DaedaelusMeshCore`Private`h2pos$$ = 15, 
        DaedaelusMeshCore`Private`h2start$$ = 65, 
        DaedaelusMeshCore`Private`width$$ = 25}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Column[{
         Style["Daedalus Network Automaton", 18, Bold], 
         Style[
         "One-dimensional resilient link \[LongDash] local rules only", 12, 
          Gray], 
         DaedaelusMeshCore`Private`OutputGraphic[
          DaedaelusMeshCore`Private`runSim[
          DaedaelusMeshCore`Private`width$$, 
           100, {{DaedaelusMeshCore`Private`h1pos$$, 
             DaedaelusMeshCore`Private`h1start$$, 
             DaedaelusMeshCore`Private`h1end$$}, {
            DaedaelusMeshCore`Private`h2pos$$, 
             DaedaelusMeshCore`Private`h2start$$, 
             DaedaelusMeshCore`Private`h2end$$}}, {
           DaedaelusMeshCore`Private`errStart$$, 
            DaedaelusMeshCore`Private`errEnd$$}]]}, Alignment -> Center], 
      "Specifications" :> {{{
         DaedaelusMeshCore`Private`width$$, 25, "Link Width"}, 10, 40, 1, 
         Appearance -> "Labeled"}, Delimiter, 
        Style[
        "Receiver Error (Neg-ACK burst)", Bold], {{
         DaedaelusMeshCore`Private`errStart$$, 20, "Error Start Time"}, 1, 
         100, 1, Appearance -> "Labeled"}, {{
         DaedaelusMeshCore`Private`errEnd$$, 30, "Error End Time"}, 
         Dynamic[DaedaelusMeshCore`Private`errStart$$ + 1], 100, 1, 
         Appearance -> "Labeled"}, Delimiter, 
        Style[
        "Stalled Node 1", Bold], {{
         DaedaelusMeshCore`Private`h1pos$$, 5, "Position"}, 2, 
         Dynamic[DaedaelusMeshCore`Private`width$$], 1, Appearance -> 
         "Labeled"}, {{DaedaelusMeshCore`Private`h1start$$, 40, "Start Time"},
          1, 100, 1, Appearance -> "Labeled"}, {{
         DaedaelusMeshCore`Private`h1end$$, 60, "End Time"}, 
         Dynamic[DaedaelusMeshCore`Private`h1start$$ + 1], 101, 1, Appearance -> 
         "Labeled"}, Delimiter, 
        Style[
        "Stalled Node 2", Bold], {{
         DaedaelusMeshCore`Private`h2pos$$, 15, "Position"}, 2, 
         Dynamic[DaedaelusMeshCore`Private`width$$], 1, Appearance -> 
         "Labeled"}, {{DaedaelusMeshCore`Private`h2start$$, 65, "Start Time"},
          1, 100, 1, Appearance -> "Labeled"}, {{
         DaedaelusMeshCore`Private`h2end$$, 85, "End Time"}, 
         Dynamic[DaedaelusMeshCore`Private`h2start$$ + 1], 101, 1, Appearance -> 
         "Labeled"}}, "Options" :> {ControlPlacement -> Left}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{1023., {280., 289.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({DaedaelusMeshCore`Private`OutputGraphic[
         Pattern[DaedaelusMeshCore`Private`arr, 
          Blank[]]] := 
       Module[{DaedaelusMeshCore`Private`h, 
          DaedaelusMeshCore`Private`w}, {
           DaedaelusMeshCore`Private`h, DaedaelusMeshCore`Private`w} = 
          Dimensions[DaedaelusMeshCore`Private`arr]; Graphics[{{
             EdgeForm[
              GrayLevel[0.9]], 
             FaceForm[], 
             Table[
              
              Rectangle[{
               DaedaelusMeshCore`Private`c, -DaedaelusMeshCore`Private`r}], {
              DaedaelusMeshCore`Private`c, DaedaelusMeshCore`Private`w}, {
              DaedaelusMeshCore`Private`r, DaedaelusMeshCore`Private`h}]}, 
            Table[
             DaedaelusMeshCore`Private`numberToGraphics[
              Part[
              DaedaelusMeshCore`Private`arr, DaedaelusMeshCore`Private`r, 
               DaedaelusMeshCore`Private`c], DaedaelusMeshCore`Private`c, 
              DaedaelusMeshCore`Private`r], {
             DaedaelusMeshCore`Private`c, DaedaelusMeshCore`Private`w}, {
             DaedaelusMeshCore`Private`r, DaedaelusMeshCore`Private`h}]}, 
           ImageSize -> {450, 350}, 
           PlotRange -> {{
             0, DaedaelusMeshCore`Private`w + 1}, {-
              DaedaelusMeshCore`Private`h, 1}}, PlotRangePadding -> 0.2, 
           AspectRatio -> Automatic]], 
       DaedaelusMeshCore`Private`numberToGraphics[
         Pattern[DaedaelusMeshCore`Private`num, 
          Blank[]], 
         Pattern[DaedaelusMeshCore`Private`w, 
          Blank[]], 
         Pattern[DaedaelusMeshCore`Private`h, 
          Blank[]]] := 
       Module[{DaedaelusMeshCore`Private`state = 
          DaedaelusMeshCore`Private`stateDecode[
           DaedaelusMeshCore`Private`num], 
          DaedaelusMeshCore`Private`pos = {
           DaedaelusMeshCore`Private`w, -DaedaelusMeshCore`Private`h}, 
          DaedaelusMeshCore`Private`gfx = {}}, Which[
           Or[
           Part[DaedaelusMeshCore`Private`state, 1] == 1, 
            Part[DaedaelusMeshCore`Private`state, 1] == 2], 
           AppendTo[DaedaelusMeshCore`Private`gfx, 
            DaedaelusMeshCore`Private`wallGlyph[
            DaedaelusMeshCore`Private`pos]], 
           Part[DaedaelusMeshCore`Private`state, 1] == 3, 
           AppendTo[DaedaelusMeshCore`Private`gfx, 
            DaedaelusMeshCore`Private`errGlyph[
            DaedaelusMeshCore`Private`pos]]]; 
         If[Part[DaedaelusMeshCore`Private`state, 4] == 1, 
           AppendTo[DaedaelusMeshCore`Private`gfx, {
             Opacity[0.4], Gray, 
             Rectangle[DaedaelusMeshCore`Private`pos]}]]; 
         If[Part[DaedaelusMeshCore`Private`state, 2] == 1, 
           AppendTo[DaedaelusMeshCore`Private`gfx, 
            DaedaelusMeshCore`Private`packetGlyph[
            DaedaelusMeshCore`Private`pos]]]; 
         If[Part[DaedaelusMeshCore`Private`state, 3] == 1, 
           AppendTo[DaedaelusMeshCore`Private`gfx, 
            DaedaelusMeshCore`Private`ackGlyph[
            DaedaelusMeshCore`Private`pos]]]; 
         If[Part[DaedaelusMeshCore`Private`state, 3] == 2, 
           AppendTo[DaedaelusMeshCore`Private`gfx, 
            DaedaelusMeshCore`Private`nackGlyph[
            DaedaelusMeshCore`Private`pos]]]; 
         Flatten[DaedaelusMeshCore`Private`gfx]], 
       DaedaelusMeshCore`Private`stateDecode[
         Pattern[DaedaelusMeshCore`Private`n, 
          Blank[Integer]]] := 
       IntegerDigits[DaedaelusMeshCore`Private`n, 4, 4], 
       DaedaelusMeshCore`Private`wallGlyph[
         Pattern[DaedaelusMeshCore`Private`pos, 
          Blank[]]] := {Black, 
         Rectangle[DaedaelusMeshCore`Private`pos]}, 
       DaedaelusMeshCore`Private`errGlyph[
         Pattern[DaedaelusMeshCore`Private`pos, 
          Blank[]]] := {
         RGBColor[0.8, 0, 0], 
         Rectangle[DaedaelusMeshCore`Private`pos]}, 
       DaedaelusMeshCore`Private`packetGlyph[
         Pattern[DaedaelusMeshCore`Private`pos, 
          Blank[]]] := {
         Opacity[0.9], 
         RGBColor[0.2, 0.4, 0.8], 
         Rotate[
          Rectangle[
          DaedaelusMeshCore`Private`pos + {0.1, 0.3}, 
           DaedaelusMeshCore`Private`pos + {0.9, 0.7}], (-45) Degree, 
          DaedaelusMeshCore`Private`pos + {0.5, 0.5}]}, 
       DaedaelusMeshCore`Private`ackGlyph[
         Pattern[DaedaelusMeshCore`Private`pos, 
          Blank[]]] := {
         Opacity[0.9], Orange, 
         Rotate[
          Rectangle[
          DaedaelusMeshCore`Private`pos + {0.1, 0.3}, 
           DaedaelusMeshCore`Private`pos + {0.9, 0.7}], 45 Degree, 
          DaedaelusMeshCore`Private`pos + {0.5, 0.5}]}, 
       DaedaelusMeshCore`Private`nackGlyph[
         Pattern[DaedaelusMeshCore`Private`pos, 
          Blank[]]] := {
         Opacity[0.9], Red, 
         Rotate[
          Rectangle[
          DaedaelusMeshCore`Private`pos + {0.1, 0.3}, 
           DaedaelusMeshCore`Private`pos + {0.9, 0.7}], 45 Degree, 
          DaedaelusMeshCore`Private`pos + {0.5, 0.5}]}, 
       DaedaelusMeshCore`Private`runSim[
         Pattern[DaedaelusMeshCore`Private`width, 
          Blank[]], 
         Pattern[DaedaelusMeshCore`Private`steps, 
          Blank[]], 
         Pattern[DaedaelusMeshCore`Private`holds, 
          Blank[List]], 
         Pattern[DaedaelusMeshCore`Private`recvErr, 
          Blank[List]]] := 
       Module[{DaedaelusMeshCore`Private`t = 1, 
          DaedaelusMeshCore`Private`state = 
          ConstantArray[0, DaedaelusMeshCore`Private`width + 2], 
          DaedaelusMeshCore`Private`output = {}, 
          DaedaelusMeshCore`Private`hSpec}, 
         Part[DaedaelusMeshCore`Private`state, 1] = 
          DaedaelusMeshCore`Private`wallS; 
         Part[DaedaelusMeshCore`Private`state, -1] = 
          DaedaelusMeshCore`Private`receiverS; 
         While[DaedaelusMeshCore`Private`t <= DaedaelusMeshCore`Private`steps,
            If[
             And[
              EvenQ[DaedaelusMeshCore`Private`t], 
              Not[
               DaedaelusMeshCore`Private`hasPacket[
                DaedaelusMeshCore`Private`stateDecode[
                 Part[DaedaelusMeshCore`Private`state, 2]]]]], 
             AddTo[
              Part[DaedaelusMeshCore`Private`state, 2], 
              DaedaelusMeshCore`Private`packetS]]; If[
             And[
             DaedaelusMeshCore`Private`t >= 
              Part[DaedaelusMeshCore`Private`recvErr, 1], 
              DaedaelusMeshCore`Private`t < 
              Part[DaedaelusMeshCore`Private`recvErr, 2]], 
             Part[DaedaelusMeshCore`Private`state, -1] = 
             DaedaelusMeshCore`Private`errorS, 
             If[
              And[
              Part[DaedaelusMeshCore`Private`state, -1] === 
               DaedaelusMeshCore`Private`errorS, DaedaelusMeshCore`Private`t == 
               Part[DaedaelusMeshCore`Private`recvErr, 2]], 
              Part[DaedaelusMeshCore`Private`state, -1] = 
              DaedaelusMeshCore`Private`receiverS]]; 
           Do[DaedaelusMeshCore`Private`hSpec = 
              DaedaelusMeshCore`Private`hold; If[
               And[
               DaedaelusMeshCore`Private`t >= 
                Part[DaedaelusMeshCore`Private`hSpec, 2], 
                DaedaelusMeshCore`Private`t < 
                Part[DaedaelusMeshCore`Private`hSpec, 3]], 
               If[
                Not[
                 DaedaelusMeshCore`Private`isHold[
                  DaedaelusMeshCore`Private`stateDecode[
                   Part[DaedaelusMeshCore`Private`state, 
                    Part[DaedaelusMeshCore`Private`hSpec, 1]]]]], 
                AddTo[
                 Part[DaedaelusMeshCore`Private`state, 
                  Part[DaedaelusMeshCore`Private`hSpec, 1]], 
                 DaedaelusMeshCore`Private`holdS]], 
               If[
                And[
                DaedaelusMeshCore`Private`t == 
                 Part[DaedaelusMeshCore`Private`hSpec, 3], 
                 DaedaelusMeshCore`Private`isHold[
                  DaedaelusMeshCore`Private`stateDecode[
                   Part[DaedaelusMeshCore`Private`state, 
                    Part[DaedaelusMeshCore`Private`hSpec, 1]]]]], 
                SubtractFrom[
                 Part[DaedaelusMeshCore`Private`state, 
                  Part[DaedaelusMeshCore`Private`hSpec, 1]], 
                 DaedaelusMeshCore`Private`holdS]]], {
             DaedaelusMeshCore`Private`hold, 
              DaedaelusMeshCore`Private`holds}]; 
           AppendTo[
            DaedaelusMeshCore`Private`output, 
             DaedaelusMeshCore`Private`state]; 
           DaedaelusMeshCore`Private`state = 
            CellularAutomaton[{DaedaelusMeshCore`Private`caRule, {}, 1}][
             DaedaelusMeshCore`Private`state]; 
           Increment[DaedaelusMeshCore`Private`t]]; 
         DaedaelusMeshCore`Private`output], DaedaelusMeshCore`Private`runSim[
         Pattern[DaedaelusMeshCore`Private`width, 
          Blank[]], 
         Pattern[DaedaelusMeshCore`Private`steps, 
          Blank[]], 
         Pattern[DaedaelusMeshCore`Private`holds, 
          Blank[List]], 
         Pattern[DaedaelusMeshCore`Private`recvErr, 
          Blank[]]] := 
       Module[{DaedaelusMeshCore`Private`t = 1, 
          DaedaelusMeshCore`Private`state, 
          DaedaelusMeshCore`Private`output = {}, 
          DaedaelusMeshCore`Private`startErr, 
          DaedaelusMeshCore`Private`endErr}, 
         DaedaelusMeshCore`Private`state = 
          ConstantArray[0, DaedaelusMeshCore`Private`width + 2]; 
         Part[DaedaelusMeshCore`Private`state, 1] = 
          DaedaelusMeshCore`Private`wallS; 
         Part[DaedaelusMeshCore`Private`state, -1] = 
          DaedaelusMeshCore`Private`receiverOK; {
           DaedaelusMeshCore`Private`startErr, 
            DaedaelusMeshCore`Private`endErr} = 
          DaedaelusMeshCore`Private`recvErr; 
         While[DaedaelusMeshCore`Private`t <= DaedaelusMeshCore`Private`steps,
            If[
             And[
              EvenQ[DaedaelusMeshCore`Private`t], 
              Not[
               DaedaelusMeshCore`Private`hasPacket[
                DaedaelusMeshCore`Private`stateDecode[
                 Part[DaedaelusMeshCore`Private`state, 2]]]]], 
             AddTo[
              Part[DaedaelusMeshCore`Private`state, 2], 
              DaedaelusMeshCore`Private`packetS]]; If[
             Inequality[
             DaedaelusMeshCore`Private`startErr, LessEqual, 
              DaedaelusMeshCore`Private`t, Less, 
              DaedaelusMeshCore`Private`endErr], 
             Part[DaedaelusMeshCore`Private`state, -1] = 
             DaedaelusMeshCore`Private`receiverErr, 
             If[
             Part[DaedaelusMeshCore`Private`state, -1] === 
              DaedaelusMeshCore`Private`receiverErr, 
              Part[DaedaelusMeshCore`Private`state, -1] = 
              DaedaelusMeshCore`Private`receiverOK]]; Do[
             
             With[{DaedaelusMeshCore`Private`pos = 
               Part[DaedaelusMeshCore`Private`holdSpec, 1], 
               DaedaelusMeshCore`Private`holdStart = 
               Part[DaedaelusMeshCore`Private`holdSpec, 2], 
               DaedaelusMeshCore`Private`holdEnd = 
               Part[DaedaelusMeshCore`Private`holdSpec, 3]}, 
              If[
               Inequality[
               DaedaelusMeshCore`Private`holdStart, LessEqual, 
                DaedaelusMeshCore`Private`t, Less, 
                DaedaelusMeshCore`Private`holdEnd], 
               If[
                Not[
                 DaedaelusMeshCore`Private`isHold[
                  DaedaelusMeshCore`Private`stateDecode[
                   Part[
                   DaedaelusMeshCore`Private`state, 
                    DaedaelusMeshCore`Private`pos]]]], 
                AddTo[
                 Part[
                 DaedaelusMeshCore`Private`state, 
                  DaedaelusMeshCore`Private`pos], 
                 DaedaelusMeshCore`Private`holdS]], 
               If[
                DaedaelusMeshCore`Private`isHold[
                 DaedaelusMeshCore`Private`stateDecode[
                  Part[
                  DaedaelusMeshCore`Private`state, 
                   DaedaelusMeshCore`Private`pos]]], 
                SubtractFrom[
                 Part[
                 DaedaelusMeshCore`Private`state, 
                  DaedaelusMeshCore`Private`pos], 
                 DaedaelusMeshCore`Private`holdS]]]], {
             DaedaelusMeshCore`Private`holdSpec, 
              DaedaelusMeshCore`Private`holds}]; 
           AppendTo[
            DaedaelusMeshCore`Private`output, 
             DaedaelusMeshCore`Private`state]; 
           DaedaelusMeshCore`Private`state = 
            CellularAutomaton[{DaedaelusMeshCore`Private`caRule, {}, 1}, 
              DaedaelusMeshCore`Private`state]; 
           Increment[DaedaelusMeshCore`Private`t]]; 
         DaedaelusMeshCore`Private`output], DaedaelusMeshCore`Private`runSim[
         Pattern[DaedaelusMeshCore`Private`width, 
          Blank[]], 
         Pattern[DaedaelusMeshCore`Private`steps, 
          Blank[]], 
         Pattern[DaedaelusMeshCore`Private`holds, 
          Blank[]], 
         Pattern[DaedaelusMeshCore`Private`recvErr, 
          Blank[]]] := 
       Module[{DaedaelusMeshCore`Private`t = 1, DaedaelusMeshCore`Private`st, 
          DaedaelusMeshCore`Private`out = {}, DaedaelusMeshCore`Private`col, 
          DaedaelusMeshCore`Private`t0, DaedaelusMeshCore`Private`t1}, 
         DaedaelusMeshCore`Private`st = 
          ConstantArray[0, DaedaelusMeshCore`Private`width + 2]; 
         Part[DaedaelusMeshCore`Private`st, 1] = 
          DaedaelusMeshCore`Private`wallS; 
         Part[DaedaelusMeshCore`Private`st, -1] = 
          DaedaelusMeshCore`Private`receiverS; 
         While[DaedaelusMeshCore`Private`t <= DaedaelusMeshCore`Private`steps,
            If[
             And[
              EvenQ[DaedaelusMeshCore`Private`t], 
              Not[
               DaedaelusMeshCore`Private`hasPacket[
                DaedaelusMeshCore`Private`stateDecode[
                 Part[DaedaelusMeshCore`Private`st, 2]]]]], 
             AddTo[
              Part[DaedaelusMeshCore`Private`st, 2], 
              DaedaelusMeshCore`Private`packetS]]; {
             DaedaelusMeshCore`Private`t0, DaedaelusMeshCore`Private`t1} = 
            DaedaelusMeshCore`Private`recvErr; If[
             Inequality[
             DaedaelusMeshCore`Private`t0, LessEqual, 
              DaedaelusMeshCore`Private`t, Less, 
              DaedaelusMeshCore`Private`t1], 
             Part[DaedaelusMeshCore`Private`st, -1] = 
             DaedaelusMeshCore`Private`errorS, 
             If[
             Part[DaedaelusMeshCore`Private`st, -1] === 
              DaedaelusMeshCore`Private`errorS, 
              Part[DaedaelusMeshCore`Private`st, -1] = 
              DaedaelusMeshCore`Private`receiverS]]; 
           Do[{DaedaelusMeshCore`Private`col, DaedaelusMeshCore`Private`t0, 
                DaedaelusMeshCore`Private`t1} = DaedaelusMeshCore`Private`h; 
             If[
               Inequality[
               DaedaelusMeshCore`Private`t0, LessEqual, 
                DaedaelusMeshCore`Private`t, Less, 
                DaedaelusMeshCore`Private`t1], 
               If[
                Not[
                 DaedaelusMeshCore`Private`isHold[
                  DaedaelusMeshCore`Private`stateDecode[
                   Part[
                   DaedaelusMeshCore`Private`st, 
                    DaedaelusMeshCore`Private`col]]]], 
                AddTo[
                 Part[
                 DaedaelusMeshCore`Private`st, DaedaelusMeshCore`Private`col],
                  DaedaelusMeshCore`Private`holdS]], 
               If[
                DaedaelusMeshCore`Private`isHold[
                 DaedaelusMeshCore`Private`stateDecode[
                  Part[
                  DaedaelusMeshCore`Private`st, 
                   DaedaelusMeshCore`Private`col]]], 
                SubtractFrom[
                 Part[
                 DaedaelusMeshCore`Private`st, DaedaelusMeshCore`Private`col],
                  DaedaelusMeshCore`Private`holdS]]], {
             DaedaelusMeshCore`Private`h, DaedaelusMeshCore`Private`holds}]; 
           AppendTo[
            DaedaelusMeshCore`Private`out, DaedaelusMeshCore`Private`st]; 
           DaedaelusMeshCore`Private`st = 
            CellularAutomaton[{DaedaelusMeshCore`Private`caRule, {}, 1}][
             DaedaelusMeshCore`Private`st]; 
           Increment[DaedaelusMeshCore`Private`t]]; 
         DaedaelusMeshCore`Private`out], DaedaelusMeshCore`Private`wallS = 64,
        DaedaelusMeshCore`Private`receiverS = 128, 
       DaedaelusMeshCore`Private`hasPacket[
         Pattern[DaedaelusMeshCore`Private`s, 
          Blank[List]]] := Part[DaedaelusMeshCore`Private`s, 2] == 1, 
       DaedaelusMeshCore`Private`hasPacket[
         Pattern[DaedaelusMeshCore`Private`s, 
          Blank[]]] := Part[DaedaelusMeshCore`Private`s, 2] == 1, 
       DaedaelusMeshCore`Private`packetS = 16, 
       DaedaelusMeshCore`Private`errorS = 192, 
       DaedaelusMeshCore`Private`isHold[
         Pattern[DaedaelusMeshCore`Private`s, 
          Blank[List]]] := Part[DaedaelusMeshCore`Private`s, 4] == 1, 
       DaedaelusMeshCore`Private`isHold[
         Pattern[DaedaelusMeshCore`Private`s, 
          Blank[]]] := Part[DaedaelusMeshCore`Private`s, 4] == 1, 
       DaedaelusMeshCore`Private`holdS = 1, DaedaelusMeshCore`Private`caRule = 
       Function[{DaedaelusMeshCore`Private`nb}, 
         Module[{
          DaedaelusMeshCore`Private`l, DaedaelusMeshCore`Private`c, 
           DaedaelusMeshCore`Private`r, 
           DaedaelusMeshCore`Private`newState}, {
            DaedaelusMeshCore`Private`l, DaedaelusMeshCore`Private`c, 
             DaedaelusMeshCore`Private`r} = 
           Map[DaedaelusMeshCore`Private`stateDecode, 
             DaedaelusMeshCore`Private`nb]; If[
            Or[
            Part[DaedaelusMeshCore`Private`c, 1] >= 1, 
             Part[DaedaelusMeshCore`Private`c, 4] == 1], 
            DaedaelusMeshCore`Private`stateEncode[
            DaedaelusMeshCore`Private`c], 
            DaedaelusMeshCore`Private`newState = DaedaelusMeshCore`Private`c; 
            DaedaelusMeshCore`Private`newState = 
             DaedaelusMeshCore`Private`handlePacket[
              DaedaelusMeshCore`Private`l, DaedaelusMeshCore`Private`c, 
               DaedaelusMeshCore`Private`r, 
               DaedaelusMeshCore`Private`newState]; 
            DaedaelusMeshCore`Private`newState = 
             DaedaelusMeshCore`Private`handleAck[
              DaedaelusMeshCore`Private`l, DaedaelusMeshCore`Private`c, 
               DaedaelusMeshCore`Private`r, 
               DaedaelusMeshCore`Private`newState]; 
            DaedaelusMeshCore`Private`stateEncode[
             DaedaelusMeshCore`Private`newState]]]], 
       DaedaelusMeshCore`Private`stateEncode[
         Pattern[DaedaelusMeshCore`Private`s, 
          Blank[List]]] := FromDigits[DaedaelusMeshCore`Private`s, 4], 
       DaedaelusMeshCore`Private`handlePacket[
         Pattern[DaedaelusMeshCore`Private`left, 
          Blank[]], 
         Pattern[DaedaelusMeshCore`Private`center, 
          Blank[]], 
         Pattern[DaedaelusMeshCore`Private`right, 
          Blank[]], 
         Pattern[DaedaelusMeshCore`Private`newState, 
          Blank[]]] := 
       Module[{DaedaelusMeshCore`Private`s = 
          DaedaelusMeshCore`Private`newState}, If[
           Or[
            DaedaelusMeshCore`Private`hasNegAck[
            DaedaelusMeshCore`Private`right], 
            DaedaelusMeshCore`Private`hasNegAck[
            DaedaelusMeshCore`Private`center]], 
           Part[DaedaelusMeshCore`Private`s, 2] = 0; 
           Return[DaedaelusMeshCore`Private`s]]; If[
           And[
            DaedaelusMeshCore`Private`hasPacket[
            DaedaelusMeshCore`Private`left], 
            Not[
             DaedaelusMeshCore`Private`hasPacket[
             DaedaelusMeshCore`Private`center]], 
            Not[
             DaedaelusMeshCore`Private`isHold[
             DaedaelusMeshCore`Private`center]], 
            Not[
             DaedaelusMeshCore`Private`isHold[
             DaedaelusMeshCore`Private`left]]], 
           Part[DaedaelusMeshCore`Private`s, 2] = 1]; If[
           And[
            DaedaelusMeshCore`Private`hasPacket[
            DaedaelusMeshCore`Private`center], 
            Not[
             DaedaelusMeshCore`Private`hasPacket[
             DaedaelusMeshCore`Private`right]], 
            Not[
             DaedaelusMeshCore`Private`isHold[
             DaedaelusMeshCore`Private`right]]], 
           Part[DaedaelusMeshCore`Private`s, 2] = 0]; 
         DaedaelusMeshCore`Private`s], DaedaelusMeshCore`Private`hasNegAck[
         Pattern[DaedaelusMeshCore`Private`s, 
          Blank[List]]] := Part[DaedaelusMeshCore`Private`s, 3] == 2, 
       DaedaelusMeshCore`Private`hasNegAck[
         Pattern[DaedaelusMeshCore`Private`s, 
          Blank[]]] := Part[DaedaelusMeshCore`Private`s, 3] == 2, 
       DaedaelusMeshCore`Private`handleAck[
         Pattern[DaedaelusMeshCore`Private`left, 
          Blank[]], 
         Pattern[DaedaelusMeshCore`Private`center, 
          Blank[]], 
         Pattern[DaedaelusMeshCore`Private`right, 
          Blank[]], 
         Pattern[DaedaelusMeshCore`Private`newState, 
          Blank[]]] := 
       Module[{DaedaelusMeshCore`Private`s = 
          DaedaelusMeshCore`Private`newState}, If[
           And[
            DaedaelusMeshCore`Private`hasAck[DaedaelusMeshCore`Private`right], 
            Not[
             DaedaelusMeshCore`Private`hasAck[
             DaedaelusMeshCore`Private`center]], 
            Not[
             DaedaelusMeshCore`Private`isHold[
             DaedaelusMeshCore`Private`right]], 
            Not[
             DaedaelusMeshCore`Private`isHold[
             DaedaelusMeshCore`Private`center]]], 
           Part[DaedaelusMeshCore`Private`s, 3] = 
            Part[DaedaelusMeshCore`Private`right, 3]; If[
             And[
              DaedaelusMeshCore`Private`hasPacket[
              DaedaelusMeshCore`Private`s], 
              DaedaelusMeshCore`Private`hasNegAck[
              DaedaelusMeshCore`Private`right]], 
             Part[DaedaelusMeshCore`Private`s, 2] = 0]]; If[
           And[
            DaedaelusMeshCore`Private`hasAck[
            DaedaelusMeshCore`Private`center], 
            Not[
             DaedaelusMeshCore`Private`hasAck[
             DaedaelusMeshCore`Private`left]], 
            Not[
             DaedaelusMeshCore`Private`isHold[
             DaedaelusMeshCore`Private`left]]], 
           Part[DaedaelusMeshCore`Private`s, 3] = 0; Null]; If[
           And[
            DaedaelusMeshCore`Private`isReceiver[
            DaedaelusMeshCore`Private`right], 
            DaedaelusMeshCore`Private`hasPacket[
            DaedaelusMeshCore`Private`center]], 
           Part[DaedaelusMeshCore`Private`s, 3] = 
           If[Part[DaedaelusMeshCore`Private`right, 1] == 2, 1, 2]]; 
         DaedaelusMeshCore`Private`s], DaedaelusMeshCore`Private`hasAck[
         Pattern[DaedaelusMeshCore`Private`s, 
          Blank[List]]] := Part[DaedaelusMeshCore`Private`s, 3] >= 1, 
       DaedaelusMeshCore`Private`hasAck[
         Pattern[DaedaelusMeshCore`Private`s, 
          Blank[]]] := Part[DaedaelusMeshCore`Private`s, 3] >= 1, 
       DaedaelusMeshCore`Private`isReceiver[
         Pattern[DaedaelusMeshCore`Private`s, 
          Blank[List]]] := 
       Or[Part[DaedaelusMeshCore`Private`s, 1] == 2, 
         Part[DaedaelusMeshCore`Private`s, 1] == 3], 
       DaedaelusMeshCore`Private`isReceiver[
         Pattern[DaedaelusMeshCore`Private`s, 
          Blank[]]] := 
       Or[Part[DaedaelusMeshCore`Private`s, 1] == 2, 
         Part[DaedaelusMeshCore`Private`s, 1] == 3], 
       DaedaelusMeshCore`Private`receiverOK = 128, 
       DaedaelusMeshCore`Private`receiverErr = 192}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.962897929198422*^9, 3.9628980723450317`*^9},
 CellLabel->
  "Out[5894]=",ExpressionUUID->"356e152c-769f-4482-a3ee-77e5bcf8a682"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Resilience Under Duress: A Network Fragmentation Analysis", "Title",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, 3.962898640977153*^9, {3.962898888923689*^9, 
   3.962898889645359*^9}, {3.962899383523978*^9, 3.962899384071321*^9}},
 FormatType->"TextForm",
 FontSize->24,
 Background->None,ExpressionUUID->"30741bc6-668a-4b37-912f-564da47b0cda"],

Cell[CellGroupData[{

Cell["\<\
A network\[CloseCurlyQuote]s true character is revealed not under ideal \
conditions, but under stress. Its ability to withstand \
failures\[LongDash]whether random hardware faults or targeted attacks\
\[LongDash]and maintain connectivity is the ultimate measure of its \
resilience. This section evaluates the structural robustness of the Clos and \
mesh topologies by analyzing their response to simulated random link \
failures. By measuring the rate at which each network fragments into \
disconnected components, we can quantify its resilience. This analysis \
connects the quantitative results from the simulation to core graph-theoretic \
concepts of connectivity, revealing a fundamental difference in how the two \
architectures distribute risk.\[NonBreakingSpace] \
\>", "Chapter",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898338257278*^9}, {
   3.962898381402219*^9, 3.96289842166496*^9}, {3.96289849829926*^9, 
   3.962898570547124*^9}, {3.962898605101194*^9, 3.9628986082485447`*^9}, {
   3.962898718588675*^9, 3.962898842457036*^9}, {3.96289889781201*^9, 
   3.9628989798655977`*^9}, {3.962899016408059*^9, 3.962899016568543*^9}, {
   3.96289921107825*^9, 3.9628993977957773`*^9}},
 FormatType->"TextForm",
 FontSize->14,
 Background->None,ExpressionUUID->"9151359a-5a2c-438b-902b-f7425f0d0d1b"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"states", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<L0\>\"", ",", "\"\<L1\>\""}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"transitionRules", "=", 
   RowBox[{"Association", "[", 
    RowBox[{
     RowBox[{"\"\<L0\>\"", "\[Rule]", "\"\<L1\>\""}], ",", 
     RowBox[{"\"\<L1\>\"", "\[Rule]", "\"\<L0\>\""}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"createFSM", "[", "]"}], ":=", 
   RowBox[{"Association", "[", 
    RowBox[{
     RowBox[{"\"\<Inbound\>\"", "\[Rule]", "None"}], ",", 
     RowBox[{"\"\<Outbound\>\"", "\[Rule]", "None"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"stepFSM", "[", "fsm_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"newFSM", "=", "fsm"}], "}"}], ",", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"newFSM", "[", "\"\<Inbound\>\"", "]"}], "=!=", "None"}], 
        ",", 
        RowBox[{
         RowBox[{
          RowBox[{"newFSM", "[", "\"\<Outbound\>\"", "]"}], "=", 
          RowBox[{"transitionRules", "[", 
           RowBox[{"newFSM", "[", "\"\<Inbound\>\"", "]"}], "]"}]}], ";", 
         RowBox[{
          RowBox[{"newFSM", "[", "\"\<Inbound\>\"", "]"}], "=", "None"}], 
         ";"}]}], "]"}], ";", "newFSM"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"systemFSMStates", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<A_in\>\"", ",", "\"\<A_commit\>\"", ",", "\"\<B_in\>\"", ",", 
     "\"\<B_commit\>\""}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"systemFSMRules", "=", 
   RowBox[{"Association", "[", 
    RowBox[{
     RowBox[{"\"\<A_in\>\"", "\[Rule]", "\"\<A_commit\>\""}], ",", 
     RowBox[{"\"\<A_commit\>\"", "\[Rule]", "\"\<B_in\>\""}], ",", 
     RowBox[{"\"\<B_in\>\"", "\[Rule]", "\"\<B_commit\>\""}], ",", 
     RowBox[{"\"\<B_commit\>\"", "\[Rule]", "\"\<A_in\>\""}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"Graph", "[", 
   RowBox[{
    RowBox[{"DirectedEdge", "@@@", 
     RowBox[{"Normal", "[", "systemFSMRules", "]"}]}], ",", 
    RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}], ",", 
    RowBox[{"EdgeStyle", "\[Rule]", 
     RowBox[{"Arrowheads", "[", "0.03", "]"}]}], ",", 
    RowBox[{"GraphLayout", "\[Rule]", "\"\<CircularEmbedding\>\""}]}], "]"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"stepSystem", "[", 
    RowBox[{"{", 
     RowBox[{"fsmA_", ",", "fsmB_", ",", "state_"}], "}"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"nextA", "=", "fsmA"}], ",", 
       RowBox[{"nextB", "=", "fsmB"}], ",", "nextState"}], "}"}], ",", 
     RowBox[{
      RowBox[{"Switch", "[", 
       RowBox[{"state", ",", "\"\<A_in\>\"", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"nextA", "[", "\"\<Outbound\>\"", "]"}], "=", 
          RowBox[{"transitionRules", "[", 
           RowBox[{"nextA", "[", "\"\<Inbound\>\"", "]"}], "]"}]}], ";", 
         RowBox[{
          RowBox[{"nextA", "[", "\"\<Inbound\>\"", "]"}], "=", "None"}], 
         ";"}], ",", "\"\<A_commit\>\"", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"nextB", "[", "\"\<Inbound\>\"", "]"}], "=", 
          RowBox[{"nextA", "[", "\"\<Outbound\>\"", "]"}]}], ";", 
         RowBox[{
          RowBox[{"nextA", "[", "\"\<Outbound\>\"", "]"}], "=", "None"}], 
         ";"}], ",", "\"\<B_in\>\"", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"nextB", "[", "\"\<Outbound\>\"", "]"}], "=", 
          RowBox[{"transitionRules", "[", 
           RowBox[{"nextB", "[", "\"\<Inbound\>\"", "]"}], "]"}]}], ";", 
         RowBox[{
          RowBox[{"nextB", "[", "\"\<Inbound\>\"", "]"}], "=", "None"}], 
         ";"}], ",", "\"\<B_commit\>\"", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"nextA", "[", "\"\<Inbound\>\"", "]"}], "=", 
          RowBox[{"nextB", "[", "\"\<Outbound\>\"", "]"}]}], ";", 
         RowBox[{
          RowBox[{"nextB", "[", "\"\<Outbound\>\"", "]"}], "=", "None"}], 
         ";"}]}], "]"}], ";", 
      RowBox[{"nextState", "=", 
       RowBox[{"systemFSMRules", "[", "state", "]"}]}], ";", 
      RowBox[{"{", 
       RowBox[{"nextA", ",", "nextB", ",", "nextState"}], "}"}]}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"renderSystem", "[", 
    RowBox[{"fsmA_", ",", "fsmB_"}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{"LightGray", ",", 
     RowBox[{"EdgeForm", "[", "Black", "]"}], ",", 
     RowBox[{"Rectangle", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}]}], "]"}], ",", 
     RowBox[{"Rectangle", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"2", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3", ",", "2"}], "}"}]}], "]"}], ",", "Black", ",", 
     RowBox[{"Arrow", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "0.5"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2", ",", "0.5"}], "}"}]}], "}"}], "]"}], ",", 
     RowBox[{"Arrow", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "1.5"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1.5"}], "}"}]}], "}"}], "]"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"fsmA", "[", "\"\<Inbound\>\"", "]"}], "=!=", "None"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"fsmA", "[", "\"\<Inbound\>\"", "]"}], "===", 
            "\"\<L0\>\""}], ",", "Red", ",", "Blue"}], "]"}], ",", 
         RowBox[{"Disk", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0.5", ",", "1.5"}], "}"}], ",", "0.1"}], "]"}]}], "}"}], 
       ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"fsmA", "[", "\"\<Outbound\>\"", "]"}], "=!=", "None"}], ",", 
       
       RowBox[{"{", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"fsmA", "[", "\"\<Outbound\>\"", "]"}], "===", 
            "\"\<L0\>\""}], ",", "Red", ",", "Blue"}], "]"}], ",", 
         RowBox[{"Disk", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0.5", ",", "0.5"}], "}"}], ",", "0.1"}], "]"}]}], "}"}], 
       ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"fsmB", "[", "\"\<Inbound\>\"", "]"}], "=!=", "None"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"fsmB", "[", "\"\<Inbound\>\"", "]"}], "===", 
            "\"\<L0\>\""}], ",", "Red", ",", "Blue"}], "]"}], ",", 
         RowBox[{"Disk", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"2.5", ",", "0.5"}], "}"}], ",", "0.1"}], "]"}]}], "}"}], 
       ",", 
       RowBox[{"{", "}"}]}], "]"}], ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"fsmB", "[", "\"\<Outbound\>\"", "]"}], "=!=", "None"}], ",", 
       
       RowBox[{"{", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"fsmB", "[", "\"\<Outbound\>\"", "]"}], "===", 
            "\"\<L0\>\""}], ",", "Red", ",", "Blue"}], "]"}], ",", 
         RowBox[{"Disk", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"2.5", ",", "1.5"}], "}"}], ",", "0.1"}], "]"}]}], "}"}], 
       ",", 
       RowBox[{"{", "}"}]}], "]"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"fsmA", "=", 
   RowBox[{"createFSM", "[", "]"}]}], ";", 
  RowBox[{"fsmB", "=", 
   RowBox[{"createFSM", "[", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"fsmA", "[", "\"\<Inbound\>\"", "]"}], "=", "\"\<L0\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"evolution", "=", 
   RowBox[{"NestList", "[", 
    RowBox[{"stepSystem", ",", 
     RowBox[{"{", 
      RowBox[{"fsmA", ",", "fsmB", ",", "\"\<A_in\>\""}], "}"}], ",", "5"}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{"ListAnimate", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Graphics", "[", 
      RowBox[{
       RowBox[{"renderSystem", "[", 
        RowBox[{
         RowBox[{"#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}],
          ",", 
         RowBox[{
         "#1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
        "]"}], ",", 
       RowBox[{"ImageSize", "\[Rule]", "200"}]}], "]"}], "&"}], ")"}], "/@", 
   RowBox[{"(", 
    RowBox[{"evolution", "/.", "\[VeryThinSpace]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"a_", ",", "b_", ",", "s_"}], "}"}], "\[RuleDelayed]", 
      RowBox[{"{", 
       RowBox[{"a", ",", "b"}], "}"}]}]}], ")"}]}], "]"}]}], "Code",
 CellChangeTimes->{{3.9628979634269867`*^9, 3.962897963434848*^9}, 
   3.962898075134898*^9},
 CellLabel->
  "In[5895]:=",ExpressionUUID->"1b1a38c0-50fa-4399-9295-7b08114ebc16"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{DaedaelusMeshCore`Private`i613$$ = 3, Typeset`show$$ = 
    True, Typeset`bookmarkList$$ = {
    "\"min\"" :> {DaedaelusMeshCore`Private`i613$$ = 1}, 
     "\"max\"" :> {DaedaelusMeshCore`Private`i613$$ = 6}}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[DaedaelusMeshCore`Private`i613$$], 1, ""}, 1, 6, 1, ControlType -> 
      Animator}}, Typeset`size$$ = Automatic, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = True}, 
    PaneBox[
     PanelBox[GridBox[{
        {
         ItemBox[
          ItemBox[
           TagBox[
            StyleBox[GridBox[{
               {"\<\"\"\>", 
                
                AnimatorBox[Dynamic[DaedaelusMeshCore`Private`i613$$], {1, 6, 
                 1},
                 AnimationRate->Automatic,
                 AnimationRunTime->1.7528767585754395`,
                 AnimationRunning->False,
                 AnimationTimeIndex->1.7528767585754395`,
                 
                 AppearanceElements->{
                  "ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
                   "DirectionButton"},
                 AutoAction->False,
                 DisplayAllSteps->True]}
              },
              AutoDelete->False,
              
              GridBoxAlignment->{
               "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "ListAnimateLabel",
             StripOnInput->False],
            {"ControlArea", Top}],
           Alignment->{Automatic, Inherited},
           StripOnInput->False],
          Background->None,
          StripOnInput->False]},
        {
         ItemBox[
          TagBox[
           StyleBox[
            PaneBox[
             TagBox[
              PaneSelectorBox[{1->
               GraphicsBox[
                {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
                 RectangleBox[{0, 0}, {1, 2}], RectangleBox[{2, 0}, {3, 2}], 
                 {GrayLevel[0], ArrowBox[{{1, 0.5}, {2, 0.5}}], 
                  ArrowBox[{{2, 1.5}, {1, 1.5}}], 
                  {RGBColor[1, 0, 0], DiskBox[{0.5, 1.5}, 0.1]}, {}, {}, {}}},
                
                ImageSize->200], 2->
               GraphicsBox[
                {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
                 RectangleBox[{0, 0}, {1, 2}], RectangleBox[{2, 0}, {3, 2}], 
                 {GrayLevel[0], ArrowBox[{{1, 0.5}, {2, 0.5}}], 
                  ArrowBox[{{2, 1.5}, {1, 1.5}}], {}, 
                  {RGBColor[0, 0, 1], DiskBox[{0.5, 0.5}, 0.1]}, {}, {}}},
                ImageSize->200], 3->
               GraphicsBox[
                {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
                 RectangleBox[{0, 0}, {1, 2}], RectangleBox[{2, 0}, {3, 2}], 
                 {GrayLevel[0], ArrowBox[{{1, 0.5}, {2, 0.5}}], 
                  ArrowBox[{{2, 1.5}, {1, 1.5}}], {}, {}, 
                  {RGBColor[0, 0, 1], DiskBox[{2.5, 0.5}, 0.1]}, {}}},
                ImageSize->200], 4->
               GraphicsBox[
                {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
                 RectangleBox[{0, 0}, {1, 2}], RectangleBox[{2, 0}, {3, 2}], 
                 {GrayLevel[0], ArrowBox[{{1, 0.5}, {2, 0.5}}], 
                  ArrowBox[{{2, 1.5}, {1, 1.5}}], {}, {}, {}, 
                  {RGBColor[1, 0, 0], DiskBox[{2.5, 1.5}, 0.1]}}},
                ImageSize->200], 5->
               GraphicsBox[
                {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
                 RectangleBox[{0, 0}, {1, 2}], RectangleBox[{2, 0}, {3, 2}], 
                 {GrayLevel[0], ArrowBox[{{1, 0.5}, {2, 0.5}}], 
                  ArrowBox[{{2, 1.5}, {1, 1.5}}], 
                  {RGBColor[1, 0, 0], DiskBox[{0.5, 1.5}, 0.1]}, {}, {}, {}}},
                
                ImageSize->200], 6->
               GraphicsBox[
                {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
                 RectangleBox[{0, 0}, {1, 2}], RectangleBox[{2, 0}, {3, 2}], 
                 {GrayLevel[0], ArrowBox[{{1, 0.5}, {2, 0.5}}], 
                  ArrowBox[{{2, 1.5}, {1, 1.5}}], {}, 
                  {RGBColor[0, 0, 1], DiskBox[{0.5, 0.5}, 0.1]}, {}, {}}},
                ImageSize->200]}, Dynamic[DaedaelusMeshCore`Private`i613$$],
               Alignment->Automatic,
               BaseStyle->"ListAnimateCore",
               ImageSize->All,
               TransitionDirection->Horizontal,
               TransitionDuration->0.5,
               TransitionEffect->Automatic],
              Identity,
              Editable->True,
              Selectable->True],
             ImageMargins->10],
            Deployed->False,
            StripOnInput->False,
            ScriptLevel->0,
            GraphicsBoxOptions->{PreserveImageOptions->True},
            Graphics3DBoxOptions->{PreserveImageOptions->True}],
           Identity,
           Editable->False,
           Selectable->False],
          Alignment->{Left, Center},
          Background->GrayLevel[1],
          Frame->1,
          FrameStyle->GrayLevel[0, 0.2],
          ItemSize->Automatic,
          StripOnInput->False]}
       },
       AutoDelete->False,
       GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
       GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
       
       GridBoxSpacings->{"Columns" -> {
           Offset[0.7], {
            Offset[0.5599999999999999]}, 
           Offset[0.7]}, "Rows" -> {
           Offset[0.4], {
            Offset[0.8]}, 
           Offset[0.4]}}],
      DefaultBaseStyle->{},
      FrameMargins->{{5, 5}, {5, 5}}],
     BaselinePosition->Automatic,
     ImageMargins->0],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "ListAnimate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.962897963792632*^9, 3.962897987175539*^9}, 
   3.962898075447998*^9},
 CellLabel->
  "Out[5907]=",ExpressionUUID->"74d7ebaa-a864-45f1-918b-750ce3e96b0b"]
}, Open  ]]
}, Open  ]],

Cell["Modeling Resilience as a Percolation Problem", "Subtitle",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898307534945*^9}, {
   3.962898368042245*^9, 3.962898369635974*^9}, {3.962898493181312*^9, 
   3.9628984941794252`*^9}, {3.9628987079145727`*^9, 3.962898708877008*^9}, {
   3.962898758976321*^9, 3.962898759719747*^9}, {3.96289891712922*^9, 
   3.96289891771443*^9}, {3.962898961511298*^9, 3.962898962156911*^9}, {
   3.9628993202881403`*^9, 3.9628993208552933`*^9}, {3.962899410522279*^9, 
   3.962899411102943*^9}},
 FormatType->"TextForm",
 FontSize->18,
 Background->None,ExpressionUUID->"7892f0b7-4843-4c17-a653-0e85ad65b20e"],

Cell[CellGroupData[{

Cell[TextData[{
 "Network resilience can be formally defined as the ability of a network to \
provide its desired service even when challenged by faults, failures, or \
attacks. In the language of graph theory, this is often studied as a \
percolation problem, where one analyzes how the structural properties of a \
graph, particularly its connectivity, degrade as its nodes or edges are \
randomly or deliberately removed. \[NonBreakingSpace] \n\nA primary goal for \
any resilient network is to maintain a single \[OpenCurlyDoubleQuote]giant \
connected component\[CloseCurlyDoubleQuote] (GCC), a subgraph that includes \
the vast majority of the network\[CloseCurlyQuote]s nodes and within which a \
path exists between any two nodes. The moment a network fractures into \
multiple, non-trivial disconnected components, its core function is \
compromised, as communication between these separate partitions becomes \
impossible. The simulation\[CloseCurlyQuote]s metric\[LongDash]counting the \
number of connected components after successive random edge deletions\
\[LongDash]is a direct and effective measure of this fragmentation process. A \
resilient network will resist fragmentation, keeping its component count at 1 \
for as long as possible, while a brittle network will fracture quickly. \
\[NonBreakingSpace] \n\nThe vulnerability of a network can be precisely \
identified by locating its critical structural elements. In graph theory, \
these are known as ",
 StyleBox["articulation",
  FontWeight->"Bold"],
 " ",
 StyleBox["points",
  FontWeight->"Bold"],
 " (or cut vertices) and ",
 StyleBox["bridges",
  FontWeight->"Bold"],
 ". \[NonBreakingSpace] "
}], "Chapter",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898338257278*^9}, {
   3.962898381402219*^9, 3.96289842166496*^9}, {3.96289849829926*^9, 
   3.962898570547124*^9}, {3.962898605101194*^9, 3.9628986082485447`*^9}, {
   3.962898718588675*^9, 3.962898842457036*^9}, {3.96289889781201*^9, 
   3.9628989798655977`*^9}, {3.962899016408059*^9, 3.962899016568543*^9}, {
   3.96289921107825*^9, 3.962899439769548*^9}},
 FormatType->"TextForm",
 FontSize->14,
 Background->None,ExpressionUUID->"3e103e8c-06e0-419d-ab1b-a7109d093278"],

Cell[TextData[{
 "An ",
 StyleBox["articulation",
  FontWeight->"Bold"],
 " ",
 StyleBox["point",
  FontWeight->"Bold"],
 " is a node whose removal would increase the number of connected components, \
effectively splitting the network. \[NonBreakingSpace] "
}], "Item",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898338257278*^9}, {
   3.962898381402219*^9, 3.96289842166496*^9}, {3.96289849829926*^9, 
   3.962898570547124*^9}, {3.962898605101194*^9, 3.9628986082485447`*^9}, {
   3.962898718588675*^9, 3.962898842457036*^9}, {3.96289889781201*^9, 
   3.9628989798655977`*^9}, {3.962899016408059*^9, 3.962899016568543*^9}, {
   3.96289921107825*^9, 3.962899449316424*^9}, {3.9628995009047003`*^9, 
   3.962899502481819*^9}},
 FormatType->"TextForm",
 FontSize->14,
 Background->None,ExpressionUUID->"0c1d81ba-cfac-4ed8-b710-3810a5e531dd"],

Cell[TextData[{
 "A ",
 StyleBox["bridge",
  FontWeight->"Bold"],
 " is an edge whose removal has the same disconnecting effect. \
\[NonBreakingSpace] "
}], "Item",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898338257278*^9}, {
   3.962898381402219*^9, 3.96289842166496*^9}, {3.96289849829926*^9, 
   3.962898570547124*^9}, {3.962898605101194*^9, 3.9628986082485447`*^9}, {
   3.962898718588675*^9, 3.962898842457036*^9}, {3.96289889781201*^9, 
   3.9628989798655977`*^9}, {3.962899016408059*^9, 3.962899016568543*^9}, {
   3.96289921107825*^9, 3.962899449316424*^9}, {3.9628995009047003`*^9, 
   3.962899516633482*^9}},
 FormatType->"TextForm",
 FontSize->14,
 Background->None,ExpressionUUID->"177973b2-6138-42a2-a5ab-585f557ad6b7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
A network with many bridges and articulation points is inherently fragile, as \
the failure of these few critical elements can have a disproportionately \
large impact on overall connectivity. A robust network, by contrast, has high \
connectivity and few, if any, such single points of failure. \
\[NonBreakingSpace] \
\>", "Chapter",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898338257278*^9}, {
   3.962898381402219*^9, 3.96289842166496*^9}, {3.96289849829926*^9, 
   3.962898570547124*^9}, {3.962898605101194*^9, 3.9628986082485447`*^9}, {
   3.962898718588675*^9, 3.962898842457036*^9}, {3.96289889781201*^9, 
   3.9628989798655977`*^9}, {3.962899016408059*^9, 3.962899016568543*^9}, {
   3.96289921107825*^9, 3.962899439769548*^9}, {3.962899525881777*^9, 
   3.9628995291864357`*^9}},
 FormatType->"TextForm",
 FontSize->14,
 Background->None,ExpressionUUID->"7473325b-8cd4-4fca-af2a-e97d2a59b262"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"generateClosNetwork", "[", 
    RowBox[{"racks_Integer", ",", "srv_Integer", ",", "spines_Integer"}], 
    "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "serverNodes", ",", "torNodes", ",", "spineNodes", ",", "edges", ",", 
       "g", ",", "layout"}], "}"}], ",", 
     RowBox[{
      RowBox[{"serverNodes", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"\"\<S\>\"", "<>", 
           RowBox[{"ToString", "[", "i", "]"}], "<>", "\"\<,\>\"", "<>", 
           RowBox[{"ToString", "[", "j", "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "racks"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "srv"}], "}"}]}], "]"}], "]"}]}], ";", 
      RowBox[{"torNodes", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"\"\<T\>\"", "<>", 
          RowBox[{"ToString", "[", "i", "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "racks"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"spineNodes", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"\"\<SP\>\"", "<>", 
          RowBox[{"ToString", "[", "k", "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"k", ",", "spines"}], "}"}]}], "]"}]}], ";", 
      RowBox[{"edges", "=", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"\"\<S\>\"", "<>", 
              RowBox[{"ToString", "[", "i", "]"}], "<>", "\"\<,\>\"", "<>", 
              RowBox[{"ToString", "[", "j", "]"}]}], "\[TwoWayRule]", 
             RowBox[{"\"\<T\>\"", "<>", 
              RowBox[{"ToString", "[", "i", "]"}]}]}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "racks"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"j", ",", "srv"}], "}"}]}], "]"}], "]"}], ",", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"t", "\[TwoWayRule]", "s"}], ",", 
            RowBox[{"{", 
             RowBox[{"t", ",", "torNodes"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"s", ",", "spineNodes"}], "}"}]}], "]"}], "]"}]}], 
        "]"}]}], ";", 
      RowBox[{"g", "=", 
       RowBox[{"Graph", "[", 
        RowBox[{
         RowBox[{"Join", "[", 
          RowBox[{"serverNodes", ",", "torNodes", ",", "spineNodes"}], "]"}], 
         ",", "edges", ",", 
         RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]}], ";", 
      
      RowBox[{"layout", "=", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"Thread", "[", 
          RowBox[{"serverNodes", "\[Rule]", 
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"j", "+", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"i", "-", "1"}], ")"}], " ", 
                   RowBox[{"(", 
                    RowBox[{"srv", "+", "1"}], ")"}]}]}], ",", "1"}], "}"}], 
               ",", 
               RowBox[{"{", 
                RowBox[{"i", ",", "racks"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"j", ",", "srv"}], "}"}]}], "]"}], ",", "1"}], 
            "]"}]}], "]"}], ",", 
         RowBox[{"Thread", "[", 
          RowBox[{"torNodes", "\[Rule]", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"Mean", "[", 
                 RowBox[{"Range", "[", 
                  RowBox[{"1", ",", "srv"}], "]"}], "]"}], "+", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"i", "-", "1"}], ")"}], " ", 
                 RowBox[{"(", 
                  RowBox[{"srv", "+", "1"}], ")"}]}]}], ",", "2.5"}], "}"}], 
             ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "racks"}], "}"}]}], "]"}]}], "]"}], ",", 
         RowBox[{"Thread", "[", 
          RowBox[{"spineNodes", "\[Rule]", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Mean", "[", 
                RowBox[{"Range", "[", 
                 RowBox[{"1", ",", 
                  RowBox[{"racks", " ", 
                   RowBox[{"(", 
                    RowBox[{"srv", "+", "1"}], ")"}]}]}], "]"}], "]"}], ",", 
               RowBox[{"4", "+", "k"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"k", ",", "spines"}], "}"}]}], "]"}]}], "]"}]}], 
        "]"}]}], ";", 
      RowBox[{"Association", "[", 
       RowBox[{"\"\<Graph\>\"", "\[Rule]", 
        RowBox[{"Graph", "[", 
         RowBox[{
          RowBox[{"VertexList", "[", "g", "]"}], ",", 
          RowBox[{"EdgeList", "[", "g", "]"}], ",", 
          RowBox[{"VertexCoordinates", "\[Rule]", "layout"}]}], "]"}]}], 
       "]"}]}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"generateMeshNetwork", "[", 
    RowBox[{"rows_Integer", ",", "cols_Integer"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"nodes", ",", "edges", ",", "g"}], "}"}], ",", 
     RowBox[{
      RowBox[{"nodes", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"\"\<N\>\"", "<>", 
           RowBox[{"ToString", "[", "r", "]"}], "<>", "\"\<,\>\"", "<>", 
           RowBox[{"ToString", "[", "c", "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"r", ",", "rows"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"c", ",", "cols"}], "}"}]}], "]"}], "]"}]}], ";", 
      RowBox[{"edges", "=", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"\"\<N\>\"", "<>", 
              RowBox[{"ToString", "[", "r", "]"}], "<>", "\"\<,\>\"", "<>", 
              RowBox[{"ToString", "[", "c", "]"}]}], "\[TwoWayRule]", 
             RowBox[{"\"\<N\>\"", "<>", 
              RowBox[{"ToString", "[", "r", "]"}], "<>", "\"\<,\>\"", "<>", 
              RowBox[{"ToString", "[", 
               RowBox[{"c", "+", "1"}], "]"}]}]}], ",", 
            RowBox[{"{", 
             RowBox[{"r", ",", "rows"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"c", ",", 
              RowBox[{"cols", "-", "1"}]}], "}"}]}], "]"}], "]"}], ",", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"\"\<N\>\"", "<>", 
              RowBox[{"ToString", "[", "r", "]"}], "<>", "\"\<,\>\"", "<>", 
              RowBox[{"ToString", "[", "c", "]"}]}], "\[TwoWayRule]", 
             RowBox[{"\"\<N\>\"", "<>", 
              RowBox[{"ToString", "[", 
               RowBox[{"r", "+", "1"}], "]"}], "<>", "\"\<,\>\"", "<>", 
              RowBox[{"ToString", "[", "c", "]"}]}]}], ",", 
            RowBox[{"{", 
             RowBox[{"r", ",", 
              RowBox[{"rows", "-", "1"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"c", ",", "cols"}], "}"}]}], "]"}], "]"}]}], "]"}]}], 
      ";", 
      RowBox[{"g", "=", 
       RowBox[{"Graph", "[", 
        RowBox[{"nodes", ",", "edges", ",", 
         RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}], ",", 
         RowBox[{"GraphLayout", "\[Rule]", "\"\<GridEmbedding\>\""}]}], 
        "]"}]}], ";", 
      RowBox[{"Association", "[", 
       RowBox[{"\"\<Graph\>\"", "\[Rule]", "g"}], "]"}]}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"spanningTreeCount", "[", "g_Graph", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "km", "}"}], ",", 
     RowBox[{
      RowBox[{"km", "=", 
       RowBox[{"KirchhoffMatrix", "[", "g", "]"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"VertexCount", "[", "g", "]"}], ">", "1"}], ",", 
        RowBox[{"Det", "[", 
         RowBox[{"Most", "[", 
          RowBox[{"Transpose", "[", 
           RowBox[{"Most", "[", "km", "]"}], "]"}], "]"}], "]"}], ",", "0"}], 
       "]"}]}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"calculateResilience", "[", 
    RowBox[{"g_Graph", ",", "failures_Integer"}], "]"}], ":=", 
   RowBox[{"Length", "[", 
    RowBox[{"ConnectedComponents", "[", 
     RowBox[{"EdgeDelete", "[", 
      RowBox[{"g", ",", 
       RowBox[{"RandomSample", "[", 
        RowBox[{
         RowBox[{"EdgeList", "[", "g", "]"}], ",", 
         RowBox[{"Min", "[", 
          RowBox[{"failures", ",", 
           RowBox[{"EdgeCount", "[", "g", "]"}]}], "]"}]}], "]"}]}], "]"}], 
     "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"Style", "[", 
    RowBox[{
    "\"\<\\nNetwork Topology Comparison\>\"", ",", "Bold", ",", "20"}], "]"}],
    "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"closData", "=", 
   RowBox[{"generateClosNetwork", "[", 
    RowBox[{"4", ",", "4", ",", "2"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"meshData", "=", 
   RowBox[{"generateMeshNetwork", "[", 
    RowBox[{"4", ",", "4"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"closGraph", "=", 
   RowBox[{"closData", "[", "\"\<Graph\>\"", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"meshGraph", "=", 
   RowBox[{"meshData", "[", "\"\<Graph\>\"", "]"}]}], ";"}], "\n", 
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Labeled", "[", 
       RowBox[{"closGraph", ",", 
        RowBox[{"Style", "[", 
         RowBox[{"\"\<Clos Network (Decentralized Control)\>\"", ",", "14"}], 
         "]"}], ",", "Top"}], "]"}], ",", 
      RowBox[{"Labeled", "[", 
       RowBox[{"meshGraph", ",", 
        RowBox[{"Style", "[", 
         RowBox[{
         "\"\<Daedaelus N2N Lattice (Distributed Control)\>\"", ",", "14"}], 
         "]"}], ",", "Top"}], "]"}]}], "}"}], "}"}], ",", 
   RowBox[{"Spacings", "\[Rule]", "5"}]}], "]"}], "\n", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"Style", "[", 
    RowBox[{
    "\"\<\\nSpanning Tree Count (Resilience Metric)\>\"", ",", "Bold", ",", 
     "20"}], "]"}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"closTrees", "=", 
   RowBox[{"spanningTreeCount", "[", "closGraph", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"meshTrees", "=", 
   RowBox[{"spanningTreeCount", "[", "meshGraph", "]"}]}], ";"}], "\n", 
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<Clos\>\"", ",", "closTrees"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<N2N Lattice\>\"", ",", "meshTrees"}], "}"}]}], "}"}], ",", 
   
   RowBox[{"ChartLabels", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NumberForm", "[", 
       RowBox[{"closTrees", ",", 
        RowBox[{"ExponentFunction", "\[Rule]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"#1", "\[Equal]", "0"}], ",", "Null", ",", "#1"}], "]"}],
            "&"}], ")"}]}]}], "]"}], ",", 
      RowBox[{"NumberForm", "[", 
       RowBox[{"meshTrees", ",", 
        RowBox[{"ExponentFunction", "\[Rule]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"#1", "\[Equal]", "0"}], ",", "Null", ",", "#1"}], "]"}],
            "&"}], ")"}]}]}], "]"}]}], "}"}]}], ",", 
   RowBox[{"ScalingFunctions", "\[Rule]", "\"\<Log\>\""}], ",", 
   RowBox[{
   "PlotLabel", "\[Rule]", 
    "\"\<Number of Unique Paths (Higher is More Resilient)\>\""}], ",", 
   RowBox[{"ChartStyle", "\[Rule]", "\"\<Pastel\>\""}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], "\n", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"Style", "[", 
    RowBox[{
    "\"\<\\nResilience to Edge Failures\>\"", ",", "Bold", ",", "20"}], "]"}],
    "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"maxFailures", "=", 
   RowBox[{
    RowBox[{"EdgeCount", "[", "closGraph", "]"}], "-", 
    RowBox[{"VertexCount", "[", "closGraph", "]"}], "+", "1"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"resilienceClos", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"calculateResilience", "[", 
      RowBox[{"closGraph", ",", "k"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"k", ",", "0", ",", "maxFailures"}], "}"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"resilienceMesh", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"calculateResilience", "[", 
      RowBox[{"meshGraph", ",", "k"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"k", ",", "0", ",", "maxFailures"}], "}"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"resilienceClos", ",", "resilienceMesh"}], "}"}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Clos\>\"", ",", "\"\<N2N Lattice\>\""}], "}"}]}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Edges Removed (Failures)\>\"", ",", "\"\<Network Partitions\>\""}], 
     "}"}]}], ",", 
   RowBox[{
   "PlotLabel", "\[Rule]", "\"\<Network Fragmentation Under Failure\>\""}], 
   ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Thick", ",", "Dashed"}], "}"}]}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}]}], "Code",
 CellChangeTimes->{{3.962898117841815*^9, 3.962898119741049*^9}},
 CellLabel->
  "In[5948]:=",ExpressionUUID->"06b559f9-9aca-444c-868e-8ca358d01294"],

Cell[BoxData[
 StyleBox["\<\"\\nNetwork Topology Comparison\"\>",
  StripOnInput->False,
  FontSize->20,
  FontWeight->Bold]], "Print",
 CellChangeTimes->{{3.962898118502434*^9, 3.9628981200136013`*^9}},
 CellLabel->
  "During evaluation of \
In[5948]:=",ExpressionUUID->"e5f5fcb0-8a4d-4df1-94f0-895b1a6528d7"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TemplateBox[{
       GraphicsBox[
        NamespaceBox["NetworkGraphics", 
         DynamicModuleBox[{Typeset`graph = HoldComplete[
             
             Graph[{"Spine1", "Spine2", "Leaf1", "Leaf2", "Leaf3", "Leaf4", 
               "S1_1", "S1_2", "S1_3", "S1_4", "S2_1", "S2_2", "S2_3", "S2_4",
                "S3_1", "S3_2", "S3_3", "S3_4", "S4_1", "S4_2", "S4_3", 
               "S4_4"}, {
              Null, {{1, 3}, {2, 3}, {1, 4}, {2, 4}, {1, 5}, {2, 5}, {1, 6}, {
               2, 6}, {3, 7}, {3, 8}, {3, 9}, {3, 10}, {4, 11}, {4, 12}, {4, 
               13}, {4, 14}, {5, 15}, {5, 16}, {5, 17}, {5, 18}, {6, 19}, {6, 
               20}, {6, 21}, {6, 22}}}]]}, 
          TagBox[
           GraphicsGroupBox[
            GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGAQA2IQzcazMmd9EKPDblYzlXQTRoeujY8XnNrA4PB0zhHv
/+//2z+L5VvLvozLgYG14fT7RYwOxtw/FK/LMjkc+71ZIF7prX3Rty79T6Vv
7dk4UnuuCf23L5LjD/Y++9/+xPmkg6pPOB3ezGH7xHFWwCEm14pjmRuLwzKB
RZc0BAUcJG7OCHNf88t+mc3stA2Mgg7yIjoLz09lcIi5bWhoxcvvoJStpF3N
we6Q8vMnt9VlFocDFw7J+lqssT81P+mGRwy7wxrz1EvHz96yD8r4vzH9xm97
FoVUL+MVF+0vlt6dHyvG6MAABR+el/33Fj9nb1T65kzENWYHh8CEiC/rr9vH
VF2bIuT+xR6mrmqe+W7faQwOB7YnCcgEr7L/unEbz9ZTP+03SVsraEmwOKi8
THW2+M7ncMCXYZrOOwaHuNvTPm2fJuAQfk/0iEvSL/trLSuX88UJOLTEn9u/
P/CrPVeTf7LwZV4HAMtBk+k=
             "], {{
               Directive[
                Opacity[0.7], 
                Hue[0.6, 0.7, 0.5]], 
               Arrowheads[0.], {
                
                ArrowBox[{{1, 3}, {1, 4}, {1, 5}, {1, 6}, {2, 3}, {2, 4}, {2, 
                 5}, {2, 6}, {3, 7}, {3, 8}, {3, 9}, {3, 10}, {4, 11}, {4, 
                 12}, {4, 13}, {4, 14}, {5, 15}, {5, 16}, {5, 17}, {5, 18}, {
                 6, 19}, {6, 20}, {6, 21}, {6, 22}}, 0.03858962501291395]}}, {
              
               Directive[
                Hue[0.6, 0.2, 0.8], 
                EdgeForm[
                 Directive[
                  GrayLevel[0], 
                  Opacity[0.7]]]], 
               DiskBox[1, 0.03858962501291395], 
               DiskBox[2, 0.03858962501291395], 
               DiskBox[3, 0.03858962501291395], 
               DiskBox[4, 0.03858962501291395], 
               DiskBox[5, 0.03858962501291395], 
               DiskBox[6, 0.03858962501291395], 
               DiskBox[7, 0.03858962501291395], 
               DiskBox[8, 0.03858962501291395], 
               DiskBox[9, 0.03858962501291395], 
               DiskBox[10, 0.03858962501291395], 
               DiskBox[11, 0.03858962501291395], 
               DiskBox[12, 0.03858962501291395], 
               DiskBox[13, 0.03858962501291395], 
               DiskBox[14, 0.03858962501291395], 
               DiskBox[15, 0.03858962501291395], 
               DiskBox[16, 0.03858962501291395], 
               DiskBox[17, 0.03858962501291395], 
               DiskBox[18, 0.03858962501291395], 
               DiskBox[19, 0.03858962501291395], 
               DiskBox[20, 0.03858962501291395], 
               DiskBox[21, 0.03858962501291395], 
               DiskBox[22, 0.03858962501291395]}}]], 
           MouseAppearanceTag["NetworkGraphics"]], AllowKernelInitialization -> 
          False]], {
        FormatType -> TraditionalForm, FrameTicks -> None, DefaultBaseStyle -> 
         "NetworkGraphics"}], 
       StyleBox[
       "\"Clos Network (Decentralized Control)\"", 14, StripOnInput -> False]},
      "Labeled",
      DisplayFunction->(GridBox[{{
          ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}, {
          TagBox[
           ItemBox[
            PaneBox[
             TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline},
              BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
           "SkipImageSizeLevel"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
        AutoDelete -> False, 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
        BaselinePosition -> {2, 1}]& ),
      InterpretationFunction->(RowBox[{"Labeled", "[", 
         RowBox[{#, ",", #2, ",", "Top", ",", 
           RowBox[{"{", "}"}]}], "]"}]& )], 
     TemplateBox[{
       GraphicsBox[
        NamespaceBox["NetworkGraphics", 
         DynamicModuleBox[{Typeset`graph = HoldComplete[
             
             Graph[{"N1,1", "N1,2", "N1,3", "N1,4", "N2,1", "N2,2", "N2,3", 
               "N2,4", "N3,1", "N3,2", "N3,3", "N3,4", "N4,1", "N4,2", "N4,3",
                "N4,4"}, {
              Null, {{1, 2}, {2, 3}, {3, 4}, {5, 6}, {6, 7}, {7, 8}, {9, 
               10}, {10, 11}, {11, 12}, {13, 14}, {14, 15}, {15, 16}, {1, 
               5}, {2, 6}, {3, 7}, {4, 8}, {5, 9}, {6, 10}, {7, 11}, {8, 
               12}, {9, 13}, {10, 14}, {11, 15}, {12, 16}}}, {
              GraphLayout -> "GridEmbedding", VertexLabels -> {"Name"}}]]}, 
          TagBox[
           GraphicsGroupBox[{{
              Directive[
               Opacity[0.7], 
               Hue[0.6, 0.7, 0.5]], 
              Arrowheads[0.], {
               ArrowBox[CompressedData["
1:eJxTTMoPSmVmYGCQAGImKIaAD/bYaQYHysQ5HLDLo9O41AvgkIfpw6UeJo/O
J9cduNSju4dUcXT3ceCg0dVz4OCTGk6E1BNyByH16O4jVhwXTWw8EwonhLkA
kZgulQ==
                "], 0.030239520958083826`]}}, {
              Directive[
               Hue[0.6, 0.2, 0.8], 
               EdgeForm[
                Directive[
                 GrayLevel[0], 
                 Opacity[0.7]]]], {
               DiskBox[{1., 1.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N1,1\"", TraditionalForm], 
                Offset[{2, 2}, {1.030239520958084, 1.030239520958084}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
               DiskBox[{1., 2.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N1,2\"", TraditionalForm], 
                Offset[{2, 2}, {1.030239520958084, 2.0302395209580837`}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
               DiskBox[{1., 3.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N1,3\"", TraditionalForm], 
                Offset[{2, 2}, {1.030239520958084, 3.0302395209580837`}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
               DiskBox[{1., 4.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N1,4\"", TraditionalForm], 
                Offset[{2, 2}, {1.030239520958084, 4.030239520958084}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
               DiskBox[{2., 1.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N2,1\"", TraditionalForm], 
                Offset[{2, 2}, {2.0302395209580837`, 1.030239520958084}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
               DiskBox[{2., 2.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N2,2\"", TraditionalForm], 
                Offset[{2, 2}, {2.0302395209580837`, 2.0302395209580837`}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
               DiskBox[{2., 3.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N2,3\"", TraditionalForm], 
                Offset[{2, 2}, {2.0302395209580837`, 3.0302395209580837`}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
               DiskBox[{2., 4.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N2,4\"", TraditionalForm], 
                Offset[{2, 2}, {2.0302395209580837`, 4.030239520958084}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
               DiskBox[{3., 1.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N3,1\"", TraditionalForm], 
                Offset[{2, 2}, {3.0302395209580837`, 1.030239520958084}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
               DiskBox[{3., 2.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N3,2\"", TraditionalForm], 
                Offset[{2, 2}, {3.0302395209580837`, 2.0302395209580837`}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
               DiskBox[{3., 3.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N3,3\"", TraditionalForm], 
                Offset[{2, 2}, {3.0302395209580837`, 3.0302395209580837`}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
               DiskBox[{3., 4.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N3,4\"", TraditionalForm], 
                Offset[{2, 2}, {3.0302395209580837`, 4.030239520958084}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
               DiskBox[{4., 1.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N4,1\"", TraditionalForm], 
                Offset[{2, 2}, {4.030239520958084, 1.030239520958084}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
               DiskBox[{4., 2.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N4,2\"", TraditionalForm], 
                Offset[{2, 2}, {4.030239520958084, 2.0302395209580837`}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
               DiskBox[{4., 3.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N4,3\"", TraditionalForm], 
                Offset[{2, 2}, {4.030239520958084, 3.0302395209580837`}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}, {
               DiskBox[{4., 4.}, 0.030239520958083826`], 
               InsetBox[
                FormBox["\"N4,4\"", TraditionalForm], 
                Offset[{2, 2}, {4.030239520958084, 4.030239520958084}], 
                ImageScaled[{0, 0}], BaseStyle -> "Graphics"]}}}], 
           MouseAppearanceTag["NetworkGraphics"]], AllowKernelInitialization -> 
          False]], {
        FormatType -> TraditionalForm, FrameTicks -> None, DefaultBaseStyle -> 
         "NetworkGraphics"}], 
       StyleBox[
       "\"Daedaelus N2N Lattice (Distributed Control)\"", 14, StripOnInput -> 
        False]},
      "Labeled",
      DisplayFunction->(GridBox[{{
          ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}, {
          TagBox[
           ItemBox[
            PaneBox[
             TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline},
              BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
           "SkipImageSizeLevel"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
        AutoDelete -> False, 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
        BaselinePosition -> {2, 1}]& ),
      InterpretationFunction->(RowBox[{"Labeled", "[", 
         RowBox[{#, ",", #2, ",", "Top", ",", 
           RowBox[{"{", "}"}]}], "]"}]& )]}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{5}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.962898118546332*^9, 3.962898120054965*^9}},
 CellLabel->
  "Out[5958]=",ExpressionUUID->"946209ca-8efb-49dc-9abc-46c28a1a7e18"],

Cell[BoxData[
 StyleBox["\<\"\\nSpanning Tree Count (Resilience Metric)\"\>",
  StripOnInput->False,
  FontSize->20,
  FontWeight->Bold]], "Print",
 CellChangeTimes->{{3.962898118502434*^9, 3.9628981200647383`*^9}},
 CellLabel->
  "During evaluation of \
In[5948]:=",ExpressionUUID->"7428bbda-bba8-4f3f-ae60-2743c5956b9d"],

Cell[BoxData[
 GraphicsBox[{
   {Opacity[0], 
    PointBox[{{0.3552804078659868, 2.4657359027997265`}, {5.243991260014567, 
     2.4657359027997265`}}]}, {{}, {{{}, {{}, {{}, 
        {RGBColor[0.431296, 0.709773, 0.927077], EdgeForm[{Opacity[
         0.6719999999999999], Thickness[Small]}], 
         TagBox[
          TooltipBox[
           
           TagBox[RectangleBox[{1.7439912600145666, 2.4657359027997265}, {2.64639475600874, 3.4657359027997265},
             
             RoundingRadius->0],
            StatusArea[#, 32]& ,
            TagBoxNote->"32"],
           StyleBox["32", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[32, {}], "Tooltip"]& ]}}}, {}, {}}, {{}, {{}, {{}, 
        {RGBColor[0.431296, 0.709773, 0.927077], EdgeForm[{Opacity[
         0.6719999999999999], Thickness[Small]}], 
         TagBox[
          TooltipBox[
           
           TagBox[RectangleBox[{4.0367807720320465, 2.4657359027997265}, {4.93918426802622, 11.516439284270025},
             
             RoundingRadius->0],
            StatusArea[#, 100352]& ,
            TagBoxNote->"100352"],
           StyleBox["100352", {}, StripOnInput -> False]],
          Annotation[#, 
           Style[100352, {}], 
           "Tooltip"]& ]}}}, {}, {}}}, {}, {}}, {}, {}, {}, {}, 
   StyleBox[
    StyleBox[{
      {Thickness[Tiny], 
       LineBox[{{0.3552804078659868, 2.4657359027997265`}, {5.335669337217771,
         2.4657359027997265`}}], 
       StyleBox[{}, "GraphicsLabel",
        StripOnInput->False]}, 
      StyleBox[{
        {Thickness[Tiny], 
         LineBox[{{0.7439912600145666, 2.4657359027997265`}, 
           Offset[{-1.102182119232618*^-15, -6.}, {0.7439912600145666, 
            2.4657359027997265`}]}], 
         LineBox[{{4.93918426802622, 2.4657359027997265`}, 
           Offset[{-1.102182119232618*^-15, -6.}, {4.93918426802622, 
            2.4657359027997265`}]}], {{}, {}, {
           LineBox[{{1.64639475600874, 2.4657359027997265`}, 
             Offset[{-7.347880794884119*^-16, -4.}, {1.64639475600874, 
              2.4657359027997265`}]}], 
           LineBox[{{1.7439912600145666`, 2.4657359027997265`}, 
             Offset[{-7.347880794884119*^-16, -4.}, {1.7439912600145666`, 
              2.4657359027997265`}]}]}, {}, {}, {
           LineBox[{{3.93918426802622, 2.4657359027997265`}, 
             Offset[{-7.347880794884119*^-16, -4.}, {3.93918426802622, 
              2.4657359027997265`}]}], 
           LineBox[{{4.0367807720320465`, 2.4657359027997265`}, 
             Offset[{-7.347880794884119*^-16, -4.}, {4.0367807720320465`, 
              2.4657359027997265`}]}]}, {
           LineBox[{{2.64639475600874, 2.4657359027997265`}, 
             Offset[{-1.102182119232618*^-15, -6.}, {2.64639475600874, 
              2.4657359027997265`}]}], 
           LineBox[{{3.0367807720320465`, 2.4657359027997265`}, 
             Offset[{-1.102182119232618*^-15, -6.}, {3.0367807720320465`, 
              2.4657359027997265`}]}]}}}, 
        StyleBox[
         {Thickness[Tiny], InsetBox[
           TagBox[
            InterpretationBox[
             StyleBox["\<\"32\"\>",
              ShowStringCharacters->False],
             32,
             Editable->False],
            NumberForm[#, ExponentFunction -> (If[# == 0, Null, #]& )]& ], 
           Offset[{0, -2}, {1.1951930080116533, 2.4657359027997265}], NCache[
           ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]], 
           Automatic, {1, 0}], InsetBox[
           TagBox[
            InterpretationBox[
             StyleBox["\<\"100352\"\>",
              ShowStringCharacters->False],
             100352,
             Editable->False],
            NumberForm[#, ExponentFunction -> (If[# == 0, Null, #]& )]& ], 
           Offset[{0, -2}, {2.1951930080116533, 2.4657359027997265}], NCache[
           ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]], 
           Automatic, {1, 0}], InsetBox[
           TagBox[
            InterpretationBox[
             StyleBox["\<\"32\"\>",
              ShowStringCharacters->False],
             32,
             Editable->False],
            NumberForm[#, ExponentFunction -> (If[# == 0, Null, #]& )]& ], 
           Offset[{0, -2}, {3.4879825200291332, 2.4657359027997265}], NCache[
           ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]], 
           Automatic, {1, 0}], InsetBox[
           TagBox[
            InterpretationBox[
             StyleBox["\<\"100352\"\>",
              ShowStringCharacters->False],
             100352,
             Editable->False],
            NumberForm[#, ExponentFunction -> (If[# == 0, Null, #]& )]& ], 
           Offset[{0, -2}, {4.487982520029133, 2.4657359027997265}], NCache[
           ImageScaled[{Rational[1, 2], 1}], ImageScaled[{0.5, 1}]], 
           Automatic, {1, 0}]}, "GraphicsLabel",
         StripOnInput->False]}, "GraphicsTicks",
       StripOnInput->False]},
     Antialiasing->False], "GraphicsAxes",
    StripOnInput->False]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, True},
  AxesLabel->{None, None},
  AxesOrigin->{0.3552804078659868, 2.4657359027997265`},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Identity[
       Part[#, 1]], 
      Exp[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Identity[
       Part[#, 1]], 
      Exp[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{
     Charting`ScaledTicks[{Log, Exp}], 
     Charting`ScaledFrameTicks[{Log, Exp}]}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->Medium,
  PlotLabel->FormBox[
   "\"Number of Unique Paths (Higher is More Resilient)\"", TraditionalForm],
  PlotRange->{{All, All}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->FrontEndValueCache[{None, 
     Charting`ScaledTicks[{Log, Exp}]}, {None, {{2.302585092994046, 
       FormBox["10", TraditionalForm], {0.01, 0.}}, {4.605170185988092, 
       FormBox["100", TraditionalForm], {0.01, 0.}}, {6.907755278982137, 
       FormBox["1000", TraditionalForm], {0.01, 0.}}, {9.210340371976184, 
       FormBox[
        TemplateBox[{"10", "4"}, "Superscript", SyntaxForm -> SuperscriptBox],
         TraditionalForm], {0.01, 0.}}, {11.512925464970229`, 
       FormBox[
        TemplateBox[{"10", "5"}, "Superscript", SyntaxForm -> SuperscriptBox],
         TraditionalForm], {0.01, 0.}}, {0., 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      0.6931471805599453, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      1.0986122886681098`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      1.3862943611198906`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      1.6094379124341003`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      1.791759469228055, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      1.9459101490553132`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      2.0794415416798357`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      2.1972245773362196`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      2.995732273553991, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      3.4011973816621555`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      3.6888794541139363`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      3.912023005428146, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      4.0943445622221, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      4.248495242049359, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      4.382026634673881, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      4.499809670330265, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      5.298317366548036, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      5.703782474656201, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      5.991464547107982, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      6.214608098422191, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      6.396929655216146, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      6.551080335043404, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      6.684611727667927, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      6.802394763324311, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      7.600902459542082, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      8.006367567650246, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      8.294049640102028, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      8.517193191416238, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      8.699514748210191, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      8.85366542803745, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      8.987196820661973, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      9.104979856318357, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      9.903487552536127, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      10.308952660644293`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      10.596634733096073`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      10.819778284410283`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      11.002099841204238`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      11.156250521031495`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      11.289781913656018`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      11.407564949312402`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      12.206072645530174`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      12.611537753638338`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      12.89921982609012, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      13.122363377404328`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      13.304684934198283`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      13.458835614025542`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      13.592367006650065`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      13.710150042306449`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 0.}}, {
      13.815510557964274`, 
       FormBox[
        TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
       0.}}}}]]], "Output",
 CellChangeTimes->{{3.962898118546332*^9, 3.9628981201944313`*^9}},
 CellLabel->
  "Out[5962]=",ExpressionUUID->"1fcb9e5f-2638-496f-aab0-09720756b68b"],

Cell[BoxData[
 StyleBox["\<\"\\nResilience to Edge Failures\"\>",
  StripOnInput->False,
  FontSize->20,
  FontWeight->Bold]], "Print",
 CellChangeTimes->{{3.962898118502434*^9, 3.9628981203994513`*^9}},
 CellLabel->
  "During evaluation of \
In[5948]:=",ExpressionUUID->"9ddd60e1-0bc3-493f-be69-7c15fcd02e60"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, 
     InterpretationBox[{
       TagBox[{{{}, {}, 
          TagBox[{
            Hue[0.67, 0.6, 0.6], 
            Directive[
             PointSize[
              NCache[
               Rational[7, 360], 0.019444444444444445`]], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[2], 
             Thickness[Large]], 
            LineBox[{{1., 1.}, {2., 2.}, {3., 2.}, {4., 4.}}]}, 
           Annotation[#, "Charting`Private`Tag#1"]& ], 
          TagBox[{
            Hue[0.9060679774997897, 0.6, 0.6], 
            Directive[
             PointSize[
              NCache[
               Rational[7, 360], 0.019444444444444445`]], 
             RGBColor[0.880722, 0.611041, 0.142051], 
             AbsoluteThickness[2], 
             Dashing[{Small, Small}]], 
            LineBox[{{1., 1.}, {2., 1.}, {3., 1.}, {4., 2.}}]}, 
           Annotation[#, "Charting`Private`Tag#2"]& ]}}, {
        "WolframDynamicHighlight", <|
         "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
       StyleBox[
        DynamicBox[
         (Charting`HighlightActionBox["DynamicHighlight", {}, 
          Slot["HighlightElements"], 
          Slot["LayoutOptions"], 
          Slot["Meta"], 
          Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
             Annotation[{
               Hue[0.67, 0.6, 0.6], 
               Directive[
                PointSize[
                 Rational[7, 360]], 
                RGBColor[0.368417, 0.506779, 0.709798], 
                AbsoluteThickness[2], 
                Thickness[Large]], 
               Line[{{1., 1.}, {2., 2.}, {3., 2.}, {4., 4.}}]}, 
              "Charting`Private`Tag#1"], 
             Annotation[{
               Hue[0.9060679774997897, 0.6, 0.6], 
               Directive[
                PointSize[
                 Rational[7, 360]], 
                RGBColor[0.880722, 0.611041, 0.142051], 
                AbsoluteThickness[2], 
                Dashing[{Small, Small}]], 
               Line[{{1., 1.}, {2., 1.}, {3., 1.}, {4., 2.}}]}, 
              "Charting`Private`Tag#2"]}}, <|
           "HighlightElements" -> <|
             "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
            "LayoutOptions" -> <|
             "PanelPlotLayout" -> <||>, "PlotRange" -> {{0., 4.}, {0, 4.}}, 
              "Frame" -> {{False, False}, {False, False}}, 
              "AxesOrigin" -> {0., 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
              "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
              GoldenRatio^(-1), "DefaultStyle" -> {
                Directive[
                 PointSize[
                  Rational[7, 360]], 
                 RGBColor[0.880722, 0.611041, 0.142051], 
                 AbsoluteThickness[2], 
                 Dashing[{Small, Small}]], 
                Directive[
                 PointSize[
                  Rational[7, 360]], 
                 RGBColor[0.368417, 0.506779, 0.709798], 
                 AbsoluteThickness[2], 
                 Thickness[Large]]}, 
              "HighlightLabelingFunctions" -> <|
               "CoordinatesToolOptions" -> ({
                  Identity[
                   Part[#, 1]], 
                  Identity[
                   Part[#, 2]]}& ), 
                "ScalingFunctions" -> {{Identity, Identity}, {
                  Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
              False|>, 
            "Meta" -> <|
             "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
              "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>]]& )[<|
          "HighlightElements" -> <|
            "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
           "LayoutOptions" -> <|
            "PanelPlotLayout" -> <||>, "PlotRange" -> {{0., 4.}, {0, 4.}}, 
             "Frame" -> {{False, False}, {False, False}}, 
             "AxesOrigin" -> {0., 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
             "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
             GoldenRatio^(-1), "DefaultStyle" -> {
               Directive[
                PointSize[
                 Rational[7, 360]], 
                RGBColor[0.880722, 0.611041, 0.142051], 
                AbsoluteThickness[2], 
                Dashing[{Small, Small}]], 
               Directive[
                PointSize[
                 Rational[7, 360]], 
                RGBColor[0.368417, 0.506779, 0.709798], 
                AbsoluteThickness[2], 
                Thickness[Large]]}, 
             "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                 Identity[
                  Part[#, 1]], 
                 Identity[
                  Part[#, 2]]}& ), 
               "ScalingFunctions" -> {{Identity, Identity}, {
                 Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
             False|>, 
           "Meta" -> <|
            "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
             "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>]], 
        Selectable -> False]}, 
      Annotation[{{{}, {}, 
         Annotation[{
           Hue[0.67, 0.6, 0.6], 
           Directive[
            PointSize[
             Rational[7, 360]], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[2], 
            Thickness[Large]], 
           Line[{{1., 1.}, {2., 2.}, {3., 2.}, {4., 4.}}]}, 
          "Charting`Private`Tag#1"], 
         Annotation[{
           Hue[0.9060679774997897, 0.6, 0.6], 
           Directive[
            PointSize[
             Rational[7, 360]], 
            RGBColor[0.880722, 0.611041, 0.142051], 
            AbsoluteThickness[2], 
            Dashing[{Small, Small}]], 
           Line[{{1., 1.}, {2., 1.}, {3., 1.}, {4., 2.}}]}, 
          "Charting`Private`Tag#2"]}}, <|
       "HighlightElements" -> <|
         "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
        "LayoutOptions" -> <|
         "PanelPlotLayout" -> <||>, "PlotRange" -> {{0., 4.}, {0, 4.}}, 
          "Frame" -> {{False, False}, {False, False}}, 
          "AxesOrigin" -> {0., 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
          "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
          GoldenRatio^(-1), "DefaultStyle" -> {
            Directive[
             PointSize[
              Rational[7, 360]], 
             RGBColor[0.880722, 0.611041, 0.142051], 
             AbsoluteThickness[2], 
             Dashing[{Small, Small}]], 
            Directive[
             PointSize[
              Rational[7, 360]], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[2], 
             Thickness[Large]]}, 
          "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
              Identity[
               Part[#, 1]], 
              Identity[
               Part[#, 2]]}& ), 
            "ScalingFunctions" -> {{Identity, Identity}, {
              Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>,
         "Meta" -> <|
         "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
          ListLinePlot, "GroupHighlight" -> False|>|>, 
       "DynamicHighlight"]], {{}, {}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, DisplayFunction -> 
     Identity, AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
     Axes -> {True, True}, AxesLabel -> {
       FormBox[
        TagBox["\"Edges Removed (Failures)\"", HoldForm], TraditionalForm], 
       FormBox[
        TagBox["\"Network Partitions\"", HoldForm], TraditionalForm]}, 
     AxesOrigin -> {0., 0}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], ImageSize -> Medium, 
     Method -> {
      "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
       "DefaultGraphicsInteraction" -> {
        "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
         "Effects" -> {
          "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
           "Droplines" -> {
            "freeformCursorMode" -> True, 
             "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
       "DefaultMeshStyle" -> AbsolutePointSize[6], "DefaultPlotStyle" -> {
         Directive[
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]], 
         Directive[
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[2]], 
         Directive[
          RGBColor[0.560181, 0.691569, 0.194885], 
          AbsoluteThickness[2]], 
         Directive[
          RGBColor[0.922526, 0.385626, 0.209179], 
          AbsoluteThickness[2]], 
         Directive[
          RGBColor[0.528488, 0.470624, 0.701351], 
          AbsoluteThickness[2]], 
         Directive[
          RGBColor[0.772079, 0.431554, 0.102387], 
          AbsoluteThickness[2]], 
         Directive[
          RGBColor[0.363898, 0.618501, 0.782349], 
          AbsoluteThickness[2]], 
         Directive[
          RGBColor[1, 0.75, 0], 
          AbsoluteThickness[2]], 
         Directive[
          RGBColor[0.647624, 0.37816, 0.614037], 
          AbsoluteThickness[2]], 
         Directive[
          RGBColor[0.571589, 0.586483, 0.], 
          AbsoluteThickness[2]], 
         Directive[
          RGBColor[0.915, 0.3325, 0.2125], 
          AbsoluteThickness[2]], 
         Directive[
          RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
          AbsoluteThickness[2]], 
         Directive[
          RGBColor[
          0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
          AbsoluteThickness[2]], 
         Directive[
          RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
          AbsoluteThickness[2]], 
         Directive[
          RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
          AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
       "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> True, 
       "IncludeHighlighting" -> "CurrentSet", "HighlightStyle" -> Automatic, 
       "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, PlotLabel -> 
     FormBox["\"Network Fragmentation Under Failure\"", TraditionalForm], 
     PlotRange -> {{0., 4.}, {0, 4.}}, PlotRangeClipping -> True, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Clos\"", "\"N2N Lattice\""}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2], 
                    Thickness[Large]], {
                    LineBox[{{0, 12.5}, {40, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2], 
                    Thickness[Large]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {40, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2], 
                    Dashing[{Small, Small}]], {
                    LineBox[{{0, 12.5}, {40, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2], 
                    Dashing[{Small, Small}]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {40, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", 
                    FractionBox["7", "360"], "]"}], ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "2", "]"}], ",", 
                   RowBox[{"Thickness", "[", "Large", "]"}]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", 
                    FractionBox["7", "360"], "]"}], ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "2", "]"}], ",", 
                   RowBox[{"Dashing", "[", 
                    RowBox[{"{", 
                    RowBox[{"Small", ",", "Small"}], "}"}], "]"}]}], "]"}]}], 
             "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"True", ",", "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.962898118546332*^9, 3.962898120434499*^9}},
 CellLabel->
  "Out[5967]=",ExpressionUUID->"da979a5a-2203-4e0d-b496-440d8d3ff104"]
}, Open  ]]
}, Open  ]],

Cell["\<\
Deconstructing the Resilience Curves: Interpreting the Simulation\
\>", "Subtitle",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898307534945*^9}, {
   3.962898368042245*^9, 3.962898369635974*^9}, {3.962898493181312*^9, 
   3.9628984941794252`*^9}, {3.9628987079145727`*^9, 3.962898708877008*^9}, {
   3.962898758976321*^9, 3.962898759719747*^9}, {3.96289891712922*^9, 
   3.96289891771443*^9}, {3.962898961511298*^9, 3.962898962156911*^9}, {
   3.9628993202881403`*^9, 3.9628993208552933`*^9}, {3.962899410522279*^9, 
   3.962899411102943*^9}, {3.962899578152917*^9, 3.962899579479451*^9}},
 FormatType->"TextForm",
 FontSize->18,
 Background->None,ExpressionUUID->"68e94aae-3ac5-4828-8f15-7ee57d3a08ff"],

Cell["\<\
The resilience plots generated by the simulation offer a clear visual \
narrative of how each topology behaves under duress. The curves trace the \
number of network partitions as a function of the number of randomly removed \
links, revealing their distinct failure modes.

The `closResilience` curve demonstrates that the spine-leaf architecture, \
while initially robust, has a clear point of vulnerability. The graph will \
show the network remaining as a single component for the first few edge \
removals, but then exhibiting a sharp, non-linear increase in fragmentation. \
This behavior is a direct consequence of its hierarchical structure. The \
links connecting each leaf switch to the spine layer are, as a group, \
critical. While the failure of one such link can be tolerated, the failure of \
all links connecting a single leaf to the spine layer will effectively sever \
that entire rack of servers from the rest of the data center. The spine \
switches themselves function as articulation points in the network\
\[CloseCurlyQuote]s logical topology; all inter-rack traffic must pass \
through them. Disconnecting a significant portion of the spine layer would \
lead to catastrophic fragmentation. The steepness of the curve reflects the \
fact that once a certain threshold of failures is crossed, the removal of \
just a few more strategically important links can cause the network to \
rapidly disintegrate.

The `daedaelusResilience` curve for the mesh network tells a story of much \
more graceful degradation. The plot will remain flat at 1 connected component \
for a significantly larger number of edge removals. When fragmentation does \
begin, the increase in the number of partitions is more gradual and linear. \
This superior resilience is an emergent property of the \
mesh\[CloseCurlyQuote]s dense, decentralized connectivity. In a \
well-connected mesh, there are very few, if any, bridges or articulation \
points under random failure conditions. The removal of any single edge is a \
purely local event, and due to the high path diversity analyzed in the \
previous section, traffic can be easily and immediately rerouted around the \
break. The network only begins to break into significant partitions when the \
density of removed links becomes so high that entire regions become \
topologically isolated, forming \[OpenCurlyDoubleQuote]islands\
\[CloseCurlyDoubleQuote] in the grid. \[NonBreakingSpace] 

This analysis exposes the Achilles\[CloseCurlyQuote] heel of the Clos \
architecture: its reliance on the spine layer as a centralized point of \
transit. While this centralization is key to its predictable performance, it \
also concentrates risk. The entire set of uplink connections from a leaf \
switch constitutes a \[OpenCurlyDoubleQuote]cut set\[CloseCurlyDoubleQuote] \
in the graph; severing this set isolates the leaf. The spine layer itself \
represents a critical, centralized resource. In contrast, the mesh topology \
distributes risk across the entire fabric. There is no single node or small \
set of links whose failure can cause a systemic collapse. Resilience is an \
inherent, emergent property of the dense local interconnectivity. This aligns \
perfectly with the Daedaelus design goal of local re-routing; failures can be \
handled at the perimeter of the fault without requiring global knowledge or \
state changes precisely because the local topology provides a wealth of \
alternative paths. \[NonBreakingSpace] 

Therefore, while a Clos network is engineered to be resilient to the failure \
of individual spine switches or links (through ECMP), it remains structurally \
vulnerable to correlated failures that could compromise the entire spine \
layer or a significant fraction of leaf-to-spine uplinks. The mesh \
architecture, by its very nature, is more robust against both random failures \
and potentially coordinated attacks, as it lacks a central point of failure \
to target.\
\>", "Chapter",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898338257278*^9}, {
   3.962898381402219*^9, 3.96289842166496*^9}, {3.96289849829926*^9, 
   3.962898570547124*^9}, {3.962898605101194*^9, 3.9628986082485447`*^9}, {
   3.962898718588675*^9, 3.962898842457036*^9}, {3.96289889781201*^9, 
   3.9628989798655977`*^9}, {3.962899016408059*^9, 3.962899016568543*^9}, {
   3.96289921107825*^9, 3.962899439769548*^9}, {3.962899525881777*^9, 
   3.9628995291864357`*^9}, {3.962899586358218*^9, 3.962899619617795*^9}},
 FormatType->"TextForm",
 FontSize->14,
 Background->None,ExpressionUUID->"5444301d-b55b-418a-b233-a2e0fb0211e0"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Synthesis and Strategic Implications", "Title",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, 3.962898640977153*^9, {3.962898888923689*^9, 
   3.962898889645359*^9}, {3.962899383523978*^9, 3.962899384071321*^9}, {
   3.962899668359058*^9, 3.962899670010738*^9}},
 FormatType->"TextForm",
 FontSize->24,
 Background->None,ExpressionUUID->"1292be09-91b1-4774-9757-428e4769fffd"],

Cell[CellGroupData[{

Cell["\<\
The preceding analyses have dissected the Clos and mesh architectures across \
the fundamental axes of latency, path diversity, and resilience. This final \
section synthesizes these findings into a holistic verdict, moving from a \
direct comparison of their strengths and weaknesses to actionable \
recommendations for network architects. The central conclusion is that there \
is no single \[OpenCurlyDoubleQuote]best\[CloseCurlyDoubleQuote] \
architecture; rather, the optimal choice is a strategic decision contingent \
on the specific requirements of the intended workload, representing a \
fundamental trade-off between engineered predictability and inherent \
robustness.\
\>", "Chapter",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898338257278*^9}, {
   3.962898381402219*^9, 3.96289842166496*^9}, {3.96289849829926*^9, 
   3.962898570547124*^9}, {3.962898605101194*^9, 3.9628986082485447`*^9}, {
   3.962898718588675*^9, 3.962898842457036*^9}, {3.96289889781201*^9, 
   3.9628989798655977`*^9}, {3.962899016408059*^9, 3.962899016568543*^9}, {
   3.96289921107825*^9, 3.962899439769548*^9}, {3.962899525881777*^9, 
   3.9628995291864357`*^9}, {3.962899586358218*^9, 3.962899619617795*^9}, {
   3.962899678407419*^9, 3.9628996836282873`*^9}},
 FormatType->"TextForm",
 FontSize->14,
 Background->None,ExpressionUUID->"54e08eb5-b6da-4e2c-a408-c504801634cc"],

Cell["A Multi-faceted Verdict on Network Fabrics", "Subtitle",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898307534945*^9}, {
   3.962898368042245*^9, 3.962898369635974*^9}, {3.962898493181312*^9, 
   3.9628984941794252`*^9}, {3.9628987079145727`*^9, 3.962898708877008*^9}, {
   3.962898758976321*^9, 3.962898759719747*^9}, {3.96289891712922*^9, 
   3.96289891771443*^9}, {3.962898961511298*^9, 3.962898962156911*^9}, {
   3.9628993202881403`*^9, 3.9628993208552933`*^9}, {3.962899410522279*^9, 
   3.962899411102943*^9}, {3.962899578152917*^9, 3.962899579479451*^9}, {
   3.962899693461899*^9, 3.962899694438067*^9}},
 FormatType->"TextForm",
 FontSize->18,
 Background->None,ExpressionUUID->"206ae1d1-3760-48ee-8f1c-0a7ee10389e5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
The Clos and mesh topologies represent two distinct and powerful optimization \
points in the design space of high-performance network fabrics. The \
spine-leaf implementation of the Clos network is an architecture of \
engineered performance, designed to deliver predictable, low-latency, \
any-to-any communication at massive scale. Its hierarchical structure and \
reliance on a fully-meshed spine layer are deliberate choices made to serve \
the unpredictable and heterogeneous traffic patterns of modern \
general-purpose data centers. The mesh topology, particularly as envisioned \
by Daedaelus, is an architecture of inherent reliability. Its decentralized, \
highly-interconnected structure provides immense path diversity and graceful \
degradation under failure, forming the ideal foundation for a fabric that \
prioritizes guaranteed data delivery and extreme fault tolerance above all \
else.

The quantitative simulation results provide stark evidence for these \
differing philosophies. The Clos network exhibits a low and constant hop \
count for inter-rack communication, but this predictability comes at the cost \
of limited path diversity and a structural vulnerability at its centralized \
spine layer. The mesh network shows variable, locality-dependent latency but \
boasts an astronomical number of potential paths and a far more resilient \
structure that resists fragmentation. The following table consolidates this \
multi-faceted analysis, linking the quantitative metrics to their strategic \
implications.


Metric, Clos (Spine-Leaf), Daedaelus (Mesh), Insight from Analysis
Latency (Hop Count), Low & Predictable (e.g., 4 hops), Variable & \
Locality-Dependent (e.g., 1-6 hops), Clos is optimized for uniform, \
any-to-any latency, crucial for general-purpose cloud workloads. Mesh excels \
at workloads with high communication locality.

Path Diversity (Spanning Trees), Low (Structurally Constrained), Extremely \
High (Combinatorially Rich), Mesh offers vastly superior potential for \
adaptive routing, sophisticated load balancing, and handling adversarial \
traffic patterns.

Resilience (Fragmentation), Moderate (Vulnerable at Spine Layer), High \
(Graceful Degradation), Mesh is inherently more robust against random and \
widespread link failures due to its decentralized structure and lack of \
critical chokepoints.

Scalability Model, Structured (Add Spines/Leaves), Homogeneous (Add Nodes to \
Grid), Clos provides a well-understood, prescriptive scaling model. Mesh \
scaling is more uniform but may have different physical cabling and power \
implications.

Primary Design Goal, Predictable & High-Speed Performance, Guaranteed \
Reliability & Fault Tolerance, Clos aims to make communication fast and \
predictable. Daedaelus aims to make it fundamentally unbreakable.

Ideal Workload, General-Purpose Cloud & Big Data & Web Services, \
Mission-Critical Distributed Systems & HPC & Distributed Ledgers & Resilient \
Control Systems, The optimal choice is fundamentally workload-dependent & \
trading predictability for ultimate robustness.\
\>", "Chapter",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898338257278*^9}, {
   3.962898381402219*^9, 3.96289842166496*^9}, {3.96289849829926*^9, 
   3.962898570547124*^9}, {3.962898605101194*^9, 3.9628986082485447`*^9}, {
   3.962898718588675*^9, 3.962898842457036*^9}, {3.96289889781201*^9, 
   3.9628989798655977`*^9}, {3.962899016408059*^9, 3.962899016568543*^9}, {
   3.96289921107825*^9, 3.962899439769548*^9}, {3.962899525881777*^9, 
   3.9628995291864357`*^9}, {3.962899586358218*^9, 3.962899619617795*^9}, {
   3.962899678407419*^9, 3.9628997353431253`*^9}, {3.962899811502316*^9, 
   3.962899912007807*^9}},
 FormatType->"TextForm",
 FontSize->14,
 Background->None,ExpressionUUID->"0991b44e-e26c-4446-93da-f8aa44ea845e"],

Cell["\<\
Recommendations for Architectural Selection: Matching Fabric to Function\
\>", "Subtitle",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898307534945*^9}, {
   3.962898368042245*^9, 3.962898369635974*^9}, {3.962898493181312*^9, 
   3.9628984941794252`*^9}, {3.9628987079145727`*^9, 3.962898708877008*^9}, {
   3.962898758976321*^9, 3.962898759719747*^9}, {3.96289891712922*^9, 
   3.96289891771443*^9}, {3.962898961511298*^9, 3.962898962156911*^9}, {
   3.9628993202881403`*^9, 3.9628993208552933`*^9}, {3.962899410522279*^9, 
   3.962899411102943*^9}, {3.962899578152917*^9, 3.962899579479451*^9}, {
   3.962899693461899*^9, 3.962899694438067*^9}, {3.962899935943284*^9, 
   3.962899936555819*^9}},
 FormatType->"TextForm",
 FontSize->18,
 Background->None,ExpressionUUID->"afcf9fe9-5b17-4130-9b6a-0a9f5f5a989c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
The choice between a Clos-based architecture and a mesh-based one is a \
strategic decision that must be aligned with the primary function and risk \
profile of the target environment.\
\>", "Chapter",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898338257278*^9}, {
   3.962898381402219*^9, 3.96289842166496*^9}, {3.96289849829926*^9, 
   3.962898570547124*^9}, {3.962898605101194*^9, 3.9628986082485447`*^9}, {
   3.962898718588675*^9, 3.962898842457036*^9}, {3.96289889781201*^9, 
   3.9628989798655977`*^9}, {3.962899016408059*^9, 3.962899016568543*^9}, {
   3.96289921107825*^9, 3.962899439769548*^9}, {3.962899525881777*^9, 
   3.9628995291864357`*^9}, {3.962899586358218*^9, 3.962899619617795*^9}, {
   3.962899678407419*^9, 3.9628997353431253`*^9}, {3.962899811502316*^9, 
   3.962899912007807*^9}, {3.9628999460652027`*^9, 3.962899957057847*^9}},
 FormatType->"TextForm",
 FontSize->14,
 Background->None,ExpressionUUID->"97a8fc70-f87f-4c72-be97-5d6a817fb860"],

Cell["When to Choose Clos/Spine-Leaf:", "Subtitle",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898307534945*^9}, {
   3.962898368042245*^9, 3.962898369635974*^9}, {3.962898493181312*^9, 
   3.9628984941794252`*^9}, {3.9628987079145727`*^9, 3.962898708877008*^9}, {
   3.962898758976321*^9, 3.962898759719747*^9}, {3.96289891712922*^9, 
   3.96289891771443*^9}, {3.962898961511298*^9, 3.962898962156911*^9}, {
   3.9628993202881403`*^9, 3.9628993208552933`*^9}, {3.962899410522279*^9, 
   3.962899411102943*^9}, {3.962899578152917*^9, 3.962899579479451*^9}, {
   3.962899693461899*^9, 3.962899694438067*^9}, {3.962899935943284*^9, 
   3.962899963843845*^9}},
 FormatType->"TextForm",
 FontSize->18,
 Background->None,ExpressionUUID->"fce06084-369c-4b0c-93b1-c4fd47ee791b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
The spine-leaf architecture is the proven, industry-standard choice for \
large-scale, general-purpose data centers, and for good reason. It is the \
ideal solution for environments that must support a diverse and unpredictable \
mix of applications, where consistent, low-latency performance for any-to-any \
communication is the primary requirement. \[NonBreakingSpace] \
\>", "Chapter",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898338257278*^9}, {
   3.962898381402219*^9, 3.96289842166496*^9}, {3.96289849829926*^9, 
   3.962898570547124*^9}, {3.962898605101194*^9, 3.9628986082485447`*^9}, {
   3.962898718588675*^9, 3.962898842457036*^9}, {3.96289889781201*^9, 
   3.9628989798655977`*^9}, {3.962899016408059*^9, 3.962899016568543*^9}, {
   3.96289921107825*^9, 3.962899439769548*^9}, {3.962899525881777*^9, 
   3.9628995291864357`*^9}, {3.962899586358218*^9, 3.962899619617795*^9}, {
   3.962899678407419*^9, 3.9628997353431253`*^9}, {3.962899811502316*^9, 
   3.962899912007807*^9}, {3.9628999460652027`*^9, 3.9628999697448883`*^9}},
 FormatType->"TextForm",
 FontSize->14,
 Background->None,ExpressionUUID->"9c4f2f9a-dba6-4513-9217-bb0a5927256f"],

Cell[TextData[{
 StyleBox["Use Cases:",
  FontWeight->"Bold"],
 " Public and private cloud infrastructure, large enterprise data centers, \
web-scale application hosting, and big data analytics clusters."
}], "Item",
 CellChangeTimes->{{3.9629000624765587`*^9, 
  3.9629000704465446`*^9}},ExpressionUUID->"6e424dd8-a6dd-4532-8228-\
e17693fc8a06"],

Cell[TextData[{
 StyleBox["The Strategic Trade-off:",
  FontWeight->"Bold"],
 " An organization choosing a spine-leaf fabric accepts a known and \
manageable structural vulnerability at the spine layer. In return, they gain \
a mature, well-understood architecture that delivers massive, predictable \
bandwidth and is supported by a robust ecosystem of hardware vendors and \
network management tools."
}], "Item",
 CellChangeTimes->{{3.9629000624765587`*^9, 
  3.96290007840104*^9}},ExpressionUUID->"b4ecba8f-049a-40c2-9626-\
4ea69dfae3e7"]
}, Open  ]],

Cell["When to Choose Mesh/Daedaelus:", "Subtitle",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898307534945*^9}, {
   3.962898368042245*^9, 3.962898369635974*^9}, {3.962898493181312*^9, 
   3.9628984941794252`*^9}, {3.9628987079145727`*^9, 3.962898708877008*^9}, {
   3.962898758976321*^9, 3.962898759719747*^9}, {3.96289891712922*^9, 
   3.96289891771443*^9}, {3.962898961511298*^9, 3.962898962156911*^9}, {
   3.9628993202881403`*^9, 3.9628993208552933`*^9}, {3.962899410522279*^9, 
   3.962899411102943*^9}, {3.962899578152917*^9, 3.962899579479451*^9}, {
   3.962899693461899*^9, 3.962899694438067*^9}, {3.962899935943284*^9, 
   3.962899963843845*^9}, {3.96290008538869*^9, 3.9629000964031*^9}},
 FormatType->"TextForm",
 FontSize->18,
 Background->None,ExpressionUUID->"7e8cfd06-62ac-4c99-b4fd-b447a6199651"],

Cell[CellGroupData[{

Cell["\<\
The mesh architecture is the superior choice for specialized, high-stakes \
applications where the cost of failure\[LongDash]be it data loss, transaction \
failure, or loss of control\[LongDash]is unacceptably high. It is designed \
for environments where guaranteed reliability and extreme resilience are the \
paramount concerns, potentially even at the expense of uniform latency. \
\[NonBreakingSpace] \
\>", "Chapter",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898338257278*^9}, {
   3.962898381402219*^9, 3.96289842166496*^9}, {3.96289849829926*^9, 
   3.962898570547124*^9}, {3.962898605101194*^9, 3.9628986082485447`*^9}, {
   3.962898718588675*^9, 3.962898842457036*^9}, {3.96289889781201*^9, 
   3.9628989798655977`*^9}, {3.962899016408059*^9, 3.962899016568543*^9}, {
   3.96289921107825*^9, 3.962899439769548*^9}, {3.962899525881777*^9, 
   3.9628995291864357`*^9}, {3.962899586358218*^9, 3.962899619617795*^9}, {
   3.962899678407419*^9, 3.9628997353431253`*^9}, {3.962899811502316*^9, 
   3.962899912007807*^9}, {3.9628999460652027`*^9, 3.9628999697448883`*^9}, {
   3.9629001017858353`*^9, 3.962900102531497*^9}},
 FormatType->"TextForm",
 FontSize->14,
 Background->None,ExpressionUUID->"07f4cd4d-ee02-4fa8-ba55-6dd8e3ffeba5"],

Cell[TextData[{
 StyleBox["Use Cases:",
  FontWeight->"Bold"],
 " Mission-critical systems such as high-frequency financial trading \
platforms (drawing parallels to the fault-tolerant design of Tandem NonStop \
systems, where a key Daedaelus expert has experience ), resilient industrial \
control systems, national security and defense applications, and the \
foundational fabric for distributed ledger technologies that require absolute \
data integrity. \[NonBreakingSpace] "
}], "Item",
 CellChangeTimes->{{3.9629000624765587`*^9, 3.9629000704465446`*^9}, {
  3.962900106005971*^9, 
  3.962900106799358*^9}},ExpressionUUID->"de6f7e3e-8261-4d0c-884e-\
f870ab8c03e1"],

Cell[TextData[{
 StyleBox["The Strategic Trade-off:",
  FontWeight->"Bold"],
 " An organization choosing a mesh fabric accepts potentially variable, \
locality-dependent latency. In exchange, they receive a fabric that is \
structurally robust against failure and, in the case of the Daedaelus \
implementation, provides protocol-level guarantees against the common failure \
modes of conventional networks. This represents a strategic shift in priority \
from simple \[OpenCurlyDoubleQuote]fault tolerance\[CloseCurlyDoubleQuote] to \
a more ambitious goal of a \[OpenCurlyDoubleQuote]fault-proof\
\[CloseCurlyDoubleQuote] design."
}], "Item",
 CellChangeTimes->{{3.9629000624765587`*^9, 3.96290007840104*^9}, {
  3.9629001136234207`*^9, 
  3.9629001166574993`*^9}},ExpressionUUID->"66d5a825-125e-444a-a731-\
f38889e53c06"]
}, Open  ]],

Cell["\<\
Looking forward, the dichotomy between these two architectures may not remain \
absolute. Research into hybrid topologies, such as the \
\[OpenCurlyDoubleQuote]Mesh of Clos\[CloseCurlyDoubleQuote] network, suggests \
a path toward combining the best attributes of both worlds. Such designs \
could use hierarchical, Clos-like structures to provide high-performance \
connectivity within local clusters or racks, while employing a robust mesh \
fabric to interconnect these clusters at a larger scale. This would balance \
the predictable performance and wiring simplicity of a hierarchy with the \
scalable, resilient connectivity of a mesh. The fundamental analysis \
presented in this report provides the essential framework for understanding \
the critical trade-offs that will continue to shape the future of \
high-performance network fabrics. \[NonBreakingSpace] \
\>", "Chapter",
 CellChangeTimes->{{3.962898212792045*^9, 3.962898218303555*^9}, 
   3.962898269827654*^9, {3.9628983063802853`*^9, 3.962898338257278*^9}, {
   3.962898381402219*^9, 3.96289842166496*^9}, {3.96289849829926*^9, 
   3.962898570547124*^9}, {3.962898605101194*^9, 3.9628986082485447`*^9}, {
   3.962898718588675*^9, 3.962898842457036*^9}, {3.96289889781201*^9, 
   3.9628989798655977`*^9}, {3.962899016408059*^9, 3.962899016568543*^9}, {
   3.96289921107825*^9, 3.962899439769548*^9}, {3.962899525881777*^9, 
   3.9628995291864357`*^9}, {3.962899586358218*^9, 3.962899619617795*^9}, {
   3.962899678407419*^9, 3.9628997353431253`*^9}, {3.962899811502316*^9, 
   3.962899912007807*^9}, {3.9628999460652027`*^9, 3.9628999697448883`*^9}, {
   3.9629001017858353`*^9, 3.962900125830803*^9}},
 FormatType->"TextForm",
 FontSize->14,
 Background->None,ExpressionUUID->"935a0f4c-d6ac-4981-80ca-ff951097ee52"]
}, Open  ]]
},
WindowSize->{725, 864},
WindowMargins->{{Automatic, 0}, {Automatic, 0}},
DefaultNewCellStyle->"Input",
Background->Automatic,
FrontEndVersion->"14.0 for Mac OS X ARM (64-bit) (December 12, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"cec6b970-761d-4b1a-9e0d-c67b30c5357e"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 354, 8, 178, "Title",ExpressionUUID->"3a502bc2-f007-44d2-9ae7-cf5a568ecc31"],
Cell[CellGroupData[{
Cell[959, 34, 17769, 450, 2912, "Input",ExpressionUUID->"998aaebd-de5d-4d41-af48-dcfd059ba0df"],
Cell[18731, 486, 7361, 158, 1367, "Output",ExpressionUUID->"3392d2ef-9821-4e8d-882a-51a0468d516c"]
}, Open  ]],
Cell[26107, 647, 354, 7, 90, "Subtitle",ExpressionUUID->"412a1740-f330-49f4-a2d0-0c6863a5b66a"],
Cell[CellGroupData[{
Cell[26486, 658, 1214, 19, 335, "Chapter",ExpressionUUID->"c10f83c2-545d-4e3d-ba4d-e5baf3ba7b1e"],
Cell[CellGroupData[{
Cell[27725, 681, 31630, 814, 806, "Code",ExpressionUUID->"c60fc1dd-1b81-46c5-b5bf-2677ab206c68"],
Cell[59358, 1497, 54990, 1158, 1365, "Output",ExpressionUUID->"bd9241c0-416c-4b72-a787-8ca6e2916c41"]
}, Open  ]]
}, Open  ]],
Cell[114375, 2659, 397, 8, 58, "Subtitle",ExpressionUUID->"88729ef2-564b-4ab9-bb59-b8879b01b435"],
Cell[CellGroupData[{
Cell[114797, 2671, 5143, 77, 1595, "Chapter",ExpressionUUID->"9397e1ea-a5fc-45de-8965-b87706eda618"],
Cell[CellGroupData[{
Cell[119965, 2752, 23761, 614, 686, "Code",ExpressionUUID->"edf2a014-f6ab-4ecc-add2-4eac3299c500"],
Cell[143729, 3368, 6219, 99, 491, "Output",ExpressionUUID->"e4abed96-4966-4167-8e8e-4d5319597a81"],
Cell[149951, 3469, 52806, 1088, 2347, "Output",ExpressionUUID->"14949904-a09d-4a48-adce-2677ed7a767d"]
}, Open  ]]
}, Open  ]],
Cell[202784, 4561, 463, 10, 90, "Subtitle",ExpressionUUID->"d27f31a2-08e7-41fa-b6ae-5c449a460945"],
Cell[CellGroupData[{
Cell[203272, 4575, 5051, 79, 1455, "Chapter",ExpressionUUID->"dc0174c3-74c4-4f63-a215-9b65a86ae7b5"],
Cell[CellGroupData[{
Cell[208348, 4658, 28367, 741, 693, "Code",ExpressionUUID->"d1bcaa84-a24b-474f-aad5-b66f7fe93351"],
Cell[236718, 5401, 18723, 308, 661, "Output",ExpressionUUID->"021ad817-f3c0-473c-99b6-ad790ec74c4e"],
Cell[255444, 5711, 1290, 32, 281, "Output",ExpressionUUID->"c40f69fd-c74e-4651-be23-91e4cc39267f"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[256795, 5750, 317, 7, 134, "Title",ExpressionUUID->"4ea48689-18cc-4f47-a1af-8df54b140382"],
Cell[CellGroupData[{
Cell[257137, 5761, 1185, 18, 279, "Chapter",ExpressionUUID->"6ecf3f64-af79-4d6c-b2e1-626661920c1e"],
Cell[CellGroupData[{
Cell[258347, 5783, 11937, 315, 318, "Code",ExpressionUUID->"e8f95e02-002c-42b4-95ec-c025e1a9af1a"],
Cell[270287, 6100, 620, 12, 57, "Message",ExpressionUUID->"cc23b0ae-d4f2-4680-9963-3b51acb3500e"],
Cell[270910, 6114, 350, 6, 59, "Output",ExpressionUUID->"b8518635-3821-4876-96df-468022c545ca"],
Cell[271263, 6122, 47176, 1021, 1671, "Output",ExpressionUUID->"f40a2cb9-c922-41f2-9f7f-890d58c51bea"]
}, Open  ]]
}, Open  ]],
Cell[318466, 7147, 498, 9, 58, "Subtitle",ExpressionUUID->"0764c1a0-3e48-47b1-9d84-d32930535748"],
Cell[CellGroupData[{
Cell[318989, 7160, 2879, 44, 811, "Chapter",ExpressionUUID->"e5c5af7c-7360-4022-8255-463c75966ceb"],
Cell[CellGroupData[{
Cell[321893, 7208, 13749, 371, 502, "Code",ExpressionUUID->"f4f224b7-47bd-4d57-877d-9fc84f932898"],
Cell[335645, 7581, 309, 8, 79, "Print",ExpressionUUID->"1decbd1c-057f-4b16-86b0-044e4f683054"],
Cell[335957, 7591, 11312, 231, 931, "Output",ExpressionUUID->"e8d0eb5c-98fe-4da3-bf74-f48cab003918"],
Cell[347272, 7824, 319, 8, 79, "Print",ExpressionUUID->"f58c0fa9-b36c-4838-ba1c-efcfd987cb6c"],
Cell[347594, 7834, 12562, 304, 333, "Output",ExpressionUUID->"85582dc3-3f1f-4861-adca-6c0aee5487a1"],
Cell[360159, 8140, 307, 8, 79, "Print",ExpressionUUID->"82067ebf-de3a-4598-9620-9f8f6b442727"],
Cell[360469, 8150, 17230, 399, 250, "Output",ExpressionUUID->"4ea44012-e9b2-4722-8cc3-7f5843600aa8"]
}, Open  ]]
}, Open  ]],
Cell[377726, 8553, 551, 10, 58, "Subtitle",ExpressionUUID->"b191f1e6-9374-4150-ae0f-672a2baa9898"],
Cell[CellGroupData[{
Cell[378302, 8567, 4019, 58, 1231, "Chapter",ExpressionUUID->"e8cffb12-bc70-4d62-a73c-0b201769e575"],
Cell[CellGroupData[{
Cell[382346, 8629, 17684, 449, 279, "Code",ExpressionUUID->"23aecd6e-c1d8-4fe7-ba08-d00ed5493708"],
Cell[400033, 9080, 7346, 158, 1359, "Output",ExpressionUUID->"254190b8-a59a-4fa1-be85-ee39c1346ffc"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[407440, 9245, 354, 6, 134, "Title",ExpressionUUID->"751b5c7f-0ba2-4268-bdd5-a4738ba7d05c"],
Cell[CellGroupData[{
Cell[407819, 9255, 1358, 21, 307, "Chapter",ExpressionUUID->"6e18d5f4-784d-442b-8482-aecf7d8d5112"],
Cell[CellGroupData[{
Cell[409202, 9280, 6329, 160, 157, "Code",ExpressionUUID->"c9ba91db-be3e-44fa-90e7-687ae1722972"],
Cell[415534, 9442, 12380, 249, 927, "Output",ExpressionUUID->"cc4fd69f-0a99-4ad7-8b4e-96f4ea05549f"]
}, Open  ]]
}, Open  ]],
Cell[427941, 9695, 592, 11, 58, "Subtitle",ExpressionUUID->"894fe6f4-d853-49ab-9bf3-f3c06e46355c"],
Cell[CellGroupData[{
Cell[428558, 9710, 2298, 35, 587, "Chapter",ExpressionUUID->"117a6cbe-d82b-4ca2-9291-baa4e756399c"],
Cell[CellGroupData[{
Cell[430881, 9749, 25170, 699, 686, "Code",ExpressionUUID->"f0d595f4-1411-4142-95c0-78e51f9c0756"],
Cell[456054, 10450, 27397, 581, 610, "Output",ExpressionUUID->"f541c4e9-de6e-4892-8a9a-234169d12145"]
}, Open  ]]
}, Open  ]],
Cell[483478, 11035, 665, 12, 90, "Subtitle",ExpressionUUID->"d19896db-f3ef-47d5-b85c-88f2b90eadfb"],
Cell[CellGroupData[{
Cell[484168, 11051, 1650, 30, 335, "Chapter",ExpressionUUID->"368bde94-5457-458b-bf0f-31d83e1b3632"],
Cell[485821, 11083, 1115, 30, 64, "Item",ExpressionUUID->"6726d0b9-dcb2-49b7-8fcc-58e0df425591"],
Cell[486939, 11115, 1116, 31, 66, "Item",ExpressionUUID->"9e6981d0-dbea-4381-90d3-d67318caebb8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[488092, 11151, 1862, 45, 255, "Chapter",ExpressionUUID->"4d18d7a7-7c34-4191-b958-7348f512f535"],
Cell[CellGroupData[{
Cell[489979, 11200, 9975, 280, 341, "Code",ExpressionUUID->"c7d6fc34-80e8-49d2-a394-cb648bebaf48"],
Cell[499957, 11482, 6222, 147, 301, "Output",ExpressionUUID->"7d0d18ca-d8cb-4f5d-aeae-24e0bf704781"]
}, Open  ]]
}, Open  ]],
Cell[506206, 11633, 678, 10, 58, "Subtitle",ExpressionUUID->"eb4d267f-f013-4cf1-b551-ca617b94b02b"],
Cell[CellGroupData[{
Cell[506909, 11647, 3861, 60, 1203, "Chapter",ExpressionUUID->"8c963e3b-8f84-4f0d-9377-f9324451706e"],
Cell[CellGroupData[{
Cell[510795, 11711, 24759, 683, 663, "Code",ExpressionUUID->"5e915184-2940-47e2-868c-b41bd20c6cfd"],
Cell[535557, 12396, 30235, 640, 610, "Output",ExpressionUUID->"356e152c-769f-4482-a3ee-77e5bcf8a682"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[565853, 13043, 398, 6, 134, "Title",ExpressionUUID->"30741bc6-668a-4b37-912f-564da47b0cda"],
Cell[CellGroupData[{
Cell[566276, 13053, 1399, 22, 279, "Chapter",ExpressionUUID->"9151359a-5a2c-438b-902b-f7425f0d0d1b"],
Cell[CellGroupData[{
Cell[567700, 13079, 9062, 258, 341, "Code",ExpressionUUID->"1b1a38c0-50fa-4399-9295-7b08114ebc16"],
Cell[576765, 13339, 6478, 152, 301, "Output",ExpressionUUID->"74d7ebaa-a864-45f1-918b-750ce3e96b0b"]
}, Open  ]]
}, Open  ]],
Cell[583270, 13495, 716, 11, 58, "Subtitle",ExpressionUUID->"7892f0b7-4843-4c17-a653-0e85ad65b20e"],
Cell[CellGroupData[{
Cell[584011, 13510, 2282, 40, 587, "Chapter",ExpressionUUID->"3e103e8c-06e0-419d-ab1b-a7109d093278"],
Cell[586296, 13552, 917, 20, 63, "Item",ExpressionUUID->"0c1d81ba-cfac-4ed8-b710-3810a5e531dd"],
Cell[587216, 13574, 812, 17, 38, "Item",ExpressionUUID->"177973b2-6138-42a2-a5ab-585f557ad6b7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[588065, 13596, 993, 17, 139, "Chapter",ExpressionUUID->"7473325b-8cd4-4fca-af2a-e97d2a59b262"],
Cell[CellGroupData[{
Cell[589083, 13617, 13749, 371, 502, "Code",ExpressionUUID->"06b559f9-9aca-444c-868e-8ca358d01294"],
Cell[602835, 13990, 310, 8, 79, "Print",ExpressionUUID->"e5f5fcb0-8a4d-4df1-94f0-895b1a6528d7"],
Cell[603148, 14000, 11310, 231, 931, "Output",ExpressionUUID->"946209ca-8efb-49dc-9abc-46c28a1a7e18"],
Cell[614461, 14233, 322, 8, 79, "Print",ExpressionUUID->"7428bbda-bba8-4f3f-ae60-2743c5956b9d"],
Cell[614786, 14243, 12562, 304, 333, "Output",ExpressionUUID->"1fcb9e5f-2638-496f-aab0-09720756b68b"],
Cell[627351, 14549, 310, 8, 79, "Print",ExpressionUUID->"9ddd60e1-0bc3-493f-be69-7c15fcd02e60"],
Cell[627664, 14559, 17230, 399, 250, "Output",ExpressionUUID->"da979a5a-2203-4e0d-b496-440d8d3ff104"]
}, Open  ]]
}, Open  ]],
Cell[644921, 14962, 791, 13, 58, "Subtitle",ExpressionUUID->"68e94aae-3ac5-4828-8f15-7ee57d3a08ff"],
Cell[645715, 14977, 4675, 71, 1371, "Chapter",ExpressionUUID->"5444301d-b55b-418a-b233-a2e0fb0211e0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[650427, 15053, 427, 7, 90, "Title",ExpressionUUID->"1292be09-91b1-4774-9757-428e4769fffd"],
Cell[CellGroupData[{
Cell[650879, 15064, 1452, 23, 251, "Chapter",ExpressionUUID->"54e08eb5-b6da-4e2c-a408-c504801634cc"],
Cell[652334, 15089, 810, 12, 58, "Subtitle",ExpressionUUID->"206ae1d1-3760-48ee-8f1c-0a7ee10389e5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[653181, 15106, 3910, 68, 1343, "Chapter",ExpressionUUID->"0991b44e-e26c-4446-93da-f8aa44ea845e"],
Cell[657094, 15176, 898, 15, 90, "Subtitle",ExpressionUUID->"afcf9fe9-5b17-4130-9b6a-0a9f5f5a989c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[658029, 15196, 1055, 17, 111, "Chapter",ExpressionUUID->"97a8fc70-f87f-4c72-be97-5d6a817fb860"],
Cell[659087, 15215, 849, 13, 58, "Subtitle",ExpressionUUID->"fce06084-369c-4b0c-93b1-c4fd47ee791b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[659973, 15233, 1245, 19, 167, "Chapter",ExpressionUUID->"9c4f2f9a-dba6-4513-9217-bb0a5927256f"],
Cell[661221, 15254, 346, 8, 67, "Item",ExpressionUUID->"6e424dd8-a6dd-4532-8228-e17693fc8a06"],
Cell[661570, 15264, 542, 11, 145, "Item",ExpressionUUID->"b4ecba8f-049a-40c2-9626-4ea69dfae3e7"]
}, Open  ]],
Cell[662127, 15278, 891, 13, 58, "Subtitle",ExpressionUUID->"7e8cfd06-62ac-4c99-b4fd-b447a6199651"],
Cell[CellGroupData[{
Cell[663043, 15295, 1331, 21, 167, "Chapter",ExpressionUUID->"07f4cd4d-ee02-4fa8-ba55-6dd8e3ffeba5"],
Cell[664377, 15318, 670, 13, 172, "Item",ExpressionUUID->"de6f7e3e-8261-4d0c-884e-f870ab8c03e1"],
Cell[665050, 15333, 824, 15, 198, "Item",ExpressionUUID->"66d5a825-125e-444a-a731-f38889e53c06"]
}, Open  ]],
Cell[665889, 15351, 1794, 27, 279, "Chapter",ExpressionUUID->"935a0f4c-d6ac-4981-80ca-ff951097ee52"]
}, Open  ]]
}
]
*)

